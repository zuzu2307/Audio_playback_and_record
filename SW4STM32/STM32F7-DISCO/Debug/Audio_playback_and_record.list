
Audio_playback_and_record.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ab0  0800d068  0800d068  0001d068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011b18  08011b18  00021b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011b20  08011b20  00021b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011b24  08011b24  00021b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000148  20000000  08011b28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000b8b4  20000148  08011c70  00030148  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  2000b9fc  08011c70  0003b9fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 10 .debug_line   00024a32  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000499a7  00000000  00000000  00054baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008738  00000000  00000000  0009e551  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001d98  00000000  00000000  000a6c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00106af8  00000000  00000000  000a8a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002c80  00000000  00000000  001af520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001e559  00000000  00000000  001b21a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0003087a  00000000  00000000  001d06f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00200f73  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006110  00000000  00000000  00200ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000148 	.word	0x20000148
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d050 	.word	0x0800d050

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000014c 	.word	0x2000014c
 800020c:	0800d050 	.word	0x0800d050

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005c6:	e003      	b.n	80005d0 <LoopCopyDataInit>

080005c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ce:	3104      	adds	r1, #4

080005d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d8:	d3f6      	bcc.n	80005c8 <CopyDataInit>
  ldr  r2, =_sbss
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005dc:	e002      	b.n	80005e4 <LoopFillZerobss>

080005de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005e0:	f842 3b04 	str.w	r3, [r2], #4

080005e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e8:	d3f9      	bcc.n	80005de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005ea:	f003 fef5 	bl	80043d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f00b fb65 	bl	800bcbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f2:	f000 f96b 	bl	80008cc <main>
  bx  lr    
 80005f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005f8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80005fc:	08011b28 	.word	0x08011b28
  ldr  r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000604:	20000148 	.word	0x20000148
  ldr  r2, =_sbss
 8000608:	20000148 	.word	0x20000148
  ldr  r3, = _ebss
 800060c:	2000b9fc 	.word	0x2000b9fc

08000610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC_IRQHandler>

08000612 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000612:	b570      	push	{r4, r5, r6, lr}
 8000614:	460e      	mov	r6, r1
 8000616:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000618:	460c      	mov	r4, r1
 800061a:	1ba3      	subs	r3, r4, r6
 800061c:	429d      	cmp	r5, r3
 800061e:	dc01      	bgt.n	8000624 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000620:	4628      	mov	r0, r5
 8000622:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000624:	f3af 8000 	nop.w
 8000628:	f804 0b01 	strb.w	r0, [r4], #1
 800062c:	e7f5      	b.n	800061a <_read+0x8>

0800062e <_write>:

int _write(int file, char *ptr, int len)
{
 800062e:	b570      	push	{r4, r5, r6, lr}
 8000630:	460e      	mov	r6, r1
 8000632:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000634:	460c      	mov	r4, r1
 8000636:	1ba3      	subs	r3, r4, r6
 8000638:	429d      	cmp	r5, r3
 800063a:	dc01      	bgt.n	8000640 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800063c:	4628      	mov	r0, r5
 800063e:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8000640:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000644:	f00b fa9a 	bl	800bb7c <__io_putchar>
 8000648:	e7f5      	b.n	8000636 <_write+0x8>
	...

0800064c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800064c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <_sbrk+0x2c>)
{
 8000650:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000652:	6819      	ldr	r1, [r3, #0]
 8000654:	b909      	cbnz	r1, 800065a <_sbrk+0xe>
		heap_end = &end;
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <_sbrk+0x30>)
 8000658:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800065a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800065c:	4669      	mov	r1, sp
 800065e:	4402      	add	r2, r0
 8000660:	428a      	cmp	r2, r1
 8000662:	d906      	bls.n	8000672 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000664:	f00b fb24 	bl	800bcb0 <__errno>
 8000668:	230c      	movs	r3, #12
 800066a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000670:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8000672:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8000674:	e7fc      	b.n	8000670 <_sbrk+0x24>
 8000676:	bf00      	nop
 8000678:	20000164 	.word	0x20000164
 800067c:	2000ba00 	.word	0x2000ba00

08000680 <_close>:

int _close(int file)
{
	return -1;
}
 8000680:	f04f 30ff 	mov.w	r0, #4294967295
 8000684:	4770      	bx	lr

08000686 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800068a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800068c:	604b      	str	r3, [r1, #4]
}
 800068e:	4770      	bx	lr

08000690 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000690:	2001      	movs	r0, #1
 8000692:	4770      	bx	lr

08000694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000694:	2000      	movs	r0, #0
 8000696:	4770      	bx	lr

08000698 <AUDIO_StorageParse>:
  * @brief  Copies disk content in the explorer list.
  * @param  None
  * @retval Operation result
  */
FRESULT AUDIO_StorageParse(void)
{
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	b0d4      	sub	sp, #336	; 0x150
  FRESULT res = FR_OK;
  FILINFO fno;
  DIR dir;
  char *fn;
  
  res = f_opendir(&dir, USBDISKPath);
 800069e:	4929      	ldr	r1, [pc, #164]	; (8000744 <AUDIO_StorageParse+0xac>)
  FileList.ptr = 0;
 80006a0:	4c29      	ldr	r4, [pc, #164]	; (8000748 <AUDIO_StorageParse+0xb0>)
  res = f_opendir(&dir, USBDISKPath);
 80006a2:	a801      	add	r0, sp, #4
 80006a4:	f009 fb04 	bl	8009cb0 <f_opendir>
  FileList.ptr = 0;
 80006a8:	2300      	movs	r3, #0
  
  if(res == FR_OK)
 80006aa:	4606      	mov	r6, r0
  FileList.ptr = 0;
 80006ac:	f8a4 33d8 	strh.w	r3, [r4, #984]	; 0x3d8
  if(res == FR_OK)
 80006b0:	b940      	cbnz	r0, 80006c4 <AUDIO_StorageParse+0x2c>
  {
    while(USBH_MSC_IsReady(&hUSBHost))
 80006b2:	4f26      	ldr	r7, [pc, #152]	; (800074c <AUDIO_StorageParse+0xb4>)
      
      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
      {
        if((fno.fattrib & AM_DIR) == 0)
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 80006b4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8000754 <AUDIO_StorageParse+0xbc>
 80006b8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8000758 <AUDIO_StorageParse+0xc0>
    while(USBH_MSC_IsReady(&hUSBHost))
 80006bc:	4638      	mov	r0, r7
 80006be:	f009 ffb8 	bl	800a632 <USBH_MSC_IsReady>
 80006c2:	b950      	cbnz	r0, 80006da <AUDIO_StorageParse+0x42>
          }
        }
      }   
    }
  }
  NumObs = FileList.ptr;
 80006c4:	f8b4 23d8 	ldrh.w	r2, [r4, #984]	; 0x3d8
  f_closedir(&dir);
 80006c8:	a801      	add	r0, sp, #4
  NumObs = FileList.ptr;
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <AUDIO_StorageParse+0xb8>)
 80006cc:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 80006ce:	f009 fb42 	bl	8009d56 <f_closedir>
  return res;
}
 80006d2:	4630      	mov	r0, r6
 80006d4:	b054      	add	sp, #336	; 0x150
 80006d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      res = f_readdir(&dir, &fno);
 80006da:	a90e      	add	r1, sp, #56	; 0x38
 80006dc:	a801      	add	r0, sp, #4
 80006de:	f009 fb4e 	bl	8009d7e <f_readdir>
      if(res != FR_OK || fno.fname[0] == 0)
 80006e2:	bb68      	cbnz	r0, 8000740 <AUDIO_StorageParse+0xa8>
 80006e4:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0eb      	beq.n	80006c4 <AUDIO_StorageParse+0x2c>
      if(fno.fname[0] == '.')
 80006ec:	2b2e      	cmp	r3, #46	; 0x2e
 80006ee:	d0e5      	beq.n	80006bc <AUDIO_StorageParse+0x24>
      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 80006f0:	f8b4 a3d8 	ldrh.w	sl, [r4, #984]	; 0x3d8
 80006f4:	f1ba 0f17 	cmp.w	sl, #23
 80006f8:	d8e0      	bhi.n	80006bc <AUDIO_StorageParse+0x24>
        if((fno.fattrib & AM_DIR) == 0)
 80006fa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80006fe:	06db      	lsls	r3, r3, #27
 8000700:	d4dc      	bmi.n	80006bc <AUDIO_StorageParse+0x24>
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000702:	4641      	mov	r1, r8
 8000704:	f10d 004e 	add.w	r0, sp, #78	; 0x4e
 8000708:	f00b fc99 	bl	800c03e <strstr>
 800070c:	b930      	cbnz	r0, 800071c <AUDIO_StorageParse+0x84>
 800070e:	4649      	mov	r1, r9
 8000710:	f10d 004e 	add.w	r0, sp, #78	; 0x4e
 8000714:	f00b fc93 	bl	800c03e <strstr>
 8000718:	2800      	cmp	r0, #0
 800071a:	d0cf      	beq.n	80006bc <AUDIO_StorageParse+0x24>
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 800071c:	2529      	movs	r5, #41	; 0x29
 800071e:	2228      	movs	r2, #40	; 0x28
 8000720:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 8000724:	fb05 400a 	mla	r0, r5, sl, r4
 8000728:	3001      	adds	r0, #1
 800072a:	f00b fc73 	bl	800c014 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 800072e:	f8b4 33d8 	ldrh.w	r3, [r4, #984]	; 0x3d8
 8000732:	2201      	movs	r2, #1
 8000734:	435d      	muls	r5, r3
            FileList.ptr++;
 8000736:	4413      	add	r3, r2
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000738:	5562      	strb	r2, [r4, r5]
            FileList.ptr++;
 800073a:	f8a4 33d8 	strh.w	r3, [r4, #984]	; 0x3d8
 800073e:	e7bd      	b.n	80006bc <AUDIO_StorageParse+0x24>
      res = f_readdir(&dir, &fno);
 8000740:	4606      	mov	r6, r0
 8000742:	e7bf      	b.n	80006c4 <AUDIO_StorageParse+0x2c>
 8000744:	20007a30 	.word	0x20007a30
 8000748:	20006f5c 	.word	0x20006f5c
 800074c:	2000756c 	.word	0x2000756c
 8000750:	2000016c 	.word	0x2000016c
 8000754:	08011448 	.word	0x08011448
 8000758:	08011236 	.word	0x08011236

0800075c <AUDIO_ShowWavFiles>:
  * @brief  Shows audio file (*.wav) on the root
  * @param  None
  * @retval None
  */
uint8_t AUDIO_ShowWavFiles(void)
{
 800075c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t i = 0;
  uint8_t line_idx = 0;

  if(AUDIO_StorageParse() ==  FR_OK)
 8000760:	f7ff ff9a 	bl	8000698 <AUDIO_StorageParse>
 8000764:	4604      	mov	r4, r0
 8000766:	2800      	cmp	r0, #0
 8000768:	d13d      	bne.n	80007e6 <AUDIO_ShowWavFiles+0x8a>
  {
    if(FileList.ptr > 0)
 800076a:	4f21      	ldr	r7, [pc, #132]	; (80007f0 <AUDIO_ShowWavFiles+0x94>)
 800076c:	f8b7 33d8 	ldrh.w	r3, [r7, #984]	; 0x3d8
 8000770:	2b00      	cmp	r3, #0
 8000772:	d03a      	beq.n	80007ea <AUDIO_ShowWavFiles+0x8e>
    {
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
      LCD_UsrLog("audio file(s) [ROOT]:\n\n");
 8000778:	4d1e      	ldr	r5, [pc, #120]	; (80007f4 <AUDIO_ShowWavFiles+0x98>)
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800077a:	f002 fef3 	bl	8003564 <BSP_LCD_SetTextColor>
      LCD_UsrLog("audio file(s) [ROOT]:\n\n");
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	481d      	ldr	r0, [pc, #116]	; (80007f8 <AUDIO_ShowWavFiles+0x9c>)
      
      for(i = 0; i < FileList.ptr; i++)
      {
        line_idx++;
        LCD_DbgLog("   |__");
 8000784:	f46f 067f 	mvn.w	r6, #16711680	; 0xff0000
      LCD_UsrLog("audio file(s) [ROOT]:\n\n");
 8000788:	602b      	str	r3, [r5, #0]
        LCD_DbgLog((char *)FileList.file[i].name);
 800078a:	f04f 0829 	mov.w	r8, #41	; 0x29
      LCD_UsrLog("audio file(s) [ROOT]:\n\n");
 800078e:	f00b fc01 	bl	800bf94 <puts>
        LCD_DbgLog("   |__");
 8000792:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8000800 <AUDIO_ShowWavFiles+0xa4>
      for(i = 0; i < FileList.ptr; i++)
 8000796:	4620      	mov	r0, r4
 8000798:	b2c4      	uxtb	r4, r0
 800079a:	f8b7 33d8 	ldrh.w	r3, [r7, #984]	; 0x3d8
 800079e:	f100 0901 	add.w	r9, r0, #1
 80007a2:	429c      	cmp	r4, r3
 80007a4:	d30c      	bcc.n	80007c0 <AUDIO_ShowWavFiles+0x64>
        LCD_DbgLog("\n");
      }
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80007a6:	f04f 30ff 	mov.w	r0, #4294967295
 80007aa:	f002 fedb 	bl	8003564 <BSP_LCD_SetTextColor>
      LCD_UsrLog("\nEnd of files list.\n");
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	4812      	ldr	r0, [pc, #72]	; (80007fc <AUDIO_ShowWavFiles+0xa0>)
 80007b4:	602b      	str	r3, [r5, #0]
 80007b6:	f00b fbed 	bl	800bf94 <puts>
      return 0;
 80007ba:	2000      	movs	r0, #0
    }
    return 1;
  }
  return 2;
}
 80007bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        LCD_DbgLog("   |__");
 80007c0:	4650      	mov	r0, sl
 80007c2:	602e      	str	r6, [r5, #0]
 80007c4:	f00b fb5e 	bl	800be84 <iprintf>
        LCD_DbgLog((char *)FileList.file[i].name);
 80007c8:	fb08 7004 	mla	r0, r8, r4, r7
 80007cc:	602e      	str	r6, [r5, #0]
 80007ce:	3001      	adds	r0, #1
 80007d0:	f00b fb58 	bl	800be84 <iprintf>
        LCD_DbgLog("\n");
 80007d4:	200a      	movs	r0, #10
 80007d6:	602e      	str	r6, [r5, #0]
 80007d8:	f00b fb6c 	bl	800beb4 <putchar>
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295
 80007e0:	4648      	mov	r0, r9
 80007e2:	602b      	str	r3, [r5, #0]
 80007e4:	e7d8      	b.n	8000798 <AUDIO_ShowWavFiles+0x3c>
  return 2;
 80007e6:	2002      	movs	r0, #2
 80007e8:	e7e8      	b.n	80007bc <AUDIO_ShowWavFiles+0x60>
    return 1;
 80007ea:	2001      	movs	r0, #1
 80007ec:	e7e6      	b.n	80007bc <AUDIO_ShowWavFiles+0x60>
 80007ee:	bf00      	nop
 80007f0:	20006f5c 	.word	0x20006f5c
 80007f4:	2000b9f0 	.word	0x2000b9f0
 80007f8:	0801123a 	.word	0x0801123a
 80007fc:	08011258 	.word	0x08011258
 8000800:	08011251 	.word	0x08011251

08000804 <AUDIO_GetWavObjectNumber>:
  * @retval None
  */
uint16_t AUDIO_GetWavObjectNumber(void)
{
  return NumObs;
}
 8000804:	4b01      	ldr	r3, [pc, #4]	; (800080c <AUDIO_GetWavObjectNumber+0x8>)
 8000806:	8818      	ldrh	r0, [r3, #0]
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	2000016c 	.word	0x2000016c

08000810 <USBH_UserProcess>:
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
{
  switch(id)
 8000810:	2904      	cmp	r1, #4
{
 8000812:	b510      	push	{r4, lr}
  switch(id)
 8000814:	d040      	beq.n	8000898 <USBH_UserProcess+0x88>
 8000816:	2905      	cmp	r1, #5
 8000818:	d018      	beq.n	800084c <USBH_UserProcess+0x3c>
 800081a:	2902      	cmp	r1, #2
 800081c:	d13b      	bne.n	8000896 <USBH_UserProcess+0x86>
      LCD_ErrLog("ERROR : Cannot UnLink FatFS Driver! \n");
    }
    break;

  case HOST_USER_CLASS_ACTIVE:
    appli_state = APPLICATION_READY;
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <USBH_UserProcess+0x90>)
    /* Link the USB Host disk I/O driver */
    if (FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
 8000820:	4820      	ldr	r0, [pc, #128]	; (80008a4 <USBH_UserProcess+0x94>)
    appli_state = APPLICATION_READY;
 8000822:	7019      	strb	r1, [r3, #0]
    if (FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
 8000824:	4920      	ldr	r1, [pc, #128]	; (80008a8 <USBH_UserProcess+0x98>)
 8000826:	f009 fb01 	bl	8009e2c <FATFS_LinkDriver>
 800082a:	4602      	mov	r2, r0
 800082c:	2800      	cmp	r0, #0
 800082e:	d132      	bne.n	8000896 <USBH_UserProcess+0x86>
    {
      if (f_mount(&USBH_FatFs, "", 0) != FR_OK)
 8000830:	491e      	ldr	r1, [pc, #120]	; (80008ac <USBH_UserProcess+0x9c>)
 8000832:	481f      	ldr	r0, [pc, #124]	; (80008b0 <USBH_UserProcess+0xa0>)
 8000834:	f008 fe0c 	bl	8009450 <f_mount>
 8000838:	2800      	cmp	r0, #0
 800083a:	d02c      	beq.n	8000896 <USBH_UserProcess+0x86>
      {
        LCD_ErrLog("ERROR : Cannot Initialize FatFs! \n");
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <USBH_UserProcess+0xa4>)
 800083e:	4c1e      	ldr	r4, [pc, #120]	; (80008b8 <USBH_UserProcess+0xa8>)
 8000840:	481e      	ldr	r0, [pc, #120]	; (80008bc <USBH_UserProcess+0xac>)
 8000842:	6023      	str	r3, [r4, #0]
 8000844:	f00b fb1e 	bl	800be84 <iprintf>
 8000848:	481d      	ldr	r0, [pc, #116]	; (80008c0 <USBH_UserProcess+0xb0>)
 800084a:	e01f      	b.n	800088c <USBH_UserProcess+0x7c>
    appli_state = APPLICATION_DISCONNECT;
 800084c:	2203      	movs	r2, #3
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <USBH_UserProcess+0x90>)
    if (f_mount(NULL, "", 0) != FR_OK)
 8000850:	4916      	ldr	r1, [pc, #88]	; (80008ac <USBH_UserProcess+0x9c>)
    appli_state = APPLICATION_DISCONNECT;
 8000852:	701a      	strb	r2, [r3, #0]
    if (f_mount(NULL, "", 0) != FR_OK)
 8000854:	2200      	movs	r2, #0
 8000856:	4610      	mov	r0, r2
 8000858:	f008 fdfa 	bl	8009450 <f_mount>
 800085c:	b158      	cbz	r0, 8000876 <USBH_UserProcess+0x66>
      LCD_ErrLog("ERROR : Cannot DeInitialize FatFs! \n");
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <USBH_UserProcess+0xa4>)
 8000860:	4c15      	ldr	r4, [pc, #84]	; (80008b8 <USBH_UserProcess+0xa8>)
 8000862:	4816      	ldr	r0, [pc, #88]	; (80008bc <USBH_UserProcess+0xac>)
 8000864:	6023      	str	r3, [r4, #0]
 8000866:	f00b fb0d 	bl	800be84 <iprintf>
 800086a:	4816      	ldr	r0, [pc, #88]	; (80008c4 <USBH_UserProcess+0xb4>)
 800086c:	f00b fb92 	bl	800bf94 <puts>
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	6023      	str	r3, [r4, #0]
    if (FATFS_UnLinkDriver(USBDISKPath) != 0)
 8000876:	480c      	ldr	r0, [pc, #48]	; (80008a8 <USBH_UserProcess+0x98>)
 8000878:	f009 faf4 	bl	8009e64 <FATFS_UnLinkDriver>
 800087c:	b158      	cbz	r0, 8000896 <USBH_UserProcess+0x86>
      LCD_ErrLog("ERROR : Cannot UnLink FatFS Driver! \n");
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <USBH_UserProcess+0xa4>)
 8000880:	4c0d      	ldr	r4, [pc, #52]	; (80008b8 <USBH_UserProcess+0xa8>)
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <USBH_UserProcess+0xac>)
 8000884:	6023      	str	r3, [r4, #0]
 8000886:	f00b fafd 	bl	800be84 <iprintf>
 800088a:	480f      	ldr	r0, [pc, #60]	; (80008c8 <USBH_UserProcess+0xb8>)
        LCD_ErrLog("ERROR : Cannot Initialize FatFs! \n");
 800088c:	f00b fb82 	bl	800bf94 <puts>
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	6023      	str	r3, [r4, #0]
    break;
   
  default:
    break; 
  }
}
 8000896:	bd10      	pop	{r4, pc}
    appli_state = APPLICATION_START;
 8000898:	4b01      	ldr	r3, [pc, #4]	; (80008a0 <USBH_UserProcess+0x90>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
}
 800089e:	e7fa      	b.n	8000896 <USBH_UserProcess+0x86>
 80008a0:	20000170 	.word	0x20000170
 80008a4:	08010e74 	.word	0x08010e74
 80008a8:	20007a30 	.word	0x20007a30
 80008ac:	08011250 	.word	0x08011250
 80008b0:	20007338 	.word	0x20007338
 80008b4:	ffff0000 	.word	0xffff0000
 80008b8:	2000b9f0 	.word	0x2000b9f0
 80008bc:	0801126c 	.word	0x0801126c
 80008c0:	080112bd 	.word	0x080112bd
 80008c4:	08011274 	.word	0x08011274
 80008c8:	08011298 	.word	0x08011298

080008cc <main>:
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b0b4      	sub	sp, #208	; 0xd0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008d8:	4b94      	ldr	r3, [pc, #592]	; (8000b2c <main+0x260>)
 80008da:	2100      	movs	r1, #0
 80008dc:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008e4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008ee:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008f8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008fc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000900:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000904:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000908:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800090c:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000910:	0784      	lsls	r4, r0, #30
 8000912:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000914:	ea02 0c05 	and.w	ip, r2, r5
 8000918:	4621      	mov	r1, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800091a:	4607      	mov	r7, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800091c:	ea4c 0601 	orr.w	r6, ip, r1
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000920:	3f01      	subs	r7, #1
 8000922:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000926:	f8c3 6260 	str.w	r6, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 800092a:	1c7e      	adds	r6, r7, #1
 800092c:	d1f6      	bne.n	800091c <main+0x50>
 800092e:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8000930:	f112 0f20 	cmn.w	r2, #32
 8000934:	d1ee      	bne.n	8000914 <main+0x48>
 8000936:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800093a:	695a      	ldr	r2, [r3, #20]
 800093c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000940:	615a      	str	r2, [r3, #20]
 8000942:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000946:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800094a:	f003 fd8f 	bl	800446c <HAL_Init>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800094e:	2501      	movs	r5, #1
 8000950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000954:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;  
 8000956:	f04f 0e19 	mov.w	lr, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800095a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095c:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800095e:	e9cd 5307 	strd	r5, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000966:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;  
 800096a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800096e:	e9cd e30f 	strd	lr, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000972:	2308      	movs	r3, #8
 8000974:	9312      	str	r3, [sp, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000976:	f005 fb11 	bl	8005f9c <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 800097a:	b100      	cbz	r0, 800097e <main+0xb2>
 800097c:	e7fe      	b.n	800097c <main+0xb0>
  {
    while(1) { ; }
  }

  /* Activate the OverDrive to reach the 200 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800097e:	f005 fad5 	bl	8005f2c <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 8000982:	b100      	cbz	r0, 8000986 <main+0xba>
 8000984:	e7fe      	b.n	8000984 <main+0xb8>
  {
    while(1) { ; }
  }

  /* Select PLLSAI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000986:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
 800098a:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800098e:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000990:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000992:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000994:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000998:	9332      	str	r3, [sp, #200]	; 0xc8
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
 800099a:	2304      	movs	r3, #4
 800099c:	e9cd c318 	strd	ip, r3, [sp, #96]	; 0x60
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80009a0:	f005 fda4 	bl	80064ec <HAL_RCCEx_PeriphCLKConfig>
  if(ret != HAL_OK)
 80009a4:	b100      	cbz	r0, 80009a8 <main+0xdc>
 80009a6:	e7fe      	b.n	80009a6 <main+0xda>
  {
    while(1) { ; }
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80009a8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009aa:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ae:	9004      	str	r0, [sp, #16]

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 80009b0:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	e9cd 3602 	strd	r3, r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ba:	e9cd 1305 	strd	r1, r3, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 80009be:	2106      	movs	r1, #6
 80009c0:	f005 fcd6 	bl	8006370 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 80009c4:	4604      	mov	r4, r0
 80009c6:	b100      	cbz	r0, 80009ca <main+0xfe>
 80009c8:	e7fe      	b.n	80009c8 <main+0xfc>
  BSP_LED_Init(LED1);
 80009ca:	f002 f937 	bl	8002c3c <BSP_LED_Init>
  BSP_LCD_Init();
 80009ce:	f003 fa65 	bl	8003e9c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS); 
 80009d2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80009d6:	4628      	mov	r0, r5
 80009d8:	f002 fd86 	bl	80034e8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 80009dc:	4628      	mov	r0, r5
 80009de:	f002 fdbb 	bl	8003558 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 80009e2:	f003 f99d 	bl	8003d20 <BSP_LCD_DisplayOn>
  LCD_LOG_Init();
 80009e6:	f00b f847 	bl	800ba78 <LCD_LOG_Init>
  LCD_LOG_SetHeader((uint8_t *)"Audio Playback and Record Application");
 80009ea:	4851      	ldr	r0, [pc, #324]	; (8000b30 <main+0x264>)
 80009ec:	f00b f84e 	bl	800ba8c <LCD_LOG_SetHeader>
  LCD_UsrLog("USB Host library started.\n"); 
 80009f0:	4b50      	ldr	r3, [pc, #320]	; (8000b34 <main+0x268>)
 80009f2:	4851      	ldr	r0, [pc, #324]	; (8000b38 <main+0x26c>)
 80009f4:	601f      	str	r7, [r3, #0]
 80009f6:	f00b facd 	bl	800bf94 <puts>
  USBH_UsrLog("Starting Audio Demo");
 80009fa:	4850      	ldr	r0, [pc, #320]	; (8000b3c <main+0x270>)
 80009fc:	f00b fa42 	bl	800be84 <iprintf>
 8000a00:	200a      	movs	r0, #10
 8000a02:	f00b fa57 	bl	800beb4 <putchar>
  AUDIO_PLAYER_Init();
 8000a06:	f000 fc15 	bl	8001234 <AUDIO_PLAYER_Init>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a0a:	f002 fd55 	bl	80034b8 <BSP_LCD_GetXSize>
 8000a0e:	4607      	mov	r7, r0
 8000a10:	f002 fd5e 	bl	80034d0 <BSP_LCD_GetYSize>
 8000a14:	b281      	uxth	r1, r0
 8000a16:	b2b8      	uxth	r0, r7
 8000a18:	f003 fbe2 	bl	80041e0 <BSP_TS_Init>
  USBH_Init(&hUSBHost, USBH_UserProcess, 0);
 8000a1c:	4622      	mov	r2, r4
 8000a1e:	4948      	ldr	r1, [pc, #288]	; (8000b40 <main+0x274>)
 8000a20:	4848      	ldr	r0, [pc, #288]	; (8000b44 <main+0x278>)
 8000a22:	f00a f98d 	bl	800ad40 <USBH_Init>
  USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
 8000a26:	4948      	ldr	r1, [pc, #288]	; (8000b48 <main+0x27c>)
 8000a28:	4846      	ldr	r0, [pc, #280]	; (8000b44 <main+0x278>)
 8000a2a:	f00a f9b5 	bl	800ad98 <USBH_RegisterClass>
  USBH_Start(&hUSBHost);
 8000a2e:	4845      	ldr	r0, [pc, #276]	; (8000b44 <main+0x278>)
 8000a30:	f00a fa32 	bl	800ae98 <USBH_Start>
}

void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	4621      	mov	r1, r4
 8000a36:	2214      	movs	r2, #20
 8000a38:	a813      	add	r0, sp, #76	; 0x4c
 8000a3a:	f00b f973 	bl	800bd24 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <main+0x280>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a40:	4631      	mov	r1, r6
 8000a42:	4843      	ldr	r0, [pc, #268]	; (8000b50 <main+0x284>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a46:	f042 0202 	orr.w	r2, r2, #2
 8000a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a4e:	f002 0202 	and.w	r2, r2, #2
 8000a52:	9200      	str	r2, [sp, #0]
 8000a54:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a58:	f042 0201 	orr.w	r2, r2, #1
 8000a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a60:	f002 0201 	and.w	r2, r2, #1
 8000a64:	9201      	str	r2, [sp, #4]
 8000a66:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8000a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a72:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000a76:	9202      	str	r2, [sp, #8]
 8000a78:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a80:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a82:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8a:	9307      	str	r3, [sp, #28]
 8000a8c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a8e:	f004 f9db 	bl	8004e48 <HAL_GPIO_WritePin>
  /*Configure GPIO pin : PI1 LED1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a92:	a913      	add	r1, sp, #76	; 0x4c
 8000a94:	482e      	ldr	r0, [pc, #184]	; (8000b50 <main+0x284>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	e9cd 6513 	strd	r6, r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a9e:	f004 f8e5 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 D2 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aa2:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa4:	a913      	add	r1, sp, #76	; 0x4c
 8000aa6:	482b      	ldr	r0, [pc, #172]	; (8000b54 <main+0x288>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa8:	9515      	str	r5, [sp, #84]	; 0x54
    if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7) == GPIO_PIN_RESET)
 8000aaa:	4e2a      	ldr	r6, [pc, #168]	; (8000b54 <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ab0:	f004 f8dc 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4  D3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ab4:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	a913      	add	r1, sp, #76	; 0x4c
 8000ab8:	4827      	ldr	r0, [pc, #156]	; (8000b58 <main+0x28c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aba:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f004 f8d4 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7  D4*/
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ac4:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac6:	a913      	add	r1, sp, #76	; 0x4c
 8000ac8:	4822      	ldr	r0, [pc, #136]	; (8000b54 <main+0x288>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aca:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad0:	f004 f8cc 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0  D5*/
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ad4:	a913      	add	r1, sp, #76	; 0x4c
 8000ad6:	481e      	ldr	r0, [pc, #120]	; (8000b50 <main+0x284>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad8:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	e9cd 5413 	strd	r5, r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ade:	f004 f8c5 	bl	8004c6c <HAL_GPIO_Init>
}

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8000ae2:	481e      	ldr	r0, [pc, #120]	; (8000b5c <main+0x290>)
  huart1.Init.BaudRate = 115200;
 8000ae4:	4a1e      	ldr	r2, [pc, #120]	; (8000b60 <main+0x294>)
 8000ae6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aea:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aec:	6244      	str	r4, [r0, #36]	; 0x24
    USBH_Process(&hUSBHost);
 8000aee:	4d15      	ldr	r5, [pc, #84]	; (8000b44 <main+0x278>)
  huart1.Init.BaudRate = 115200;
 8000af0:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000af4:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	e9c0 4407 	strd	r4, r4, [r0, #28]
    	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b02:	4c13      	ldr	r4, [pc, #76]	; (8000b50 <main+0x284>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b04:	f006 fe9b 	bl	800783e <HAL_UART_Init>
    USBH_Process(&hUSBHost);
 8000b08:	4628      	mov	r0, r5
 8000b0a:	f00a f9cf 	bl	800aeac <USBH_Process>
    if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7) == GPIO_PIN_RESET)
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	4630      	mov	r0, r6
 8000b12:	f004 f993 	bl	8004e3c <HAL_GPIO_ReadPin>
 8000b16:	b938      	cbnz	r0, 8000b28 <main+0x25c>
    	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
    	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	f004 f993 	bl	8004e48 <HAL_GPIO_WritePin>
    AUDIO_MenuProcess();
 8000b22:	f000 f8c1 	bl	8000ca8 <AUDIO_MenuProcess>
    USBH_Process(&hUSBHost);
 8000b26:	e7ef      	b.n	8000b08 <main+0x23c>
    	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e7f6      	b.n	8000b1a <main+0x24e>
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	080112df 	.word	0x080112df
 8000b34:	2000b9f0 	.word	0x2000b9f0
 8000b38:	08011305 	.word	0x08011305
 8000b3c:	0801131f 	.word	0x0801131f
 8000b40:	08000811 	.word	0x08000811
 8000b44:	2000756c 	.word	0x2000756c
 8000b48:	200000c4 	.word	0x200000c4
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40022000 	.word	0x40022000
 8000b54:	40021800 	.word	0x40021800
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	20007a34 	.word	0x20007a34
 8000b60:	40011000 	.word	0x40011000

08000b64 <BSP_AUDIO_OUT_ClockConfig>:
{
 8000b64:	b510      	push	{r4, lr}
 8000b66:	b0a2      	sub	sp, #136	; 0x88
 8000b68:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 8000b6a:	a801      	add	r0, sp, #4
 8000b6c:	f005 ff48 	bl	8006a00 <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8000b70:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000b74:	429c      	cmp	r4, r3
 8000b76:	d007      	beq.n	8000b88 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8000b78:	f245 6322 	movw	r3, #22050	; 0x5622
 8000b7c:	429c      	cmp	r4, r3
 8000b7e:	d003      	beq.n	8000b88 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8000b80:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000b84:	429c      	cmp	r4, r3
 8000b86:	d113      	bne.n	8000bb0 <BSP_AUDIO_OUT_ClockConfig+0x4c>
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000b88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b8c:	9301      	str	r3, [sp, #4]
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8000b8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b92:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
 8000b94:	2308      	movs	r3, #8
 8000b96:	9305      	str	r3, [sp, #20]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
 8000b98:	f240 13ad 	movw	r3, #429	; 0x1ad
 8000b9c:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
 8000ba2:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
 8000ba4:	a801      	add	r0, sp, #4
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
 8000ba6:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
 8000ba8:	f005 fca0 	bl	80064ec <HAL_RCCEx_PeriphCLKConfig>
}
 8000bac:	b022      	add	sp, #136	; 0x88
 8000bae:	bd10      	pop	{r4, pc}
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000bb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bb4:	9301      	str	r3, [sp, #4]
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8000bb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bba:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	9305      	str	r3, [sp, #20]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;
 8000bc0:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8000bc4:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e7ea      	b.n	8000ba4 <BSP_AUDIO_OUT_ClockConfig+0x40>
	...

08000bd0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	2214      	movs	r2, #20
 8000bd8:	2100      	movs	r1, #0
 8000bda:	a803      	add	r0, sp, #12
 8000bdc:	f00b f8a2 	bl	800bd24 <memset>
  if(uartHandle->Instance==USART1)
 8000be0:	6822      	ldr	r2, [r4, #0]
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d13c      	bne.n	8000c62 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be8:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bee:	2603      	movs	r6, #3
 8000bf0:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	a903      	add	r1, sp, #12
 8000bf6:	481d      	ldr	r0, [pc, #116]	; (8000c6c <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf8:	f042 0210 	orr.w	r2, r2, #16
 8000bfc:	645a      	str	r2, [r3, #68]	; 0x44
 8000bfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c00:	f002 0210 	and.w	r2, r2, #16
 8000c04:	9200      	str	r2, [sp, #0]
 8000c06:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c0a:	f042 0202 	orr.w	r2, r2, #2
 8000c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8000c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c12:	f002 0202 	and.w	r2, r2, #2
 8000c16:	9201      	str	r2, [sp, #4]
 8000c18:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c1c:	f042 0201 	orr.w	r2, r2, #1
 8000c20:	631a      	str	r2, [r3, #48]	; 0x30
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c2e:	e9cd 6506 	strd	r6, r5, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f004 f819 	bl	8004c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	a903      	add	r1, sp, #12
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <HAL_UART_MspInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c42:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f004 f80d 	bl	8004c6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c52:	2025      	movs	r0, #37	; 0x25
 8000c54:	4622      	mov	r2, r4
 8000c56:	4621      	mov	r1, r4
 8000c58:	f003 fc50 	bl	80044fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c5c:	2025      	movs	r0, #37	; 0x25
 8000c5e:	f003 fc7f 	bl	8004560 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c62:	b008      	add	sp, #32
 8000c64:	bd70      	pop	{r4, r5, r6, pc}
 8000c66:	bf00      	nop
 8000c68:	40011000 	.word	0x40011000
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40020000 	.word	0x40020000

08000c74 <BSP_LCD_ClockConfig>:
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c74:	4806      	ldr	r0, [pc, #24]	; (8000c90 <BSP_LCD_ClockConfig+0x1c>)
 8000c76:	2308      	movs	r3, #8
 8000c78:	6043      	str	r3, [r0, #4]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8000c7a:	23c0      	movs	r3, #192	; 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000c7c:	3004      	adds	r0, #4
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8000c7e:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8000c80:	2305      	movs	r3, #5
 8000c82:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c88:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000c8a:	f005 bc2f 	b.w	80064ec <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	bf00      	nop
 8000c90:	20000170 	.word	0x20000170

08000c94 <LCD_ClearTextZone>:
  * @brief  Clears the text zone.
  * @param  None
  * @retval None
  */
static void LCD_ClearTextZone(void)
{
 8000c94:	b510      	push	{r4, lr}
 8000c96:	2403      	movs	r4, #3
  uint8_t i = 0;
  
  for(i= 0; i < 13; i++)
  {
    BSP_LCD_ClearStringLine(i + 3);
 8000c98:	4620      	mov	r0, r4
 8000c9a:	3401      	adds	r4, #1
 8000c9c:	f002 ff4a 	bl	8003b34 <BSP_LCD_ClearStringLine>
  for(i= 0; i < 13; i++)
 8000ca0:	2c10      	cmp	r4, #16
 8000ca2:	d1f9      	bne.n	8000c98 <LCD_ClearTextZone+0x4>
  }
}
 8000ca4:	bd10      	pop	{r4, pc}
	...

08000ca8 <AUDIO_MenuProcess>:
{
 8000ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
  Point PlaybackLogoPoints[] = {{TOUCH_PLAYBACK_XMIN, TOUCH_PLAYBACK_YMIN},
 8000caa:	4a67      	ldr	r2, [pc, #412]	; (8000e48 <AUDIO_MenuProcess+0x1a0>)
{
 8000cac:	b08f      	sub	sp, #60	; 0x3c
  if(appli_state == APPLICATION_READY)
 8000cae:	4d67      	ldr	r5, [pc, #412]	; (8000e4c <AUDIO_MenuProcess+0x1a4>)
  Point PlaybackLogoPoints[] = {{TOUCH_PLAYBACK_XMIN, TOUCH_PLAYBACK_YMIN},
 8000cb0:	6810      	ldr	r0, [r2, #0]
 8000cb2:	466b      	mov	r3, sp
 8000cb4:	6851      	ldr	r1, [r2, #4]
 8000cb6:	c303      	stmia	r3!, {r0, r1}
 8000cb8:	6890      	ldr	r0, [r2, #8]
 8000cba:	6018      	str	r0, [r3, #0]
  if(appli_state == APPLICATION_READY)
 8000cbc:	782b      	ldrb	r3, [r5, #0]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d12f      	bne.n	8000d22 <AUDIO_MenuProcess+0x7a>
    switch(AudioDemo.state)
 8000cc2:	4c63      	ldr	r4, [pc, #396]	; (8000e50 <AUDIO_MenuProcess+0x1a8>)
 8000cc4:	7823      	ldrb	r3, [r4, #0]
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	d82b      	bhi.n	8000d22 <AUDIO_MenuProcess+0x7a>
 8000cca:	e8df f003 	tbb	[pc, r3]
 8000cce:	3803      	.short	0x3803
 8000cd0:	7b64      	.short	0x7b64
 8000cd2:	a3          	.byte	0xa3
 8000cd3:	00          	.byte	0x00
      AudioDemo.state = AUDIO_DEMO_WAIT;
 8000cd4:	2301      	movs	r3, #1
      BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
 8000cd6:	485f      	ldr	r0, [pc, #380]	; (8000e54 <AUDIO_MenuProcess+0x1ac>)
      AudioDemo.state = AUDIO_DEMO_WAIT;
 8000cd8:	7023      	strb	r3, [r4, #0]
      BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
 8000cda:	f002 fc57 	bl	800358c <BSP_LCD_SetFont>
      BSP_LCD_ClearStringLine(13);     /* Clear touch screen buttons dedicated zone */
 8000cde:	200d      	movs	r0, #13
 8000ce0:	f002 ff28 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_ClearStringLine(14);
 8000ce4:	200e      	movs	r0, #14
 8000ce6:	f002 ff25 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_ClearStringLine(15);
 8000cea:	200f      	movs	r0, #15
 8000cec:	f002 ff22 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8000cf0:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8000cf4:	f002 fc36 	bl	8003564 <BSP_LCD_SetTextColor>
      BSP_LCD_FillPolygon(PlaybackLogoPoints, 3);                 /* Playback sign */
 8000cf8:	2103      	movs	r1, #3
 8000cfa:	4668      	mov	r0, sp
 8000cfc:	f002 ff8f 	bl	8003c1e <BSP_LCD_FillPolygon>
      BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2, /* Record circle */
 8000d00:	21e8      	movs	r1, #232	; 0xe8
 8000d02:	2214      	movs	r2, #20
 8000d04:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000d08:	f002 ff34 	bl	8003b74 <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000d0c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000d10:	f002 fc28 	bl	8003564 <BSP_LCD_SetTextColor>
      BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
 8000d14:	4850      	ldr	r0, [pc, #320]	; (8000e58 <AUDIO_MenuProcess+0x1b0>)
 8000d16:	f002 fc39 	bl	800358c <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAtLine(15, (uint8_t *)"Use touch screen to enter playback or record menu");
 8000d1a:	4950      	ldr	r1, [pc, #320]	; (8000e5c <AUDIO_MenuProcess+0x1b4>)
 8000d1c:	200f      	movs	r0, #15
 8000d1e:	f002 fd8b 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
  if(appli_state == APPLICATION_DISCONNECT)
 8000d22:	782b      	ldrb	r3, [r5, #0]
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d108      	bne.n	8000d3a <AUDIO_MenuProcess+0x92>
    appli_state = APPLICATION_IDLE;     
 8000d28:	2400      	movs	r4, #0
 8000d2a:	702c      	strb	r4, [r5, #0]
    LCD_LOG_UpdateDisplay(); 
 8000d2c:	f00a fee4 	bl	800baf8 <LCD_LOG_UpdateDisplay>
    AudioDemo.state = AUDIO_DEMO_IDLE; 
 8000d30:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <AUDIO_MenuProcess+0x1a8>)
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);    
 8000d32:	2002      	movs	r0, #2
    AudioDemo.state = AUDIO_DEMO_IDLE; 
 8000d34:	701c      	strb	r4, [r3, #0]
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);    
 8000d36:	f002 f8d5 	bl	8002ee4 <BSP_AUDIO_OUT_Stop>
}
 8000d3a:	b00f      	add	sp, #60	; 0x3c
 8000d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      BSP_TS_GetState(&TS_State);
 8000d3e:	a803      	add	r0, sp, #12
 8000d40:	f003 fa9a 	bl	8004278 <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
 8000d44:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d1ea      	bne.n	8000d22 <AUDIO_MenuProcess+0x7a>
        if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
 8000d4c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000d50:	f46f 7296 	mvn.w	r2, #300	; 0x12c
 8000d54:	189a      	adds	r2, r3, r2
 8000d56:	2a26      	cmp	r2, #38	; 0x26
 8000d58:	d80e      	bhi.n	8000d78 <AUDIO_MenuProcess+0xd0>
 8000d5a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8000d5e:	3ad5      	subs	r2, #213	; 0xd5
 8000d60:	2a26      	cmp	r2, #38	; 0x26
 8000d62:	d809      	bhi.n	8000d78 <AUDIO_MenuProcess+0xd0>
          AudioDemo.state = AUDIO_DEMO_IN;
 8000d64:	2304      	movs	r3, #4
          AudioDemo.state = AUDIO_DEMO_EXPLORE;
 8000d66:	7023      	strb	r3, [r4, #0]
          BSP_TS_GetState(&TS_State);
 8000d68:	a803      	add	r0, sp, #12
 8000d6a:	f003 fa85 	bl	8004278 <BSP_TS_GetState>
        }while(TS_State.touchDetected > 0);
 8000d6e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f8      	bne.n	8000d68 <AUDIO_MenuProcess+0xc0>
 8000d76:	e7d4      	b.n	8000d22 <AUDIO_MenuProcess+0x7a>
        else if ((TS_State.touchX[0] > TOUCH_PLAYBACK_XMIN) && (TS_State.touchX[0] < TOUCH_PLAYBACK_XMAX) &&
 8000d78:	3b7e      	subs	r3, #126	; 0x7e
 8000d7a:	2b26      	cmp	r3, #38	; 0x26
 8000d7c:	d809      	bhi.n	8000d92 <AUDIO_MenuProcess+0xea>
 8000d7e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8000d82:	3bd5      	subs	r3, #213	; 0xd5
 8000d84:	2b26      	cmp	r3, #38	; 0x26
 8000d86:	d804      	bhi.n	8000d92 <AUDIO_MenuProcess+0xea>
          check = 0;
 8000d88:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <AUDIO_MenuProcess+0x1b8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
          AudioDemo.state = AUDIO_DEMO_PLAYBACK;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e7e9      	b.n	8000d66 <AUDIO_MenuProcess+0xbe>
          AudioDemo.state = AUDIO_DEMO_EXPLORE;
 8000d92:	2302      	movs	r3, #2
 8000d94:	e7e7      	b.n	8000d66 <AUDIO_MenuProcess+0xbe>
        if(AUDIO_ShowWavFiles() > 0)
 8000d96:	f7ff fce1 	bl	800075c <AUDIO_ShowWavFiles>
 8000d9a:	b180      	cbz	r0, 8000dbe <AUDIO_MenuProcess+0x116>
          LCD_ErrLog("There is no WAV file on the USB Key.\n");         
 8000d9c:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <AUDIO_MenuProcess+0x1bc>)
 8000d9e:	4e32      	ldr	r6, [pc, #200]	; (8000e68 <AUDIO_MenuProcess+0x1c0>)
 8000da0:	4832      	ldr	r0, [pc, #200]	; (8000e6c <AUDIO_MenuProcess+0x1c4>)
 8000da2:	6033      	str	r3, [r6, #0]
 8000da4:	f00b f86e 	bl	800be84 <iprintf>
 8000da8:	4831      	ldr	r0, [pc, #196]	; (8000e70 <AUDIO_MenuProcess+0x1c8>)
 8000daa:	f00b f8f3 	bl	800bf94 <puts>
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	6033      	str	r3, [r6, #0]
    LCD_LOG_UpdateDisplay(); 
 8000db4:	f00a fea0 	bl	800baf8 <LCD_LOG_UpdateDisplay>
    AudioDemo.state = AUDIO_DEMO_IDLE; 
 8000db8:	2300      	movs	r3, #0
 8000dba:	7023      	strb	r3, [r4, #0]
 8000dbc:	e000      	b.n	8000dc0 <AUDIO_MenuProcess+0x118>
          AudioDemo.state = AUDIO_DEMO_WAIT;
 8000dbe:	2301      	movs	r3, #1
            AudioDemo.state = AUDIO_DEMO_IDLE;
 8000dc0:	7023      	strb	r3, [r4, #0]
 8000dc2:	e7ae      	b.n	8000d22 <AUDIO_MenuProcess+0x7a>
        if(AudioState == AUDIO_STATE_IDLE)
 8000dc4:	4f2b      	ldr	r7, [pc, #172]	; (8000e74 <AUDIO_MenuProcess+0x1cc>)
 8000dc6:	783e      	ldrb	r6, [r7, #0]
 8000dc8:	b9ee      	cbnz	r6, 8000e06 <AUDIO_MenuProcess+0x15e>
          if(AUDIO_ShowWavFiles() > 0)
 8000dca:	f7ff fcc7 	bl	800075c <AUDIO_ShowWavFiles>
 8000dce:	b1b8      	cbz	r0, 8000e00 <AUDIO_MenuProcess+0x158>
            LCD_ErrLog("There is no WAV file on the USB Key.\n");         
 8000dd0:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <AUDIO_MenuProcess+0x1bc>)
 8000dd2:	4f25      	ldr	r7, [pc, #148]	; (8000e68 <AUDIO_MenuProcess+0x1c0>)
 8000dd4:	4825      	ldr	r0, [pc, #148]	; (8000e6c <AUDIO_MenuProcess+0x1c4>)
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	f00b f854 	bl	800be84 <iprintf>
 8000ddc:	4824      	ldr	r0, [pc, #144]	; (8000e70 <AUDIO_MenuProcess+0x1c8>)
 8000dde:	f00b f8d9 	bl	800bf94 <puts>
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	603b      	str	r3, [r7, #0]
    LCD_LOG_UpdateDisplay(); 
 8000de8:	f00a fe86 	bl	800baf8 <LCD_LOG_UpdateDisplay>
    AudioDemo.state = AUDIO_DEMO_IDLE; 
 8000dec:	7026      	strb	r6, [r4, #0]
            AudioDemo.state = AUDIO_DEMO_IDLE;
 8000dee:	7026      	strb	r6, [r4, #0]
          LCD_ClearTextZone();
 8000df0:	f7ff ff50 	bl	8000c94 <LCD_ClearTextZone>
          if(AUDIO_PLAYER_Start(0) == AUDIO_ERROR_IO)
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 fa2d 	bl	8001254 <AUDIO_PLAYER_Start>
 8000dfa:	2801      	cmp	r0, #1
 8000dfc:	d191      	bne.n	8000d22 <AUDIO_MenuProcess+0x7a>
 8000dfe:	e7d9      	b.n	8000db4 <AUDIO_MenuProcess+0x10c>
            AudioState = AUDIO_STATE_INIT;
 8000e00:	2302      	movs	r3, #2
 8000e02:	703b      	strb	r3, [r7, #0]
 8000e04:	e7f4      	b.n	8000df0 <AUDIO_MenuProcess+0x148>
          if(AUDIO_PLAYER_Process() == AUDIO_ERROR_IO)
 8000e06:	f000 fb9d 	bl	8001544 <AUDIO_PLAYER_Process>
 8000e0a:	2801      	cmp	r0, #1
 8000e0c:	d189      	bne.n	8000d22 <AUDIO_MenuProcess+0x7a>
            LCD_ClearTextZone();
 8000e0e:	f7ff ff41 	bl	8000c94 <LCD_ClearTextZone>
 8000e12:	e7cf      	b.n	8000db4 <AUDIO_MenuProcess+0x10c>
        if(AudioState == AUDIO_STATE_IDLE)
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <AUDIO_MenuProcess+0x1cc>)
 8000e16:	781e      	ldrb	r6, [r3, #0]
 8000e18:	b96e      	cbnz	r6, 8000e36 <AUDIO_MenuProcess+0x18e>
          AudioState = AUDIO_STATE_INIT;
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	701a      	strb	r2, [r3, #0]
          LCD_ClearTextZone();
 8000e1e:	f7ff ff39 	bl	8000c94 <LCD_ClearTextZone>
          if(AUDIO_REC_Start() == AUDIO_ERROR_IO)
 8000e22:	f000 fcdd 	bl	80017e0 <AUDIO_REC_Start>
 8000e26:	2801      	cmp	r0, #1
 8000e28:	f47f af7b 	bne.w	8000d22 <AUDIO_MenuProcess+0x7a>
    LCD_LOG_UpdateDisplay(); 
 8000e2c:	f00a fe64 	bl	800baf8 <LCD_LOG_UpdateDisplay>
    AudioDemo.state = AUDIO_DEMO_IDLE; 
 8000e30:	7026      	strb	r6, [r4, #0]
            AudioDemo.state = AUDIO_DEMO_IDLE;
 8000e32:	7026      	strb	r6, [r4, #0]
 8000e34:	e775      	b.n	8000d22 <AUDIO_MenuProcess+0x7a>
          status = AUDIO_REC_Process();
 8000e36:	f000 fe65 	bl	8001b04 <AUDIO_REC_Process>
          if((status == AUDIO_ERROR_IO) || (status == AUDIO_ERROR_EOF))
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	b2c0      	uxtb	r0, r0
 8000e3e:	2801      	cmp	r0, #1
 8000e40:	f63f af6f 	bhi.w	8000d22 <AUDIO_MenuProcess+0x7a>
 8000e44:	e7e3      	b.n	8000e0e <AUDIO_MenuProcess+0x166>
 8000e46:	bf00      	nop
 8000e48:	0800d068 	.word	0x0800d068
 8000e4c:	20000170 	.word	0x20000170
 8000e50:	20007ab5 	.word	0x20007ab5
 8000e54:	200000a4 	.word	0x200000a4
 8000e58:	2000009c 	.word	0x2000009c
 8000e5c:	08011333 	.word	0x08011333
 8000e60:	200001f8 	.word	0x200001f8
 8000e64:	ffff0000 	.word	0xffff0000
 8000e68:	2000b9f0 	.word	0x2000b9f0
 8000e6c:	0801126c 	.word	0x0801126c
 8000e70:	08011365 	.word	0x08011365
 8000e74:	20007ab4 	.word	0x20007ab4

08000e78 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000e78:	4770      	bx	lr

08000e7a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler>

08000e7c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e7c:	e7fe      	b.n	8000e7c <MemManage_Handler>

08000e7e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler>

08000e80 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler>

08000e82 <SVC_Handler>:
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000e88:	f003 bb02 	b.w	8004490 <HAL_IncTick>

08000e8c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
  HAL_HCD_IRQHandler(&hhcd);
 8000e8c:	4801      	ldr	r0, [pc, #4]	; (8000e94 <OTG_FS_IRQHandler+0x8>)
 8000e8e:	f004 b8d9 	b.w	8005044 <HAL_HCD_IRQHandler>
 8000e92:	bf00      	nop
 8000e94:	20007ab8 	.word	0x20007ab8

08000e98 <DMA2_Stream4_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8000e98:	4b01      	ldr	r3, [pc, #4]	; (8000ea0 <DMA2_Stream4_IRQHandler+0x8>)
 8000e9a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000e9c:	f003 bcd4 	b.w	8004848 <HAL_DMA_IRQHandler>
 8000ea0:	20006aec 	.word	0x20006aec

08000ea4 <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8000ea4:	4b01      	ldr	r3, [pc, #4]	; (8000eac <DMA2_Stream7_IRQHandler+0x8>)
 8000ea6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8000ea8:	f003 bcce 	b.w	8004848 <HAL_DMA_IRQHandler>
 8000eac:	20006b70 	.word	0x20006b70

08000eb0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eb0:	4801      	ldr	r0, [pc, #4]	; (8000eb8 <USART1_IRQHandler+0x8>)
 8000eb2:	f006 b9bd 	b.w	8007230 <HAL_UART_IRQHandler>
 8000eb6:	bf00      	nop
 8000eb8:	20007a34 	.word	0x20007a34

08000ebc <HAL_HCD_MspInit>:
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hhcd->Instance == USB_OTG_FS)
 8000ebc:	6803      	ldr	r3, [r0, #0]
 8000ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8000ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec6:	b090      	sub	sp, #64	; 0x40
  if(hhcd->Instance == USB_OTG_FS)
 8000ec8:	d146      	bne.n	8000f58 <HAL_HCD_MspInit+0x9c>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4c63      	ldr	r4, [pc, #396]	; (8001058 <HAL_HCD_MspInit+0x19c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
    
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000ece:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000ed0:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000ed4:	4861      	ldr	r0, [pc, #388]	; (800105c <HAL_HCD_MspInit+0x1a0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6323      	str	r3, [r4, #48]	; 0x30
 8000edc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	6323      	str	r3, [r4, #48]	; 0x30
 8000eee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	9302      	str	r3, [sp, #8]
 8000ef6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000efc:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f06:	230a      	movs	r3, #10
 8000f08:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000f0a:	f003 feaf 	bl	8004c6c <HAL_GPIO_Init>
    
    /* Configure POWER_SWITCH IO pin */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f0e:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	a90b      	add	r1, sp, #44	; 0x2c
 8000f12:	4853      	ldr	r0, [pc, #332]	; (8001060 <HAL_HCD_MspInit+0x1a4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1a:	f003 fea7 	bl	8004c6c <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8000f20:	2043      	movs	r0, #67	; 0x43
 8000f22:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8000f28:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f2a:	6363      	str	r3, [r4, #52]	; 0x34
 8000f2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	9303      	str	r3, [sp, #12]
 8000f34:	9b03      	ldr	r3, [sp, #12]
 8000f36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6463      	str	r3, [r4, #68]	; 0x44
 8000f3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f44:	9304      	str	r3, [sp, #16]
 8000f46:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8000f48:	f003 fad8 	bl	80044fc <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000f4c:	2043      	movs	r0, #67	; 0x43
    
    /* Set USBHS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
    
    /* Enable USBHS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000f4e:	f003 fb07 	bl	8004560 <HAL_NVIC_EnableIRQ>
  }   
}
 8000f52:	b010      	add	sp, #64	; 0x40
 8000f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hhcd->Instance == USB_OTG_HS)
 8000f58:	4a42      	ldr	r2, [pc, #264]	; (8001064 <HAL_HCD_MspInit+0x1a8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d1f9      	bne.n	8000f52 <HAL_HCD_MspInit+0x96>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4c3e      	ldr	r4, [pc, #248]	; (8001058 <HAL_HCD_MspInit+0x19c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000f60:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f64:	260a      	movs	r6, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000f68:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000f6c:	a90b      	add	r1, sp, #44	; 0x2c
 8000f6e:	483b      	ldr	r0, [pc, #236]	; (800105c <HAL_HCD_MspInit+0x1a0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6323      	str	r3, [r4, #48]	; 0x30
 8000f76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	9305      	str	r3, [sp, #20]
 8000f7e:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	6323      	str	r3, [r4, #48]	; 0x30
 8000f88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	9306      	str	r3, [sp, #24]
 8000f90:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6323      	str	r3, [r4, #48]	; 0x30
 8000f9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	9307      	str	r3, [sp, #28]
 8000fa2:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000faa:	6323      	str	r3, [r4, #48]	; 0x30
 8000fac:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fae:	960f      	str	r6, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb4:	9308      	str	r3, [sp, #32]
 8000fb6:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2320      	movs	r3, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000fba:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000fc2:	f003 fe53 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fc6:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000fc8:	a90b      	add	r1, sp, #44	; 0x2c
 8000fca:	4824      	ldr	r0, [pc, #144]	; (800105c <HAL_HCD_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fcc:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000fd2:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000fd6:	f003 fe49 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_5 |\
 8000fda:	f643 4323 	movw	r3, #15395	; 0x3c23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
 8000fde:	a90b      	add	r1, sp, #44	; 0x2c
 8000fe0:	4821      	ldr	r0, [pc, #132]	; (8001068 <HAL_HCD_MspInit+0x1ac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fe4:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
 8000fea:	f003 fe3f 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fee:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); 
 8000ff0:	a90b      	add	r1, sp, #44	; 0x2c
 8000ff2:	481e      	ldr	r0, [pc, #120]	; (800106c <HAL_HCD_MspInit+0x1b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ff6:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); 
 8000ffc:	f003 fe36 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001000:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001002:	a90b      	add	r1, sp, #44	; 0x2c
 8001004:	481a      	ldr	r0, [pc, #104]	; (8001070 <HAL_HCD_MspInit+0x1b4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001008:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800100e:	f003 fe2d 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001012:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001014:	a90b      	add	r1, sp, #44	; 0x2c
 8001016:	4815      	ldr	r0, [pc, #84]	; (800106c <HAL_HCD_MspInit+0x1b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800101a:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	f003 fe24 	bl	8004c6c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001024:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
 8001026:	204d      	movs	r0, #77	; 0x4d
 8001028:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800102a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
 800102e:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001030:	6323      	str	r3, [r4, #48]	; 0x30
 8001032:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001034:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001038:	9309      	str	r3, [sp, #36]	; 0x24
 800103a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800103c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800103e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001042:	6323      	str	r3, [r4, #48]	; 0x30
 8001044:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800104a:	930a      	str	r3, [sp, #40]	; 0x28
 800104c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
 800104e:	f003 fa55 	bl	80044fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001052:	204d      	movs	r0, #77	; 0x4d
 8001054:	e77b      	b.n	8000f4e <HAL_HCD_MspInit+0x92>
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40040000 	.word	0x40040000
 8001068:	40020400 	.word	0x40020400
 800106c:	40020800 	.word	0x40020800
 8001070:	40021c00 	.word	0x40021c00

08001074 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
 8001074:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001078:	f00a b9f1 	b.w	800b45e <USBH_LL_IncTimer>

0800107c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800107c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001080:	f00a ba03 	b.w	800b48a <USBH_LL_Connect>

08001084 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8001084:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001088:	f00a ba09 	b.w	800b49e <USBH_LL_Disconnect>

0800108c <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 800108c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001090:	f00a b9f3 	b.w	800b47a <USBH_LL_PortEnabled>

08001094 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8001094:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8001098:	f00a b9f3 	b.w	800b482 <USBH_LL_PortDisabled>

0800109c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
}
 800109c:	4770      	bx	lr
	...

080010a0 <USBH_LL_Init>:
  *         Initialize the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80010a0:	b570      	push	{r4, r5, r6, lr}
#ifdef USE_USB_FS  
  /* Set the LL driver parameters */
  hhcd.Instance = USB_OTG_FS;
 80010a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010a6:	4c0f      	ldr	r4, [pc, #60]	; (80010e4 <USBH_LL_Init+0x44>)
  hhcd.Init.Host_channels = 11; 
  hhcd.Init.dma_enable = 0;
 80010a8:	2500      	movs	r5, #0
{
 80010aa:	4606      	mov	r6, r0
  hhcd.Instance = USB_OTG_FS;
 80010ac:	6023      	str	r3, [r4, #0]
  hhcd.Init.Host_channels = 11; 
 80010ae:	230b      	movs	r3, #11
  hhcd.Init.Sof_enable = 0;
  hhcd.Init.speed = HCD_SPEED_FULL;
  hhcd.Init.vbus_sensing_enable = 0;
  
  /* Link the driver to the stack */
  hhcd.pData = phost;
 80010b0:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hhcd.Init.Host_channels = 11; 
 80010b4:	60a3      	str	r3, [r4, #8]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED; 
 80010b6:	2302      	movs	r3, #2
  phost->pData = &hhcd;
 80010b8:	f8c0 44bc 	str.w	r4, [r0, #1212]	; 0x4bc
  
  /* Initialize the LL Driver */
  HAL_HCD_Init(&hhcd);
 80010bc:	4620      	mov	r0, r4
  hhcd.Init.dma_enable = 0;
 80010be:	6125      	str	r5, [r4, #16]
  hhcd.Init.low_power_enable = 0;
 80010c0:	6225      	str	r5, [r4, #32]
  hhcd.Init.vbus_sensing_enable = 0;
 80010c2:	62e5      	str	r5, [r4, #44]	; 0x2c
  hhcd.Init.Sof_enable = 0;
 80010c4:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hhcd.Init.speed = HCD_SPEED_FULL;
 80010c8:	2301      	movs	r3, #1
 80010ca:	60e3      	str	r3, [r4, #12]
  HAL_HCD_Init(&hhcd);
 80010cc:	f003 ff0b 	bl	8004ee6 <HAL_HCD_Init>
  phost->pData = &hhcd;
  /* Initialize the LL driver */
  HAL_HCD_Init(&hhcd);
#endif /*USE_USB_HS*/ 

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd));
 80010d0:	4620      	mov	r0, r4
 80010d2:	f004 faef 	bl	80056b4 <HAL_HCD_GetCurrentFrame>
 80010d6:	4601      	mov	r1, r0
 80010d8:	4630      	mov	r0, r6
 80010da:	f00a f9bd 	bl	800b458 <USBH_LL_SetTimer>
  
  return USBH_OK;
}
 80010de:	4628      	mov	r0, r5
 80010e0:	bd70      	pop	{r4, r5, r6, pc}
 80010e2:	bf00      	nop
 80010e4:	20007ab8 	.word	0x20007ab8

080010e8 <USBH_LL_Start>:
  * @brief  Starts the Low Level portion of the Host driver.   
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80010e8:	b508      	push	{r3, lr}
  HAL_HCD_Start(phost->pData);
 80010ea:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
 80010ee:	f004 faab 	bl	8005648 <HAL_HCD_Start>
  return USBH_OK; 
}
 80010f2:	2000      	movs	r0, #0
 80010f4:	bd08      	pop	{r3, pc}

080010f6 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80010f6:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 80010f8:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
 80010fc:	f004 faba 	bl	8005674 <HAL_HCD_Stop>
  return USBH_OK; 
}
 8001100:	2000      	movs	r0, #0
 8001102:	bd08      	pop	{r3, pc}

08001104 <USBH_LL_GetSpeed>:
  * @brief  Returns the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8001104:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
  
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8001106:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
 800110a:	f004 fad6 	bl	80056ba <HAL_HCD_GetCurrentSpeed>
 800110e:	2802      	cmp	r0, #2
 8001110:	bf96      	itet	ls
 8001112:	4b02      	ldrls	r3, [pc, #8]	; (800111c <USBH_LL_GetSpeed+0x18>)
 8001114:	2001      	movhi	r0, #1
 8001116:	5c18      	ldrbls	r0, [r3, r0]
  default:  
    speed = USBH_SPEED_FULL;    
    break;    
  }
  return speed;
}
 8001118:	bd08      	pop	{r3, pc}
 800111a:	bf00      	nop
 800111c:	0800d074 	.word	0x0800d074

08001120 <USBH_LL_ResetPort>:
  * @brief  Resets the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
 8001120:	b508      	push	{r3, lr}
  HAL_HCD_ResetPort(phost->pData);
 8001122:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
 8001126:	f004 fab7 	bl	8005698 <HAL_HCD_ResetPort>
  return USBH_OK; 
}
 800112a:	2000      	movs	r0, #0
 800112c:	bd08      	pop	{r3, pc}

0800112e <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)  
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800112e:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
 8001132:	f004 baba 	b.w	80056aa <HAL_HCD_HC_GetXferCount>

08001136 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,                                      
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 8001136:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_Init(phost->pData,
 8001138:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800113c:	9402      	str	r4, [sp, #8]
 800113e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8001142:	9401      	str	r4, [sp, #4]
 8001144:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8001148:	9400      	str	r4, [sp, #0]
 800114a:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
 800114e:	f003 fe80 	bl	8004e52 <HAL_HCD_HC_Init>
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
}
 8001152:	2000      	movs	r0, #0
 8001154:	b004      	add	sp, #16
 8001156:	bd10      	pop	{r4, pc}

08001158 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
 8001158:	b508      	push	{r3, lr}
  HAL_HCD_HC_Halt(phost->pData, pipe);
 800115a:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
 800115e:	f003 feb0 	bl	8004ec2 <HAL_HCD_HC_Halt>
  return USBH_OK; 
}
 8001162:	2000      	movs	r0, #0
 8001164:	bd08      	pop	{r3, pc}

08001166 <USBH_LL_SubmitURB>:
                                     uint8_t ep_type,  
                                     uint8_t token, 
                                     uint8_t* pbuff, 
                                     uint16_t length,
                                     uint8_t do_ping) 
{
 8001166:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_SubmitRequest(phost->pData,
 8001168:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800116c:	9403      	str	r4, [sp, #12]
 800116e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8001172:	9402      	str	r4, [sp, #8]
 8001174:	9c07      	ldr	r4, [sp, #28]
 8001176:	9401      	str	r4, [sp, #4]
 8001178:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800117c:	9400      	str	r4, [sp, #0]
 800117e:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
 8001182:	f003 fefb 	bl	8004f7c <HAL_HCD_HC_SubmitRequest>
                           token, 
                           pbuff, 
                           length,
                           do_ping);
  return USBH_OK;   
}
 8001186:	2000      	movs	r0, #0
 8001188:	b004      	add	sp, #16
 800118a:	bd10      	pop	{r4, pc}

0800118c <USBH_LL_GetURBState>:
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe) 
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800118c:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
 8001190:	f004 ba85 	b.w	800569e <HAL_HCD_HC_GetURBState>

08001194 <USBH_LL_DriverVBUS>:
  *           0: VBUS Active 
  *           1: VBUS Inactive
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8001194:	b508      	push	{r3, lr}
#ifdef USE_USB_FS
  if(state == 0)
 8001196:	b949      	cbnz	r1, 80011ac <USBH_LL_DriverVBUS+0x18>
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
  }
  else
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 800119a:	2120      	movs	r1, #32
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <USBH_LL_DriverVBUS+0x1c>)
 800119e:	f003 fe53 	bl	8004e48 <HAL_GPIO_WritePin>
  }
  
  HAL_Delay(200);
 80011a2:	20c8      	movs	r0, #200	; 0xc8
 80011a4:	f003 f986 	bl	80044b4 <HAL_Delay>
#endif /* USE_USB_FS */
  return USBH_OK;  
}
 80011a8:	2000      	movs	r0, #0
 80011aa:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	e7f4      	b.n	800119a <USBH_LL_DriverVBUS+0x6>
 80011b0:	40020c00 	.word	0x40020c00

080011b4 <USBH_LL_SetToggle>:
  * @param  toggle: toggle (0/1)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
  if(hhcd.hc[pipe].ep_is_in)
 80011b4:	2328      	movs	r3, #40	; 0x28
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <USBH_LL_SetToggle+0x1c>)
 80011b8:	fb03 0101 	mla	r1, r3, r1, r0
 80011bc:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80011c0:	b11b      	cbz	r3, 80011ca <USBH_LL_SetToggle+0x16>
  {
    hhcd.hc[pipe].toggle_in = toggle;
 80011c2:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
  }
  return USBH_OK; 
}
 80011c6:	2000      	movs	r0, #0
 80011c8:	4770      	bx	lr
    hhcd.hc[pipe].toggle_out = toggle;
 80011ca:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 80011ce:	e7fa      	b.n	80011c6 <USBH_LL_SetToggle+0x12>
 80011d0:	20007ab8 	.word	0x20007ab8

080011d4 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
  uint8_t toggle = 0;
  
  if(hhcd.hc[pipe].ep_is_in)
 80011d4:	2328      	movs	r3, #40	; 0x28
 80011d6:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <USBH_LL_GetToggle+0x1c>)
 80011d8:	fb03 2101 	mla	r1, r3, r1, r2
 80011dc:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80011e0:	b113      	cbz	r3, 80011e8 <USBH_LL_GetToggle+0x14>
  {
    toggle = hhcd.hc[pipe].toggle_in;
 80011e2:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 80011e6:	4770      	bx	lr
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
 80011e8:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle; 
}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20007ab8 	.word	0x20007ab8

080011f4 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);  
 80011f4:	f003 b95e 	b.w	80044b4 <HAL_Delay>

080011f8 <AUDIO_AcquireTouchButtons>:
  * @brief  Test touch screen state and modify audio state machine according to that
  * @param  None
  * @retval None
  */
static void AUDIO_AcquireTouchButtons(void)
{
 80011f8:	b508      	push	{r3, lr}
  static TS_StateTypeDef  TS_State={0};




      if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6) == GPIO_PIN_RESET)
 80011fa:	2140      	movs	r1, #64	; 0x40
 80011fc:	480a      	ldr	r0, [pc, #40]	; (8001228 <AUDIO_AcquireTouchButtons+0x30>)
 80011fe:	f003 fe1d 	bl	8004e3c <HAL_GPIO_ReadPin>
 8001202:	b938      	cbnz	r0, 8001214 <AUDIO_AcquireTouchButtons+0x1c>
      {
        if (AudioState == AUDIO_STATE_PLAY)
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <AUDIO_AcquireTouchButtons+0x34>)
 8001206:	781a      	ldrb	r2, [r3, #0]
 8001208:	2a03      	cmp	r2, #3
        {
          AudioState = AUDIO_STATE_PAUSE;
 800120a:	bf0c      	ite	eq
 800120c:	220b      	moveq	r2, #11
        }
        else
        {
          AudioState = AUDIO_STATE_RESUME;
 800120e:	220c      	movne	r2, #12
      {
        AudioState = AUDIO_STATE_PREVIOUS;
      }
      else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET)
      {
        AudioState = AUDIO_STATE_STOP;
 8001210:	701a      	strb	r2, [r3, #0]
              (TS_State.touchY[0] > TOUCH_VOL_PLUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_PLUS_YMAX))
      {
        AudioState = AUDIO_STATE_VOLUME_UP;
      }

}
 8001212:	bd08      	pop	{r3, pc}
      else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET)
 8001214:	2110      	movs	r1, #16
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <AUDIO_AcquireTouchButtons+0x38>)
 8001218:	f003 fe10 	bl	8004e3c <HAL_GPIO_ReadPin>
 800121c:	2800      	cmp	r0, #0
 800121e:	d1f8      	bne.n	8001212 <AUDIO_AcquireTouchButtons+0x1a>
        AudioState = AUDIO_STATE_STOP;
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <AUDIO_AcquireTouchButtons+0x34>)
 8001222:	220a      	movs	r2, #10
 8001224:	e7f4      	b.n	8001210 <AUDIO_AcquireTouchButtons+0x18>
 8001226:	bf00      	nop
 8001228:	40021800 	.word	0x40021800
 800122c:	20007ab4 	.word	0x20007ab4
 8001230:	40020400 	.word	0x40020400

08001234 <AUDIO_PLAYER_Init>:
{
 8001234:	b508      	push	{r3, lr}
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, uwVolume, I2S_AUDIOFREQ_48K) == 0)
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <AUDIO_PLAYER_Init+0x1c>)
 8001238:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800123c:	2004      	movs	r0, #4
 800123e:	6819      	ldr	r1, [r3, #0]
 8001240:	b2c9      	uxtb	r1, r1
 8001242:	f001 ff45 	bl	80030d0 <BSP_AUDIO_OUT_Init>
}
 8001246:	3000      	adds	r0, #0
 8001248:	bf18      	it	ne
 800124a:	2001      	movne	r0, #1
 800124c:	bd08      	pop	{r3, pc}
 800124e:	bf00      	nop
 8001250:	20000000 	.word	0x20000000

08001254 <AUDIO_PLAYER_Start>:
{
 8001254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001258:	4606      	mov	r6, r0
 800125a:	b092      	sub	sp, #72	; 0x48
  f_close(&WavFile);
 800125c:	48a2      	ldr	r0, [pc, #648]	; (80014e8 <AUDIO_PLAYER_Start+0x294>)
 800125e:	f008 fbfc 	bl	8009a5a <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001262:	f7ff facf 	bl	8000804 <AUDIO_GetWavObjectNumber>
 8001266:	42b0      	cmp	r0, r6
 8001268:	d803      	bhi.n	8001272 <AUDIO_PLAYER_Start+0x1e>
  return AUDIO_ERROR_IO;
 800126a:	2001      	movs	r0, #1
}
 800126c:	b012      	add	sp, #72	; 0x48
 800126e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(f_open(&WavFile, (char *)FileList.file[file_idx].name, FA_OPEN_EXISTING | FA_READ) == FR_OK) 
 8001272:	2201      	movs	r2, #1
 8001274:	2529      	movs	r5, #41	; 0x29
 8001276:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8001540 <AUDIO_PLAYER_Start+0x2ec>
 800127a:	fb15 2506 	smlabb	r5, r5, r6, r2
 800127e:	489a      	ldr	r0, [pc, #616]	; (80014e8 <AUDIO_PLAYER_Start+0x294>)
 8001280:	4c9a      	ldr	r4, [pc, #616]	; (80014ec <AUDIO_PLAYER_Start+0x298>)
 8001282:	4445      	add	r5, r8
 8001284:	4f9a      	ldr	r7, [pc, #616]	; (80014f0 <AUDIO_PLAYER_Start+0x29c>)
 8001286:	4629      	mov	r1, r5
 8001288:	f008 f914 	bl	80094b4 <f_open>
 800128c:	2800      	cmp	r0, #0
 800128e:	d172      	bne.n	8001376 <AUDIO_PLAYER_Start+0x122>
    if(f_read(&WavFile, info, sizeof(WaveFormat), (void *)&bytesread) == FR_OK)
 8001290:	ab02      	add	r3, sp, #8
 8001292:	222c      	movs	r2, #44	; 0x2c
 8001294:	4621      	mov	r1, r4
 8001296:	4894      	ldr	r0, [pc, #592]	; (80014e8 <AUDIO_PLAYER_Start+0x294>)
 8001298:	f008 fa26 	bl	80096e8 <f_read>
 800129c:	2800      	cmp	r0, #0
 800129e:	f040 811b 	bne.w	80014d8 <AUDIO_PLAYER_Start+0x284>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 80012a2:	f04f 30ff 	mov.w	r0, #4294967295
 80012a6:	f002 f95d 	bl	8003564 <BSP_LCD_SetTextColor>
      sprintf((char *)str, "Playing file (%d/%d): %s", 
 80012aa:	f8b8 33d8 	ldrh.w	r3, [r8, #984]	; 0x3d8
 80012ae:	1c72      	adds	r2, r6, #1
 80012b0:	4990      	ldr	r1, [pc, #576]	; (80014f4 <AUDIO_PLAYER_Start+0x2a0>)
 80012b2:	9500      	str	r5, [sp, #0]
 80012b4:	a803      	add	r0, sp, #12
 80012b6:	f00a fe85 	bl	800bfc4 <siprintf>
      BSP_LCD_ClearStringLine(4);
 80012ba:	2004      	movs	r0, #4
 80012bc:	f002 fc3a 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(4, str);
 80012c0:	a903      	add	r1, sp, #12
 80012c2:	2004      	movs	r0, #4
 80012c4:	f002 fab8 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
      HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str),1000);
 80012c8:	a803      	add	r0, sp, #12
 80012ca:	f7fe ffa1 	bl	8000210 <strlen>
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	b282      	uxth	r2, r0
 80012d4:	a903      	add	r1, sp, #12
 80012d6:	4888      	ldr	r0, [pc, #544]	; (80014f8 <AUDIO_PLAYER_Start+0x2a4>)
 80012d8:	f006 fa39 	bl	800774e <HAL_UART_Transmit>
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN); 
 80012dc:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 80012e0:	f002 f940 	bl	8003564 <BSP_LCD_SetTextColor>
      sprintf((char *)str,  "Sample rate : %d Hz", (int)(info->SampleRate));
 80012e4:	69a2      	ldr	r2, [r4, #24]
 80012e6:	4985      	ldr	r1, [pc, #532]	; (80014fc <AUDIO_PLAYER_Start+0x2a8>)
 80012e8:	a803      	add	r0, sp, #12
 80012ea:	f00a fe6b 	bl	800bfc4 <siprintf>
      BSP_LCD_ClearStringLine(6);
 80012ee:	2006      	movs	r0, #6
 80012f0:	f002 fc20 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(6, str);
 80012f4:	a903      	add	r1, sp, #12
 80012f6:	2006      	movs	r0, #6
 80012f8:	f002 fa9e 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str,  "Channels number : %d", info->NbrChannels);
 80012fc:	8ae2      	ldrh	r2, [r4, #22]
 80012fe:	4980      	ldr	r1, [pc, #512]	; (8001500 <AUDIO_PLAYER_Start+0x2ac>)
 8001300:	a803      	add	r0, sp, #12
 8001302:	f00a fe5f 	bl	800bfc4 <siprintf>
      BSP_LCD_ClearStringLine(7);      
 8001306:	2007      	movs	r0, #7
 8001308:	f002 fc14 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
 800130c:	a903      	add	r1, sp, #12
 800130e:	2007      	movs	r0, #7
 8001310:	f002 fa92 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
      duration = info->FileSize / info->ByteRate; 
 8001314:	6862      	ldr	r2, [r4, #4]
 8001316:	69e1      	ldr	r1, [r4, #28]
 8001318:	fbb2 f0f1 	udiv	r0, r2, r1
      sprintf((char *)str, "File Size : %d KB [%02d:%02d]", (int)(info->FileSize/1024), (int)(duration/60), (int)(duration%60));
 800131c:	213c      	movs	r1, #60	; 0x3c
 800131e:	0a92      	lsrs	r2, r2, #10
 8001320:	fbb0 f3f1 	udiv	r3, r0, r1
 8001324:	fb01 0113 	mls	r1, r1, r3, r0
 8001328:	a803      	add	r0, sp, #12
 800132a:	9100      	str	r1, [sp, #0]
 800132c:	4975      	ldr	r1, [pc, #468]	; (8001504 <AUDIO_PLAYER_Start+0x2b0>)
 800132e:	f00a fe49 	bl	800bfc4 <siprintf>
      BSP_LCD_ClearStringLine(8);
 8001332:	2008      	movs	r0, #8
 8001334:	f002 fbfe 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(8, str);
 8001338:	a903      	add	r1, sp, #12
 800133a:	2008      	movs	r0, #8
 800133c:	f002 fa7c 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
      BSP_LCD_DisplayStringAt(263, LINE(8), (uint8_t *)"[00:00]", LEFT_MODE);
 8001340:	f002 f92e 	bl	80035a0 <BSP_LCD_GetFont>
 8001344:	88c1      	ldrh	r1, [r0, #6]
 8001346:	2303      	movs	r3, #3
 8001348:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <AUDIO_PLAYER_Start+0x2b4>)
 800134a:	00c9      	lsls	r1, r1, #3
 800134c:	f240 1007 	movw	r0, #263	; 0x107
 8001350:	b289      	uxth	r1, r1
 8001352:	f002 fa1f 	bl	8003794 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8001356:	f04f 30ff 	mov.w	r0, #4294967295
 800135a:	f002 f903 	bl	8003564 <BSP_LCD_SetTextColor>
      sprintf((char *)str,  "Volume : %lu", uwVolume);
 800135e:	496b      	ldr	r1, [pc, #428]	; (800150c <AUDIO_PLAYER_Start+0x2b8>)
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	a803      	add	r0, sp, #12
 8001364:	f00a fe2e 	bl	800bfc4 <siprintf>
      BSP_LCD_ClearStringLine(9);      
 8001368:	2009      	movs	r0, #9
 800136a:	f002 fbe3 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(9, str);
 800136e:	a903      	add	r1, sp, #12
 8001370:	2009      	movs	r0, #9
 8001372:	f002 fa61 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	2003      	movs	r0, #3
 800137a:	69a2      	ldr	r2, [r4, #24]
 800137c:	b2c9      	uxtb	r1, r1
 800137e:	f001 fea7 	bl	80030d0 <BSP_AUDIO_OUT_Init>
 8001382:	b910      	cbnz	r0, 800138a <AUDIO_PLAYER_Start+0x136>
    BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8001384:	2005      	movs	r0, #5
 8001386:	f001 fdd5 	bl	8002f34 <BSP_AUDIO_OUT_SetAudioFrameSlot>
    BufferCtl.state = BUFFER_OFFSET_NONE;
 800138a:	2100      	movs	r1, #0
 800138c:	4c60      	ldr	r4, [pc, #384]	; (8001510 <AUDIO_PLAYER_Start+0x2bc>)
    f_lseek(&WavFile, 0);
 800138e:	4856      	ldr	r0, [pc, #344]	; (80014e8 <AUDIO_PLAYER_Start+0x294>)
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001390:	7021      	strb	r1, [r4, #0]
    f_lseek(&WavFile, 0);
 8001392:	f008 fb73 	bl	8009a7c <f_lseek>
    if(f_read(&WavFile, 
 8001396:	ab03      	add	r3, sp, #12
 8001398:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139c:	f5a4 5100 	sub.w	r1, r4, #8192	; 0x2000
 80013a0:	4851      	ldr	r0, [pc, #324]	; (80014e8 <AUDIO_PLAYER_Start+0x294>)
 80013a2:	f008 f9a1 	bl	80096e8 <f_read>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	f47f af5f 	bne.w	800126a <AUDIO_PLAYER_Start+0x16>
 80013ac:	4b59      	ldr	r3, [pc, #356]	; (8001514 <AUDIO_PLAYER_Start+0x2c0>)
    if(idx == 0 && check == 0){
 80013ae:	2e00      	cmp	r6, #0
 80013b0:	f040 8096 	bne.w	80014e0 <AUDIO_PLAYER_Start+0x28c>
 80013b4:	4a58      	ldr	r2, [pc, #352]	; (8001518 <AUDIO_PLAYER_Start+0x2c4>)
 80013b6:	7811      	ldrb	r1, [r2, #0]
 80013b8:	2900      	cmp	r1, #0
 80013ba:	f040 8091 	bne.w	80014e0 <AUDIO_PLAYER_Start+0x28c>
    	AudioState = AUDIO_STATE_PAUSE;
 80013be:	210b      	movs	r1, #11
 80013c0:	7019      	strb	r1, [r3, #0]
    	check = 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	7013      	strb	r3, [r2, #0]
  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
 80013c6:	4855      	ldr	r0, [pc, #340]	; (800151c <AUDIO_PLAYER_Start+0x2c8>)
 80013c8:	f002 f8e0 	bl	800358c <BSP_LCD_SetFont>
  BSP_LCD_ClearStringLine(13);            /* Clear dedicated zone */
 80013cc:	200d      	movs	r0, #13
 80013ce:	f002 fbb1 	bl	8003b34 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(14);
 80013d2:	200e      	movs	r0, #14
 80013d4:	f002 fbae 	bl	8003b34 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(15);
 80013d8:	200f      	movs	r0, #15
 80013da:	f002 fbab 	bl	8003b34 <BSP_LCD_ClearStringLine>
  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 80013de:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 80013e2:	f002 f8bf 	bl	8003564 <BSP_LCD_SetTextColor>
  BSP_LCD_FillPolygon(PreviousPoints, 3);   /* Previous track icon */
 80013e6:	2103      	movs	r1, #3
 80013e8:	484d      	ldr	r0, [pc, #308]	; (8001520 <AUDIO_PLAYER_Start+0x2cc>)
 80013ea:	f002 fc18 	bl	8003c1e <BSP_LCD_FillPolygon>
  BSP_LCD_FillRect(TOUCH_PREVIOUS_XMIN, TOUCH_PREVIOUS_YMIN , 10, TOUCH_PREVIOUS_YMAX - TOUCH_PREVIOUS_YMIN);
 80013ee:	2328      	movs	r3, #40	; 0x28
 80013f0:	220a      	movs	r2, #10
 80013f2:	21d4      	movs	r1, #212	; 0xd4
 80013f4:	20fa      	movs	r0, #250	; 0xfa
 80013f6:	f002 fb79 	bl	8003aec <BSP_LCD_FillRect>
  BSP_LCD_FillPolygon(NextPoints, 3);       /* Next track icon */
 80013fa:	2103      	movs	r1, #3
 80013fc:	4849      	ldr	r0, [pc, #292]	; (8001524 <AUDIO_PLAYER_Start+0x2d0>)
 80013fe:	f002 fc0e 	bl	8003c1e <BSP_LCD_FillPolygon>
  BSP_LCD_FillRect(TOUCH_NEXT_XMAX-9, TOUCH_NEXT_YMIN , 10, TOUCH_NEXT_YMAX - TOUCH_NEXT_YMIN);
 8001402:	2328      	movs	r3, #40	; 0x28
 8001404:	220a      	movs	r2, #10
 8001406:	21d4      	movs	r1, #212	; 0xd4
 8001408:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800140c:	f002 fb6e 	bl	8003aec <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);    /* Pause rectangles */
 8001410:	2328      	movs	r3, #40	; 0x28
 8001412:	220f      	movs	r2, #15
 8001414:	21d4      	movs	r1, #212	; 0xd4
 8001416:	2064      	movs	r0, #100	; 0x64
 8001418:	f002 fb68 	bl	8003aec <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 800141c:	2328      	movs	r3, #40	; 0x28
 800141e:	220f      	movs	r2, #15
 8001420:	21d4      	movs	r1, #212	; 0xd4
 8001422:	2078      	movs	r0, #120	; 0x78
 8001424:	f002 fb62 	bl	8003aec <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
 8001428:	2328      	movs	r3, #40	; 0x28
 800142a:	21d4      	movs	r1, #212	; 0xd4
 800142c:	20aa      	movs	r0, #170	; 0xaa
 800142e:	461a      	mov	r2, r3
 8001430:	f002 fb5c 	bl	8003aec <BSP_LCD_FillRect>
  BSP_LCD_DrawRect(TOUCH_VOL_MINUS_XMIN, TOUCH_VOL_MINUS_YMIN , /* VOl- rectangle */
 8001434:	2328      	movs	r3, #40	; 0x28
 8001436:	2232      	movs	r2, #50	; 0x32
 8001438:	21d4      	movs	r1, #212	; 0xd4
 800143a:	2014      	movs	r0, #20
 800143c:	f002 f91c 	bl	8003678 <BSP_LCD_DrawRect>
  BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t *)"VOl-", LEFT_MODE);
 8001440:	f002 f8ae 	bl	80035a0 <BSP_LCD_GetFont>
 8001444:	88c1      	ldrh	r1, [r0, #6]
 8001446:	2303      	movs	r3, #3
 8001448:	4a37      	ldr	r2, [pc, #220]	; (8001528 <AUDIO_PLAYER_Start+0x2d4>)
 800144a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800144e:	2018      	movs	r0, #24
 8001450:	0049      	lsls	r1, r1, #1
 8001452:	b289      	uxth	r1, r1
 8001454:	f002 f99e 	bl	8003794 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(TOUCH_VOL_PLUS_XMIN, TOUCH_VOL_PLUS_YMIN , /* VOl+ rectangle */
 8001458:	2328      	movs	r3, #40	; 0x28
 800145a:	2232      	movs	r2, #50	; 0x32
 800145c:	21d4      	movs	r1, #212	; 0xd4
 800145e:	f44f 70c9 	mov.w	r0, #402	; 0x192
 8001462:	f002 f909 	bl	8003678 <BSP_LCD_DrawRect>
  BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t *)"VOl+", RIGHT_MODE);
 8001466:	f002 f89b 	bl	80035a0 <BSP_LCD_GetFont>
 800146a:	88c1      	ldrh	r1, [r0, #6]
 800146c:	2302      	movs	r3, #2
 800146e:	4a2f      	ldr	r2, [pc, #188]	; (800152c <AUDIO_PLAYER_Start+0x2d8>)
 8001470:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001474:	2018      	movs	r0, #24
 8001476:	0049      	lsls	r1, r1, #1
 8001478:	b289      	uxth	r1, r1
 800147a:	f002 f98b 	bl	8003794 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800147e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001482:	f002 f86f 	bl	8003564 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
 8001486:	482a      	ldr	r0, [pc, #168]	; (8001530 <AUDIO_PLAYER_Start+0x2dc>)
 8001488:	f002 f880 	bl	800358c <BSP_LCD_SetFont>
  BSP_LCD_ClearStringLine(15);
 800148c:	200f      	movs	r0, #15
 800148e:	f002 fb51 	bl	8003b34 <BSP_LCD_ClearStringLine>
  BSP_LCD_DisplayStringAtLine(15, (uint8_t *)"Use stop button to exit");
 8001492:	4928      	ldr	r1, [pc, #160]	; (8001534 <AUDIO_PLAYER_Start+0x2e0>)
 8001494:	200f      	movs	r0, #15
 8001496:	f002 f9cf 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 800149a:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800149e:	f002 f861 	bl	8003564 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t *)"  [PLAY ]", LEFT_MODE);
 80014a2:	f002 f87d 	bl	80035a0 <BSP_LCD_GetFont>
 80014a6:	88c1      	ldrh	r1, [r0, #6]
 80014a8:	2303      	movs	r3, #3
 80014aa:	4a23      	ldr	r2, [pc, #140]	; (8001538 <AUDIO_PLAYER_Start+0x2e4>)
 80014ac:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80014b0:	20fa      	movs	r0, #250	; 0xfa
 80014b2:	b289      	uxth	r1, r1
 80014b4:	f002 f96e 	bl	8003794 <BSP_LCD_DisplayStringAt>
        if(bytesread != 0)
 80014b8:	9b03      	ldr	r3, [sp, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f43f aed5 	beq.w	800126a <AUDIO_PLAYER_Start+0x16>
          BSP_AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 80014c0:	4c1e      	ldr	r4, [pc, #120]	; (800153c <AUDIO_PLAYER_Start+0x2e8>)
 80014c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c6:	4620      	mov	r0, r4
 80014c8:	f001 fcc6 	bl	8002e58 <BSP_AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 80014cc:	f242 0304 	movw	r3, #8196	; 0x2004
 80014d0:	9a03      	ldr	r2, [sp, #12]
          return AUDIO_ERROR_NONE;
 80014d2:	2000      	movs	r0, #0
          BufferCtl.fptr = bytesread;
 80014d4:	50e2      	str	r2, [r4, r3]
          return AUDIO_ERROR_NONE;
 80014d6:	e6c9      	b.n	800126c <AUDIO_PLAYER_Start+0x18>
    f_close(&WavFile);
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <AUDIO_PLAYER_Start+0x294>)
 80014da:	f008 fabe 	bl	8009a5a <f_close>
 80014de:	e74a      	b.n	8001376 <AUDIO_PLAYER_Start+0x122>
    	AudioState = AUDIO_STATE_PLAY;
 80014e0:	2203      	movs	r2, #3
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	e76f      	b.n	80013c6 <AUDIO_PLAYER_Start+0x172>
 80014e6:	bf00      	nop
 80014e8:	20007da8 	.word	0x20007da8
 80014ec:	20007d7c 	.word	0x20007d7c
 80014f0:	20000000 	.word	0x20000000
 80014f4:	0801138a 	.word	0x0801138a
 80014f8:	20007a34 	.word	0x20007a34
 80014fc:	080113a3 	.word	0x080113a3
 8001500:	080113b7 	.word	0x080113b7
 8001504:	080113cc 	.word	0x080113cc
 8001508:	080113ea 	.word	0x080113ea
 800150c:	080113f2 	.word	0x080113f2
 8001510:	20002200 	.word	0x20002200
 8001514:	20007ab4 	.word	0x20007ab4
 8001518:	200001f8 	.word	0x200001f8
 800151c:	200000a4 	.word	0x200000a4
 8001520:	20000004 	.word	0x20000004
 8001524:	20000010 	.word	0x20000010
 8001528:	080113ff 	.word	0x080113ff
 800152c:	08011404 	.word	0x08011404
 8001530:	2000009c 	.word	0x2000009c
 8001534:	08011409 	.word	0x08011409
 8001538:	08011421 	.word	0x08011421
 800153c:	20000200 	.word	0x20000200
 8001540:	20006f5c 	.word	0x20006f5c

08001544 <AUDIO_PLAYER_Process>:
{
 8001544:	b570      	push	{r4, r5, r6, lr}
  switch(AudioState)
 8001546:	4c8c      	ldr	r4, [pc, #560]	; (8001778 <AUDIO_PLAYER_Process+0x234>)
{
 8001548:	b086      	sub	sp, #24
  switch(AudioState)
 800154a:	7823      	ldrb	r3, [r4, #0]
 800154c:	3b03      	subs	r3, #3
 800154e:	2b0b      	cmp	r3, #11
 8001550:	d86f      	bhi.n	8001632 <AUDIO_PLAYER_Process+0xee>
 8001552:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001556:	000c      	.short	0x000c
 8001558:	006e006e 	.word	0x006e006e
 800155c:	009b008b 	.word	0x009b008b
 8001560:	006e006e 	.word	0x006e006e
 8001564:	00a70071 	.word	0x00a70071
 8001568:	00f100cb 	.word	0x00f100cb
 800156c:	010a      	.short	0x010a
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 800156e:	f242 0304 	movw	r3, #8196	; 0x2004
 8001572:	4d82      	ldr	r5, [pc, #520]	; (800177c <AUDIO_PLAYER_Process+0x238>)
 8001574:	4e82      	ldr	r6, [pc, #520]	; (8001780 <AUDIO_PLAYER_Process+0x23c>)
 8001576:	58ea      	ldr	r2, [r5, r3]
 8001578:	6873      	ldr	r3, [r6, #4]
 800157a:	429a      	cmp	r2, r3
 800157c:	d304      	bcc.n	8001588 <AUDIO_PLAYER_Process+0x44>
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800157e:	2002      	movs	r0, #2
 8001580:	f001 fcb0 	bl	8002ee4 <BSP_AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8001584:	2306      	movs	r3, #6
 8001586:	7023      	strb	r3, [r4, #0]
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001588:	4c7e      	ldr	r4, [pc, #504]	; (8001784 <AUDIO_PLAYER_Process+0x240>)
 800158a:	7823      	ldrb	r3, [r4, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d116      	bne.n	80015be <AUDIO_PLAYER_Process+0x7a>
      if(f_read(&WavFile, 
 8001590:	ab01      	add	r3, sp, #4
 8001592:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001596:	f5a4 5100 	sub.w	r1, r4, #8192	; 0x2000
 800159a:	487b      	ldr	r0, [pc, #492]	; (8001788 <AUDIO_PLAYER_Process+0x244>)
 800159c:	f008 f8a4 	bl	80096e8 <f_read>
 80015a0:	b130      	cbz	r0, 80015b0 <AUDIO_PLAYER_Process+0x6c>
        return AUDIO_ERROR_IO;       
 80015a2:	2401      	movs	r4, #1
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW); 
 80015a4:	2002      	movs	r0, #2
 80015a6:	f001 fc9d 	bl	8002ee4 <BSP_AUDIO_OUT_Stop>
}
 80015aa:	4620      	mov	r0, r4
 80015ac:	b006      	add	sp, #24
 80015ae:	bd70      	pop	{r4, r5, r6, pc}
      BufferCtl.fptr += bytesread; 
 80015b0:	f242 0204 	movw	r2, #8196	; 0x2004
 80015b4:	9901      	ldr	r1, [sp, #4]
      BufferCtl.state = BUFFER_OFFSET_NONE;
 80015b6:	7020      	strb	r0, [r4, #0]
      BufferCtl.fptr += bytesread; 
 80015b8:	58ab      	ldr	r3, [r5, r2]
 80015ba:	440b      	add	r3, r1
 80015bc:	50ab      	str	r3, [r5, r2]
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 80015be:	7823      	ldrb	r3, [r4, #0]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d10f      	bne.n	80015e4 <AUDIO_PLAYER_Process+0xa0>
      if(f_read(&WavFile, 
 80015c4:	ab01      	add	r3, sp, #4
 80015c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ca:	4970      	ldr	r1, [pc, #448]	; (800178c <AUDIO_PLAYER_Process+0x248>)
 80015cc:	486e      	ldr	r0, [pc, #440]	; (8001788 <AUDIO_PLAYER_Process+0x244>)
 80015ce:	f008 f88b 	bl	80096e8 <f_read>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d1e5      	bne.n	80015a2 <AUDIO_PLAYER_Process+0x5e>
      BufferCtl.fptr += bytesread; 
 80015d6:	f242 0204 	movw	r2, #8196	; 0x2004
 80015da:	9901      	ldr	r1, [sp, #4]
      BufferCtl.state = BUFFER_OFFSET_NONE;
 80015dc:	7020      	strb	r0, [r4, #0]
      BufferCtl.fptr += bytesread; 
 80015de:	58ab      	ldr	r3, [r5, r2]
 80015e0:	440b      	add	r3, r1
 80015e2:	50ab      	str	r3, [r5, r2]
    elapsed_time = BufferCtl.fptr / WaveFormat.ByteRate; 
 80015e4:	f242 0304 	movw	r3, #8196	; 0x2004
 80015e8:	69f2      	ldr	r2, [r6, #28]
 80015ea:	58eb      	ldr	r3, [r5, r3]
 80015ec:	fbb3 f3f2 	udiv	r3, r3, r2
    if(prev_elapsed_time != elapsed_time)
 80015f0:	4a67      	ldr	r2, [pc, #412]	; (8001790 <AUDIO_PLAYER_Process+0x24c>)
 80015f2:	69d1      	ldr	r1, [r2, #28]
 80015f4:	4299      	cmp	r1, r3
 80015f6:	d01c      	beq.n	8001632 <AUDIO_PLAYER_Process+0xee>
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
 80015f8:	213c      	movs	r1, #60	; 0x3c
      prev_elapsed_time = elapsed_time;
 80015fa:	61d3      	str	r3, [r2, #28]
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
 80015fc:	a802      	add	r0, sp, #8
 80015fe:	fbb3 f2f1 	udiv	r2, r3, r1
 8001602:	fb01 3312 	mls	r3, r1, r2, r3
 8001606:	4963      	ldr	r1, [pc, #396]	; (8001794 <AUDIO_PLAYER_Process+0x250>)
 8001608:	f00a fcdc 	bl	800bfc4 <siprintf>
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN); 
 800160c:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001610:	f001 ffa8 	bl	8003564 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(263, LINE(8), str, LEFT_MODE);
 8001614:	f001 ffc4 	bl	80035a0 <BSP_LCD_GetFont>
 8001618:	88c1      	ldrh	r1, [r0, #6]
 800161a:	2303      	movs	r3, #3
 800161c:	f240 1007 	movw	r0, #263	; 0x107
 8001620:	00c9      	lsls	r1, r1, #3
 8001622:	aa02      	add	r2, sp, #8
 8001624:	b289      	uxth	r1, r1
 8001626:	f002 f8b5 	bl	8003794 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800162a:	f04f 30ff 	mov.w	r0, #4294967295
 800162e:	f001 ff99 	bl	8003564 <BSP_LCD_SetTextColor>
    AUDIO_AcquireTouchButtons();
 8001632:	f7ff fde1 	bl	80011f8 <AUDIO_AcquireTouchButtons>
 8001636:	e057      	b.n	80016e8 <AUDIO_PLAYER_Process+0x1a4>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001638:	4857      	ldr	r0, [pc, #348]	; (8001798 <AUDIO_PLAYER_Process+0x254>)
 800163a:	f001 ff93 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
 800163e:	2328      	movs	r3, #40	; 0x28
 8001640:	21d4      	movs	r1, #212	; 0xd4
 8001642:	20aa      	movs	r0, #170	; 0xaa
 8001644:	461a      	mov	r2, r3
 8001646:	f002 fa51 	bl	8003aec <BSP_LCD_FillRect>
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800164a:	2002      	movs	r0, #2
 800164c:	f001 fc4a 	bl	8002ee4 <BSP_AUDIO_OUT_Stop>
    check = 0;
 8001650:	2000      	movs	r0, #0
 8001652:	4b52      	ldr	r3, [pc, #328]	; (800179c <AUDIO_PLAYER_Process+0x258>)
 8001654:	7018      	strb	r0, [r3, #0]
    AUDIO_PLAYER_Start(FilePos);
 8001656:	f7ff fdfd 	bl	8001254 <AUDIO_PLAYER_Start>
    if(uwVolume == 0)
 800165a:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <AUDIO_PLAYER_Process+0x24c>)
 800165c:	681c      	ldr	r4, [r3, #0]
 800165e:	2c00      	cmp	r4, #0
 8001660:	d142      	bne.n	80016e8 <AUDIO_PLAYER_Process+0x1a4>
      BSP_AUDIO_OUT_SetVolume(uwVolume);
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	b2c0      	uxtb	r0, r0
 8001666:	f001 fc57 	bl	8002f18 <BSP_AUDIO_OUT_SetVolume>
 800166a:	e79e      	b.n	80015aa <AUDIO_PLAYER_Process+0x66>
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 800166c:	4c4c      	ldr	r4, [pc, #304]	; (80017a0 <AUDIO_PLAYER_Process+0x25c>)
 800166e:	8825      	ldrh	r5, [r4, #0]
 8001670:	3501      	adds	r5, #1
 8001672:	b22d      	sxth	r5, r5
 8001674:	8025      	strh	r5, [r4, #0]
 8001676:	f7ff f8c5 	bl	8000804 <AUDIO_GetWavObjectNumber>
 800167a:	4285      	cmp	r5, r0
 800167c:	db01      	blt.n	8001682 <AUDIO_PLAYER_Process+0x13e>
      FilePos = 0; 
 800167e:	2300      	movs	r3, #0
 8001680:	8023      	strh	r3, [r4, #0]
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001682:	2002      	movs	r0, #2
 8001684:	f001 fc2e 	bl	8002ee4 <BSP_AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001688:	7820      	ldrb	r0, [r4, #0]
 800168a:	e7e4      	b.n	8001656 <AUDIO_PLAYER_Process+0x112>
    if(--FilePos < 0)
 800168c:	4c44      	ldr	r4, [pc, #272]	; (80017a0 <AUDIO_PLAYER_Process+0x25c>)
 800168e:	8822      	ldrh	r2, [r4, #0]
 8001690:	3a01      	subs	r2, #1
 8001692:	b212      	sxth	r2, r2
 8001694:	2a00      	cmp	r2, #0
 8001696:	8022      	strh	r2, [r4, #0]
 8001698:	daf3      	bge.n	8001682 <AUDIO_PLAYER_Process+0x13e>
      FilePos = AUDIO_GetWavObjectNumber() - 1; 
 800169a:	f7ff f8b3 	bl	8000804 <AUDIO_GetWavObjectNumber>
 800169e:	3801      	subs	r0, #1
 80016a0:	8020      	strh	r0, [r4, #0]
 80016a2:	e7ee      	b.n	8001682 <AUDIO_PLAYER_Process+0x13e>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 80016a4:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 80016a8:	f001 ff5c 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t *)"  [PAUSE]", LEFT_MODE);
 80016ac:	f001 ff78 	bl	80035a0 <BSP_LCD_GetFont>
 80016b0:	88c1      	ldrh	r1, [r0, #6]
 80016b2:	2303      	movs	r3, #3
 80016b4:	4a3b      	ldr	r2, [pc, #236]	; (80017a4 <AUDIO_PLAYER_Process+0x260>)
 80016b6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80016ba:	20fa      	movs	r0, #250	; 0xfa
 80016bc:	b289      	uxth	r1, r1
 80016be:	f002 f869 	bl	8003794 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red pause rectangles */
 80016c2:	4835      	ldr	r0, [pc, #212]	; (8001798 <AUDIO_PLAYER_Process+0x254>)
 80016c4:	f001 ff4e 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 80016c8:	2328      	movs	r3, #40	; 0x28
 80016ca:	220f      	movs	r2, #15
 80016cc:	21d4      	movs	r1, #212	; 0xd4
 80016ce:	2064      	movs	r0, #100	; 0x64
 80016d0:	f002 fa0c 	bl	8003aec <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 80016d4:	2328      	movs	r3, #40	; 0x28
 80016d6:	220f      	movs	r2, #15
 80016d8:	21d4      	movs	r1, #212	; 0xd4
 80016da:	2078      	movs	r0, #120	; 0x78
 80016dc:	f002 fa06 	bl	8003aec <BSP_LCD_FillRect>
    BSP_AUDIO_OUT_Pause();
 80016e0:	f001 fbd8 	bl	8002e94 <BSP_AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 80016e4:	2301      	movs	r3, #1
    AudioState = AUDIO_STATE_PLAY;
 80016e6:	7023      	strb	r3, [r4, #0]
  return audio_error;
 80016e8:	2400      	movs	r4, #0
    break;
 80016ea:	e75e      	b.n	80015aa <AUDIO_PLAYER_Process+0x66>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 80016ec:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 80016f0:	f001 ff38 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t *)"  [PLAY ]", LEFT_MODE);
 80016f4:	f001 ff54 	bl	80035a0 <BSP_LCD_GetFont>
 80016f8:	88c1      	ldrh	r1, [r0, #6]
 80016fa:	2303      	movs	r3, #3
 80016fc:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <AUDIO_PLAYER_Process+0x264>)
 80016fe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001702:	20fa      	movs	r0, #250	; 0xfa
 8001704:	b289      	uxth	r1, r1
 8001706:	f002 f845 	bl	8003794 <BSP_LCD_DisplayStringAt>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 800170a:	2328      	movs	r3, #40	; 0x28
 800170c:	220f      	movs	r2, #15
 800170e:	21d4      	movs	r1, #212	; 0xd4
 8001710:	2064      	movs	r0, #100	; 0x64
 8001712:	f002 f9eb 	bl	8003aec <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 8001716:	2328      	movs	r3, #40	; 0x28
 8001718:	220f      	movs	r2, #15
 800171a:	21d4      	movs	r1, #212	; 0xd4
 800171c:	2078      	movs	r0, #120	; 0x78
 800171e:	f002 f9e5 	bl	8003aec <BSP_LCD_FillRect>
    BSP_AUDIO_OUT_Resume();
 8001722:	f001 fbcb 	bl	8002ebc <BSP_AUDIO_OUT_Resume>
    if(uwVolume == 0)
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <AUDIO_PLAYER_Process+0x24c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	b91a      	cbnz	r2, 8001734 <AUDIO_PLAYER_Process+0x1f0>
      BSP_AUDIO_OUT_SetVolume(uwVolume);
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	b2c0      	uxtb	r0, r0
 8001730:	f001 fbf2 	bl	8002f18 <BSP_AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001734:	2303      	movs	r3, #3
 8001736:	e7d6      	b.n	80016e6 <AUDIO_PLAYER_Process+0x1a2>
    if( uwVolume <= 90)
 8001738:	4d15      	ldr	r5, [pc, #84]	; (8001790 <AUDIO_PLAYER_Process+0x24c>)
 800173a:	682b      	ldr	r3, [r5, #0]
 800173c:	2b5a      	cmp	r3, #90	; 0x5a
 800173e:	d802      	bhi.n	8001746 <AUDIO_PLAYER_Process+0x202>
      uwVolume += 10;
 8001740:	682b      	ldr	r3, [r5, #0]
 8001742:	330a      	adds	r3, #10
      uwVolume -= 10;
 8001744:	602b      	str	r3, [r5, #0]
    BSP_AUDIO_OUT_SetVolume(uwVolume);
 8001746:	6828      	ldr	r0, [r5, #0]
 8001748:	b2c0      	uxtb	r0, r0
 800174a:	f001 fbe5 	bl	8002f18 <BSP_AUDIO_OUT_SetVolume>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800174e:	f04f 30ff 	mov.w	r0, #4294967295
 8001752:	f001 ff07 	bl	8003564 <BSP_LCD_SetTextColor>
    sprintf((char *)str,  "Volume : %lu ", uwVolume);
 8001756:	682a      	ldr	r2, [r5, #0]
 8001758:	4914      	ldr	r1, [pc, #80]	; (80017ac <AUDIO_PLAYER_Process+0x268>)
 800175a:	a802      	add	r0, sp, #8
 800175c:	f00a fc32 	bl	800bfc4 <siprintf>
    BSP_LCD_DisplayStringAtLine(9, str);
 8001760:	a902      	add	r1, sp, #8
 8001762:	2009      	movs	r0, #9
 8001764:	f002 f868 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
 8001768:	e7e4      	b.n	8001734 <AUDIO_PLAYER_Process+0x1f0>
    if( uwVolume >= 10)
 800176a:	4d09      	ldr	r5, [pc, #36]	; (8001790 <AUDIO_PLAYER_Process+0x24c>)
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	2b09      	cmp	r3, #9
 8001770:	d9e9      	bls.n	8001746 <AUDIO_PLAYER_Process+0x202>
      uwVolume -= 10;
 8001772:	682b      	ldr	r3, [r5, #0]
 8001774:	3b0a      	subs	r3, #10
 8001776:	e7e5      	b.n	8001744 <AUDIO_PLAYER_Process+0x200>
 8001778:	20007ab4 	.word	0x20007ab4
 800177c:	20000200 	.word	0x20000200
 8001780:	20007d7c 	.word	0x20007d7c
 8001784:	20002200 	.word	0x20002200
 8001788:	20007da8 	.word	0x20007da8
 800178c:	20001200 	.word	0x20001200
 8001790:	20000000 	.word	0x20000000
 8001794:	080113de 	.word	0x080113de
 8001798:	ffff0000 	.word	0xffff0000
 800179c:	200001f8 	.word	0x200001f8
 80017a0:	200001fc 	.word	0x200001fc
 80017a4:	0801142b 	.word	0x0801142b
 80017a8:	08011421 	.word	0x08011421
 80017ac:	08011435 	.word	0x08011435

080017b0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  if(AudioState == AUDIO_STATE_PLAY)
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b03      	cmp	r3, #3
    BufferCtl.state = BUFFER_OFFSET_FULL;
 80017b6:	bf02      	ittt	eq
 80017b8:	4b02      	ldreq	r3, [pc, #8]	; (80017c4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
 80017ba:	2202      	moveq	r2, #2
 80017bc:	701a      	strbeq	r2, [r3, #0]
}
 80017be:	4770      	bx	lr
 80017c0:	20007ab4 	.word	0x20007ab4
 80017c4:	20002200 	.word	0x20002200

080017c8 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  if(AudioState == AUDIO_STATE_PLAY)
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x10>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b03      	cmp	r3, #3
    BufferCtl.state = BUFFER_OFFSET_HALF;
 80017ce:	bf02      	ittt	eq
 80017d0:	4b02      	ldreq	r3, [pc, #8]	; (80017dc <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 80017d2:	2201      	moveq	r2, #1
 80017d4:	701a      	strbeq	r2, [r3, #0]
}
 80017d6:	4770      	bx	lr
 80017d8:	20007ab4 	.word	0x20007ab4
 80017dc:	20002200 	.word	0x20002200

080017e0 <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 80017e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t byteswritten = 0;
 80017e4:	2300      	movs	r3, #0
{
 80017e6:	b090      	sub	sp, #64	; 0x40
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20]; 
  
  uwVolume = 100;
 80017e8:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8001b00 <AUDIO_REC_Start+0x320>
 80017ec:	2464      	movs	r4, #100	; 0x64

  /* Create a new file system */
  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 80017ee:	220a      	movs	r2, #10
 80017f0:	49b1      	ldr	r1, [pc, #708]	; (8001ab8 <AUDIO_REC_Start+0x2d8>)
 80017f2:	48b2      	ldr	r0, [pc, #712]	; (8001abc <AUDIO_REC_Start+0x2dc>)
  uint32_t byteswritten = 0;
 80017f4:	9300      	str	r3, [sp, #0]
  uwVolume = 100;
 80017f6:	f8c9 4000 	str.w	r4, [r9]
  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 80017fa:	f007 fe5b 	bl	80094b4 <f_open>
 80017fe:	b118      	cbz	r0, 8001808 <AUDIO_REC_Start+0x28>
          return AUDIO_ERROR_NONE;
        }
      }
    }
  }
  return AUDIO_ERROR_IO; 
 8001800:	2001      	movs	r0, #1
}
 8001802:	b010      	add	sp, #64	; 0x40
 8001804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8001808:	4bad      	ldr	r3, [pc, #692]	; (8001ac0 <AUDIO_REC_Start+0x2e0>)
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800180a:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
  pHeader[4] = 0x00;
  pHeader[5] = 0x4C;
  pHeader[6] = 0x1D;
  pHeader[7] = 0x00;
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800180e:	f04f 0e57 	mov.w	lr, #87	; 0x57
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 8001812:	4aac      	ldr	r2, [pc, #688]	; (8001ac4 <AUDIO_REC_Start+0x2e4>)
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001814:	61d9      	str	r1, [r3, #28]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 8001816:	2610      	movs	r6, #16
  pHeader[0] = 'R';
 8001818:	49ab      	ldr	r1, [pc, #684]	; (8001ac8 <AUDIO_REC_Start+0x2e8>)
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800181a:	2502      	movs	r5, #2
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800181c:	605a      	str	r2, [r3, #4]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800181e:	f04f 0804 	mov.w	r8, #4
  pHeader[8]  = 'W';
 8001822:	f881 e008 	strb.w	lr, [r1, #8]
  pHeader[9]  = 'A';
 8001826:	f04f 0e41 	mov.w	lr, #65	; 0x41
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800182a:	222c      	movs	r2, #44	; 0x2c
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800182c:	f44f 577a 	mov.w	r7, #16000	; 0x3e80
  pHeader[9]  = 'A';
 8001830:	f881 e009 	strb.w	lr, [r1, #9]
  pHeader[10] = 'V';
 8001834:	f04f 0e56 	mov.w	lr, #86	; 0x56
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 8001838:	611a      	str	r2, [r3, #16]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
  pHeader[13]  = 'm';
  pHeader[14]  = 't';
  pHeader[15]  = ' ';
 800183a:	f04f 0a20 	mov.w	sl, #32
  pHeader[10] = 'V';
 800183e:	f881 e00a 	strb.w	lr, [r1, #10]
  pHeader[11] = 'E';
 8001842:	f04f 0e45 	mov.w	lr, #69	; 0x45
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8001846:	619f      	str	r7, [r3, #24]
  pHeader[5] = 0x4C;
 8001848:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800184c:	82dd      	strh	r5, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800184e:	845e      	strh	r6, [r3, #34]	; 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8001850:	f8a3 8020 	strh.w	r8, [r3, #32]
  pHeader[0] = 'R';
 8001854:	2352      	movs	r3, #82	; 0x52
  pHeader[11] = 'E';
 8001856:	f881 e00b 	strb.w	lr, [r1, #11]
  pHeader[12]  = 'f';
 800185a:	f04f 0e66 	mov.w	lr, #102	; 0x66
  pHeader[0] = 'R';
 800185e:	700b      	strb	r3, [r1, #0]
  pHeader[1] = 'I';
 8001860:	2349      	movs	r3, #73	; 0x49
  pHeader[15]  = ' ';
 8001862:	f881 a00f 	strb.w	sl, [r1, #15]
  pHeader[17]  = 0x00;
  pHeader[18]  = 0x00;
  pHeader[19]  = 0x00;
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 8001866:	f04f 0a01 	mov.w	sl, #1
  pHeader[1] = 'I';
 800186a:	704b      	strb	r3, [r1, #1]
  pHeader[2] = 'F';
 800186c:	2346      	movs	r3, #70	; 0x46
  pHeader[12]  = 'f';
 800186e:	f881 e00c 	strb.w	lr, [r1, #12]
  pHeader[13]  = 'm';
 8001872:	f04f 0e6d 	mov.w	lr, #109	; 0x6d
  pHeader[20]  = 0x01;
 8001876:	f881 a014 	strb.w	sl, [r1, #20]
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
  pHeader[23]  = 0x00;
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800187a:	f04f 0a80 	mov.w	sl, #128	; 0x80
  pHeader[2] = 'F';
 800187e:	708b      	strb	r3, [r1, #2]
  pHeader[3] = 'F';
 8001880:	70cb      	strb	r3, [r1, #3]
  pHeader[6] = 0x1D;
 8001882:	231d      	movs	r3, #29
  pHeader[13]  = 'm';
 8001884:	f881 e00d 	strb.w	lr, [r1, #13]
  pHeader[14]  = 't';
 8001888:	f04f 0e74 	mov.w	lr, #116	; 0x74
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800188c:	f881 a018 	strb.w	sl, [r1, #24]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8001890:	f04f 0a3e 	mov.w	sl, #62	; 0x3e
  pHeader[4] = 0x00;
 8001894:	7108      	strb	r0, [r1, #4]
  pHeader[6] = 0x1D;
 8001896:	718b      	strb	r3, [r1, #6]
  pHeader[7] = 0x00;
 8001898:	71c8      	strb	r0, [r1, #7]
  pHeader[17]  = 0x00;
 800189a:	7448      	strb	r0, [r1, #17]
  pHeader[18]  = 0x00;
 800189c:	7488      	strb	r0, [r1, #18]
  pHeader[19]  = 0x00;
 800189e:	74c8      	strb	r0, [r1, #19]
  pHeader[21]  = 0x00;
 80018a0:	7548      	strb	r0, [r1, #21]
  pHeader[23]  = 0x00;
 80018a2:	75c8      	strb	r0, [r1, #23]
  pHeader[5] = 0x4C;
 80018a4:	f881 c005 	strb.w	ip, [r1, #5]
  pHeader[14]  = 't';
 80018a8:	f881 e00e 	strb.w	lr, [r1, #14]
  pHeader[16]  = 0x10;
 80018ac:	740e      	strb	r6, [r1, #16]
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 80018ae:	758d      	strb	r5, [r1, #22]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 80018b0:	f881 a019 	strb.w	sl, [r1, #25]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 80018b4:	f04f 0afa 	mov.w	sl, #250	; 0xfa
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
  pHeader[35]  = 0x00;
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 80018b8:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pHeader[37]  = 'a';
 80018bc:	2461      	movs	r4, #97	; 0x61
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 80018be:	7688      	strb	r0, [r1, #26]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 80018c0:	76c8      	strb	r0, [r1, #27]
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 80018c2:	7708      	strb	r0, [r1, #28]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 80018c4:	7788      	strb	r0, [r1, #30]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 80018c6:	77c8      	strb	r0, [r1, #31]
  pHeader[33]  = 0x00;
 80018c8:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pHeader[35]  = 0x00;
 80018cc:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  pHeader[37]  = 'a';
 80018d0:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pHeader[38]  = 't';
  pHeader[39]  = 'a';
 80018d4:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 80018d8:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
  pHeader[41]  = 0x4C;
  pHeader[42]  = 0x1D;
 80018dc:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 80018e0:	466b      	mov	r3, sp
  pHeader[43]  = 0x00;
 80018e2:	f881 002b 	strb.w	r0, [r1, #43]	; 0x2b
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 80018e6:	f881 a01d 	strb.w	sl, [r1, #29]
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 80018ea:	f881 8020 	strb.w	r8, [r1, #32]
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 80018ee:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pHeader[38]  = 't';
 80018f2:	f881 e026 	strb.w	lr, [r1, #38]	; 0x26
  pHeader[41]  = 0x4C;
 80018f6:	f881 c029 	strb.w	ip, [r1, #41]	; 0x29
    if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 80018fa:	4870      	ldr	r0, [pc, #448]	; (8001abc <AUDIO_REC_Start+0x2dc>)
 80018fc:	f007 ffa0 	bl	8009840 <f_write>
 8001900:	4604      	mov	r4, r0
 8001902:	2800      	cmp	r0, #0
 8001904:	f47f af7c 	bne.w	8001800 <AUDIO_REC_Start+0x20>
      AudioState = AUDIO_STATE_PRERECORD;
 8001908:	4b70      	ldr	r3, [pc, #448]	; (8001acc <AUDIO_REC_Start+0x2ec>)
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800190a:	f04f 30ff 	mov.w	r0, #4294967295
      AudioState = AUDIO_STATE_PRERECORD;
 800190e:	f883 8000 	strb.w	r8, [r3]
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8001912:	f001 fe27 	bl	8003564 <BSP_LCD_SetTextColor>
      sprintf((char *)str, "Recording file: %s", 
 8001916:	4a68      	ldr	r2, [pc, #416]	; (8001ab8 <AUDIO_REC_Start+0x2d8>)
 8001918:	eb0d 0008 	add.w	r0, sp, r8
 800191c:	496c      	ldr	r1, [pc, #432]	; (8001ad0 <AUDIO_REC_Start+0x2f0>)
 800191e:	f00a fb51 	bl	800bfc4 <siprintf>
      BSP_LCD_ClearStringLine(4);
 8001922:	4640      	mov	r0, r8
 8001924:	f002 f906 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(4, str);
 8001928:	eb0d 0108 	add.w	r1, sp, r8
 800192c:	4640      	mov	r0, r8
 800192e:	f001 ff83 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN); 
 8001932:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001936:	f001 fe15 	bl	8003564 <BSP_LCD_SetTextColor>
      sprintf((char *)str,  "Sample rate : %d Hz", (int)DEFAULT_AUDIO_IN_FREQ);
 800193a:	463a      	mov	r2, r7
 800193c:	4965      	ldr	r1, [pc, #404]	; (8001ad4 <AUDIO_REC_Start+0x2f4>)
 800193e:	eb0d 0008 	add.w	r0, sp, r8
 8001942:	f00a fb3f 	bl	800bfc4 <siprintf>
      BSP_LCD_ClearStringLine(6);
 8001946:	2006      	movs	r0, #6
 8001948:	f002 f8f4 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(6, str);
 800194c:	eb0d 0108 	add.w	r1, sp, r8
 8001950:	2006      	movs	r0, #6
 8001952:	f001 ff71 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str,  "Channels number : %d", (int)DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8001956:	462a      	mov	r2, r5
 8001958:	495f      	ldr	r1, [pc, #380]	; (8001ad8 <AUDIO_REC_Start+0x2f8>)
 800195a:	eb0d 0008 	add.w	r0, sp, r8
 800195e:	f00a fb31 	bl	800bfc4 <siprintf>
      BSP_LCD_ClearStringLine(7);      
 8001962:	2007      	movs	r0, #7
 8001964:	f002 f8e6 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
 8001968:	eb0d 0108 	add.w	r1, sp, r8
 800196c:	2007      	movs	r0, #7
 800196e:	f001 ff63 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str,  "Volume : %d ", (int)uwVolume);
 8001972:	f8d9 2000 	ldr.w	r2, [r9]
 8001976:	4959      	ldr	r1, [pc, #356]	; (8001adc <AUDIO_REC_Start+0x2fc>)
 8001978:	eb0d 0008 	add.w	r0, sp, r8
 800197c:	f00a fb22 	bl	800bfc4 <siprintf>
      BSP_LCD_ClearStringLine(7);
 8001980:	2007      	movs	r0, #7
 8001982:	f002 f8d7 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
 8001986:	eb0d 0108 	add.w	r1, sp, r8
 800198a:	2007      	movs	r0, #7
 800198c:	f001 ff54 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str, "File Size :");
 8001990:	4953      	ldr	r1, [pc, #332]	; (8001ae0 <AUDIO_REC_Start+0x300>)
 8001992:	eb0d 0008 	add.w	r0, sp, r8
 8001996:	f00a fb35 	bl	800c004 <strcpy>
      BSP_LCD_ClearStringLine(8);
 800199a:	2008      	movs	r0, #8
 800199c:	f002 f8ca 	bl	8003b34 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(8, str);
 80019a0:	eb0d 0108 	add.w	r1, sp, r8
 80019a4:	2008      	movs	r0, #8
 80019a6:	f001 ff47 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
  * @param  None
  * @retval None
  */
static void AUDIO_REC_DisplayButtons(void)
{
  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
 80019aa:	484e      	ldr	r0, [pc, #312]	; (8001ae4 <AUDIO_REC_Start+0x304>)
 80019ac:	f001 fdee 	bl	800358c <BSP_LCD_SetFont>
  BSP_LCD_ClearStringLine(13);            /* Clear dedicated zone */
 80019b0:	200d      	movs	r0, #13
 80019b2:	f002 f8bf 	bl	8003b34 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(14);
 80019b6:	200e      	movs	r0, #14
 80019b8:	f002 f8bc 	bl	8003b34 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(15);
 80019bc:	200f      	movs	r0, #15
 80019be:	f002 f8b9 	bl	8003b34 <BSP_LCD_ClearStringLine>

  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 80019c2:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 80019c6:	f001 fdcd 	bl	8003564 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2, /* Record circle */
 80019ca:	2214      	movs	r2, #20
 80019cc:	21e8      	movs	r1, #232	; 0xe8
 80019ce:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80019d2:	f002 f8cf 	bl	8003b74 <BSP_LCD_FillCircle>
                     (TOUCH_RECORD_YMAX+TOUCH_RECORD_YMIN)/2,
                     (TOUCH_RECORD_XMAX-TOUCH_RECORD_XMIN)/2);
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);    /* Pause rectangles */
 80019d6:	2328      	movs	r3, #40	; 0x28
 80019d8:	220f      	movs	r2, #15
 80019da:	21d4      	movs	r1, #212	; 0xd4
 80019dc:	207d      	movs	r0, #125	; 0x7d
 80019de:	f002 f885 	bl	8003aec <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 80019e2:	2328      	movs	r3, #40	; 0x28
 80019e4:	220f      	movs	r2, #15
 80019e6:	21d4      	movs	r1, #212	; 0xd4
 80019e8:	2091      	movs	r0, #145	; 0x91
 80019ea:	f002 f87f 	bl	8003aec <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
 80019ee:	2328      	movs	r3, #40	; 0x28
 80019f0:	21d4      	movs	r1, #212	; 0xd4
 80019f2:	20cd      	movs	r0, #205	; 0xcd
 80019f4:	461a      	mov	r2, r3
 80019f6:	f002 f879 	bl	8003aec <BSP_LCD_FillRect>
                   TOUCH_STOP_XMAX - TOUCH_STOP_XMIN,
                   TOUCH_STOP_YMAX - TOUCH_STOP_YMIN);
  BSP_LCD_DrawRect(TOUCH_VOL_MINUS_XMIN, TOUCH_VOL_MINUS_YMIN , /* VOl- rectangle */
 80019fa:	2328      	movs	r3, #40	; 0x28
 80019fc:	2232      	movs	r2, #50	; 0x32
 80019fe:	21d4      	movs	r1, #212	; 0xd4
 8001a00:	2014      	movs	r0, #20
 8001a02:	f001 fe39 	bl	8003678 <BSP_LCD_DrawRect>
                   TOUCH_VOL_MINUS_XMAX - TOUCH_VOL_MINUS_XMIN,
                   TOUCH_VOL_MINUS_YMAX - TOUCH_VOL_MINUS_YMIN);
  BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t *)"VOl-", LEFT_MODE);
 8001a06:	f001 fdcb 	bl	80035a0 <BSP_LCD_GetFont>
 8001a0a:	88c1      	ldrh	r1, [r0, #6]
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	4a36      	ldr	r2, [pc, #216]	; (8001ae8 <AUDIO_REC_Start+0x308>)
 8001a10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001a14:	2018      	movs	r0, #24
 8001a16:	0049      	lsls	r1, r1, #1
 8001a18:	b289      	uxth	r1, r1
 8001a1a:	f001 febb 	bl	8003794 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(TOUCH_VOL_PLUS_XMIN, TOUCH_VOL_PLUS_YMIN , /* VOl+ rectangle */
 8001a1e:	2328      	movs	r3, #40	; 0x28
 8001a20:	2232      	movs	r2, #50	; 0x32
 8001a22:	21d4      	movs	r1, #212	; 0xd4
 8001a24:	f44f 70c9 	mov.w	r0, #402	; 0x192
 8001a28:	f001 fe26 	bl	8003678 <BSP_LCD_DrawRect>
                   TOUCH_VOL_PLUS_XMAX - TOUCH_VOL_PLUS_XMIN,
                   TOUCH_VOL_PLUS_YMAX - TOUCH_VOL_PLUS_YMIN);
  BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t *)"VOl+", RIGHT_MODE);
 8001a2c:	f001 fdb8 	bl	80035a0 <BSP_LCD_GetFont>
 8001a30:	88c1      	ldrh	r1, [r0, #6]
 8001a32:	462b      	mov	r3, r5
 8001a34:	4a2d      	ldr	r2, [pc, #180]	; (8001aec <AUDIO_REC_Start+0x30c>)
 8001a36:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001a3a:	2018      	movs	r0, #24
 8001a3c:	0049      	lsls	r1, r1, #1
 8001a3e:	b289      	uxth	r1, r1
 8001a40:	f001 fea8 	bl	8003794 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001a44:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001a48:	f001 fd8c 	bl	8003564 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
 8001a4c:	4828      	ldr	r0, [pc, #160]	; (8001af0 <AUDIO_REC_Start+0x310>)
 8001a4e:	f001 fd9d 	bl	800358c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAtLine(15, (uint8_t *)"Use record button to start record, stop to exit");
 8001a52:	4928      	ldr	r1, [pc, #160]	; (8001af4 <AUDIO_REC_Start+0x314>)
 8001a54:	200f      	movs	r0, #15
 8001a56:	f001 feef 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8001a5a:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001a5e:	f001 fd81 	bl	8003564 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [     ]", LEFT_MODE);
 8001a62:	f001 fd9d 	bl	80035a0 <BSP_LCD_GetFont>
 8001a66:	88c1      	ldrh	r1, [r0, #6]
 8001a68:	2303      	movs	r3, #3
 8001a6a:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <AUDIO_REC_Start+0x318>)
 8001a6c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001a70:	20f7      	movs	r0, #247	; 0xf7
 8001a72:	0049      	lsls	r1, r1, #1
 8001a74:	b289      	uxth	r1, r1
 8001a76:	f001 fe8d 	bl	8003794 <BSP_LCD_DisplayStringAt>
        if(byteswritten != 0)
 8001a7a:	9b00      	ldr	r3, [sp, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f43f aebf 	beq.w	8001800 <AUDIO_REC_Start+0x20>
          BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8001a82:	462a      	mov	r2, r5
          BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 8001a84:	4d1d      	ldr	r5, [pc, #116]	; (8001afc <AUDIO_REC_Start+0x31c>)
          BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8001a86:	4631      	mov	r1, r6
 8001a88:	4638      	mov	r0, r7
 8001a8a:	f001 fcd3 	bl	8003434 <BSP_AUDIO_IN_Init>
          BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 8001a8e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8001a92:	4628      	mov	r0, r5
 8001a94:	f001 fb86 	bl	80031a4 <BSP_AUDIO_IN_Record>
          BufferCtl.fptr = byteswritten;
 8001a98:	f644 030c 	movw	r3, #18444	; 0x480c
 8001a9c:	9a00      	ldr	r2, [sp, #0]
          return AUDIO_ERROR_NONE;
 8001a9e:	4620      	mov	r0, r4
          BufferCtl.fptr = byteswritten;
 8001aa0:	50ea      	str	r2, [r5, r3]
          BufferCtl.pcm_ptr = 0;
 8001aa2:	f505 4390 	add.w	r3, r5, #18432	; 0x4800
 8001aa6:	601c      	str	r4, [r3, #0]
          BufferCtl.offset = 0;
 8001aa8:	f644 0308 	movw	r3, #18440	; 0x4808
 8001aac:	50ec      	str	r4, [r5, r3]
          BufferCtl.wr_state = BUFFER_EMPTY;
 8001aae:	f644 0304 	movw	r3, #18436	; 0x4804
 8001ab2:	54ec      	strb	r4, [r5, r3]
          return AUDIO_ERROR_NONE;
 8001ab4:	e6a5      	b.n	8001802 <AUDIO_REC_Start+0x22>
 8001ab6:	bf00      	nop
 8001ab8:	08011443 	.word	0x08011443
 8001abc:	20007da8 	.word	0x20007da8
 8001ac0:	20007d7c 	.word	0x20007d7c
 8001ac4:	001d4c00 	.word	0x001d4c00
 8001ac8:	20007fd8 	.word	0x20007fd8
 8001acc:	20007ab4 	.word	0x20007ab4
 8001ad0:	0801144c 	.word	0x0801144c
 8001ad4:	080113a3 	.word	0x080113a3
 8001ad8:	080113b7 	.word	0x080113b7
 8001adc:	0801145f 	.word	0x0801145f
 8001ae0:	0801146c 	.word	0x0801146c
 8001ae4:	200000a4 	.word	0x200000a4
 8001ae8:	080113ff 	.word	0x080113ff
 8001aec:	08011404 	.word	0x08011404
 8001af0:	2000009c 	.word	0x2000009c
 8001af4:	08011478 	.word	0x08011478
 8001af8:	080114a8 	.word	0x080114a8
 8001afc:	20002234 	.word	0x20002234
 8001b00:	20000020 	.word	0x20000020

08001b04 <AUDIO_REC_Process>:
{
 8001b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t byteswritten = 0;
 8001b08:	2300      	movs	r3, #0
{
 8001b0a:	b086      	sub	sp, #24
  switch(AudioState)
 8001b0c:	4c9f      	ldr	r4, [pc, #636]	; (8001d8c <AUDIO_REC_Process+0x288>)
  uint32_t byteswritten = 0;
 8001b0e:	9301      	str	r3, [sp, #4]
  switch(AudioState)
 8001b10:	7823      	ldrb	r3, [r4, #0]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	2b0d      	cmp	r3, #13
 8001b16:	d817      	bhi.n	8001b48 <AUDIO_REC_Process+0x44>
 8001b18:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001b1c:	00160225 	.word	0x00160225
 8001b20:	000e0016 	.word	0x000e0016
 8001b24:	02000073 	.word	0x02000073
 8001b28:	00160200 	.word	0x00160200
 8001b2c:	01540016 	.word	0x01540016
 8001b30:	01d501a8 	.word	0x01d501a8
 8001b34:	021e0202 	.word	0x021e0202
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
 8001b38:	4d95      	ldr	r5, [pc, #596]	; (8001d90 <AUDIO_REC_Process+0x28c>)
 8001b3a:	782b      	ldrb	r3, [r5, #0]
 8001b3c:	462e      	mov	r6, r5
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d104      	bne.n	8001b4c <AUDIO_REC_Process+0x48>
      BSP_TS_GetState(&TS_State);
 8001b42:	4893      	ldr	r0, [pc, #588]	; (8001d90 <AUDIO_REC_Process+0x28c>)
 8001b44:	f002 fb98 	bl	8004278 <BSP_TS_GetState>
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001b48:	2500      	movs	r5, #0
 8001b4a:	e0d8      	b.n	8001cfe <AUDIO_REC_Process+0x1fa>
      BSP_TS_GetState(&TS_State);
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	f002 fb93 	bl	8004278 <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
 8001b52:	782b      	ldrb	r3, [r5, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d11f      	bne.n	8001b98 <AUDIO_REC_Process+0x94>
        if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
 8001b58:	886b      	ldrh	r3, [r5, #2]
 8001b5a:	f1a3 02ce 	sub.w	r2, r3, #206	; 0xce
 8001b5e:	2a26      	cmp	r2, #38	; 0x26
 8001b60:	d81d      	bhi.n	8001b9e <AUDIO_REC_Process+0x9a>
 8001b62:	89aa      	ldrh	r2, [r5, #12]
 8001b64:	3ad5      	subs	r2, #213	; 0xd5
 8001b66:	2a26      	cmp	r2, #38	; 0x26
 8001b68:	d819      	bhi.n	8001b9e <AUDIO_REC_Process+0x9a>
          AudioState = AUDIO_STATE_STOP;
 8001b6a:	230a      	movs	r3, #10
          AudioState = AUDIO_STATE_RECORD;
 8001b6c:	7023      	strb	r3, [r4, #0]
        if ((AudioState == AUDIO_STATE_VOLUME_DOWN) || (AudioState == AUDIO_STATE_VOLUME_UP))
 8001b6e:	7823      	ldrb	r3, [r4, #0]
 8001b70:	3b0d      	subs	r3, #13
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d8e8      	bhi.n	8001b48 <AUDIO_REC_Process+0x44>
          sprintf((char *)str,  "Volume : %d ", (int)uwVolume);
 8001b76:	4d87      	ldr	r5, [pc, #540]	; (8001d94 <AUDIO_REC_Process+0x290>)
 8001b78:	a802      	add	r0, sp, #8
 8001b7a:	4987      	ldr	r1, [pc, #540]	; (8001d98 <AUDIO_REC_Process+0x294>)
 8001b7c:	682a      	ldr	r2, [r5, #0]
 8001b7e:	f00a fa21 	bl	800bfc4 <siprintf>
          BSP_LCD_ClearStringLine(7);
 8001b82:	2007      	movs	r0, #7
 8001b84:	f001 ffd6 	bl	8003b34 <BSP_LCD_ClearStringLine>
          BSP_LCD_DisplayStringAtLine(7, str);
 8001b88:	2007      	movs	r0, #7
 8001b8a:	a902      	add	r1, sp, #8
 8001b8c:	f001 fe54 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
          BSP_AUDIO_IN_SetVolume(uwVolume);
 8001b90:	6828      	ldr	r0, [r5, #0]
 8001b92:	b2c0      	uxtb	r0, r0
 8001b94:	f001 fb3a 	bl	800320c <BSP_AUDIO_IN_SetVolume>
        AudioState = AUDIO_STATE_PRERECORD;
 8001b98:	2304      	movs	r3, #4
          AudioState = AUDIO_STATE_RESUME;
 8001b9a:	7023      	strb	r3, [r4, #0]
 8001b9c:	e7d4      	b.n	8001b48 <AUDIO_REC_Process+0x44>
        else if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
 8001b9e:	f46f 7596 	mvn.w	r5, #300	; 0x12c
 8001ba2:	195a      	adds	r2, r3, r5
 8001ba4:	2a26      	cmp	r2, #38	; 0x26
 8001ba6:	d808      	bhi.n	8001bba <AUDIO_REC_Process+0xb6>
 8001ba8:	89b2      	ldrh	r2, [r6, #12]
 8001baa:	3ad5      	subs	r2, #213	; 0xd5
 8001bac:	2a26      	cmp	r2, #38	; 0x26
 8001bae:	d804      	bhi.n	8001bba <AUDIO_REC_Process+0xb6>
          display_update = 1;
 8001bb0:	4b78      	ldr	r3, [pc, #480]	; (8001d94 <AUDIO_REC_Process+0x290>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	605a      	str	r2, [r3, #4]
          AudioState = AUDIO_STATE_RECORD;
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	e7d8      	b.n	8001b6c <AUDIO_REC_Process+0x68>
        else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
 8001bba:	f1a3 0215 	sub.w	r2, r3, #21
 8001bbe:	2a30      	cmp	r2, #48	; 0x30
 8001bc0:	d80d      	bhi.n	8001bde <AUDIO_REC_Process+0xda>
 8001bc2:	89b2      	ldrh	r2, [r6, #12]
 8001bc4:	3ad5      	subs	r2, #213	; 0xd5
 8001bc6:	2a26      	cmp	r2, #38	; 0x26
 8001bc8:	d809      	bhi.n	8001bde <AUDIO_REC_Process+0xda>
          AudioState = AUDIO_STATE_VOLUME_DOWN;
 8001bca:	230e      	movs	r3, #14
 8001bcc:	7023      	strb	r3, [r4, #0]
          if(uwVolume >= 5)
 8001bce:	4b71      	ldr	r3, [pc, #452]	; (8001d94 <AUDIO_REC_Process+0x290>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	2a04      	cmp	r2, #4
 8001bd4:	d9cf      	bls.n	8001b76 <AUDIO_REC_Process+0x72>
            uwVolume -= 5;
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	3a05      	subs	r2, #5
            uwVolume += 5;
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e7c7      	b.n	8001b6e <AUDIO_REC_Process+0x6a>
        else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
 8001bde:	f46f 70c9 	mvn.w	r0, #402	; 0x192
 8001be2:	4403      	add	r3, r0
 8001be4:	2b30      	cmp	r3, #48	; 0x30
 8001be6:	d8c2      	bhi.n	8001b6e <AUDIO_REC_Process+0x6a>
 8001be8:	89b3      	ldrh	r3, [r6, #12]
 8001bea:	3bd5      	subs	r3, #213	; 0xd5
 8001bec:	2b26      	cmp	r3, #38	; 0x26
 8001bee:	d8be      	bhi.n	8001b6e <AUDIO_REC_Process+0x6a>
          AudioState = AUDIO_STATE_VOLUME_UP;
 8001bf0:	230d      	movs	r3, #13
 8001bf2:	7023      	strb	r3, [r4, #0]
          if(uwVolume <= 95)
 8001bf4:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <AUDIO_REC_Process+0x290>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2a5f      	cmp	r2, #95	; 0x5f
 8001bfa:	d8bc      	bhi.n	8001b76 <AUDIO_REC_Process+0x72>
            uwVolume += 5;
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	3205      	adds	r2, #5
 8001c00:	e7eb      	b.n	8001bda <AUDIO_REC_Process+0xd6>
    if (display_update)
 8001c02:	4e64      	ldr	r6, [pc, #400]	; (8001d94 <AUDIO_REC_Process+0x290>)
 8001c04:	6873      	ldr	r3, [r6, #4]
 8001c06:	b1eb      	cbz	r3, 8001c44 <AUDIO_REC_Process+0x140>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red record circle */
 8001c08:	4864      	ldr	r0, [pc, #400]	; (8001d9c <AUDIO_REC_Process+0x298>)
 8001c0a:	f001 fcab 	bl	8003564 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
 8001c0e:	2214      	movs	r2, #20
 8001c10:	21e8      	movs	r1, #232	; 0xe8
 8001c12:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001c16:	f001 ffad 	bl	8003b74 <BSP_LCD_FillCircle>
      BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
 8001c1a:	4861      	ldr	r0, [pc, #388]	; (8001da0 <AUDIO_REC_Process+0x29c>)
 8001c1c:	f001 fcb6 	bl	800358c <BSP_LCD_SetFont>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001c20:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001c24:	f001 fc9e 	bl	8003564 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [RECORD]", LEFT_MODE);
 8001c28:	f001 fcba 	bl	80035a0 <BSP_LCD_GetFont>
 8001c2c:	88c1      	ldrh	r1, [r0, #6]
 8001c2e:	2303      	movs	r3, #3
 8001c30:	4a5c      	ldr	r2, [pc, #368]	; (8001da4 <AUDIO_REC_Process+0x2a0>)
 8001c32:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001c36:	20f7      	movs	r0, #247	; 0xf7
 8001c38:	0049      	lsls	r1, r1, #1
 8001c3a:	b289      	uxth	r1, r1
 8001c3c:	f001 fdaa 	bl	8003794 <BSP_LCD_DisplayStringAt>
      display_update = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	6073      	str	r3, [r6, #4]
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
 8001c44:	4d52      	ldr	r5, [pc, #328]	; (8001d90 <AUDIO_REC_Process+0x28c>)
 8001c46:	782b      	ldrb	r3, [r5, #0]
      BSP_TS_GetState(&TS_State);
 8001c48:	4628      	mov	r0, r5
 8001c4a:	462f      	mov	r7, r5
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d10e      	bne.n	8001c6e <AUDIO_REC_Process+0x16a>
      BSP_TS_GetState(&TS_State);
 8001c50:	f002 fb12 	bl	8004278 <BSP_TS_GetState>
    if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 8001c54:	4954      	ldr	r1, [pc, #336]	; (8001da8 <AUDIO_REC_Process+0x2a4>)
 8001c56:	f644 080c 	movw	r8, #18444	; 0x480c
 8001c5a:	4b54      	ldr	r3, [pc, #336]	; (8001dac <AUDIO_REC_Process+0x2a8>)
 8001c5c:	f851 2008 	ldr.w	r2, [r1, r8]
 8001c60:	460f      	mov	r7, r1
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d933      	bls.n	8001cce <AUDIO_REC_Process+0x1ca>
      display_update = 1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	6073      	str	r3, [r6, #4]
      AudioState = AUDIO_STATE_STOP;
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	e795      	b.n	8001b9a <AUDIO_REC_Process+0x96>
      BSP_TS_GetState(&TS_State);
 8001c6e:	f002 fb03 	bl	8004278 <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
 8001c72:	782b      	ldrb	r3, [r5, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d1ed      	bne.n	8001c54 <AUDIO_REC_Process+0x150>
        if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
 8001c78:	886b      	ldrh	r3, [r5, #2]
 8001c7a:	f1a3 02ce 	sub.w	r2, r3, #206	; 0xce
 8001c7e:	2a26      	cmp	r2, #38	; 0x26
 8001c80:	d806      	bhi.n	8001c90 <AUDIO_REC_Process+0x18c>
 8001c82:	89aa      	ldrh	r2, [r5, #12]
 8001c84:	3ad5      	subs	r2, #213	; 0xd5
 8001c86:	2a26      	cmp	r2, #38	; 0x26
 8001c88:	d802      	bhi.n	8001c90 <AUDIO_REC_Process+0x18c>
          AudioState = AUDIO_STATE_STOP;
 8001c8a:	230a      	movs	r3, #10
          AudioState = AUDIO_STATE_VOLUME_UP;
 8001c8c:	7023      	strb	r3, [r4, #0]
 8001c8e:	e7e1      	b.n	8001c54 <AUDIO_REC_Process+0x150>
        else if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
 8001c90:	f1a3 027e 	sub.w	r2, r3, #126	; 0x7e
 8001c94:	2a16      	cmp	r2, #22
 8001c96:	d805      	bhi.n	8001ca4 <AUDIO_REC_Process+0x1a0>
 8001c98:	89ba      	ldrh	r2, [r7, #12]
 8001c9a:	3ad5      	subs	r2, #213	; 0xd5
 8001c9c:	2a26      	cmp	r2, #38	; 0x26
 8001c9e:	d801      	bhi.n	8001ca4 <AUDIO_REC_Process+0x1a0>
          AudioState = AUDIO_STATE_PAUSE;
 8001ca0:	230b      	movs	r3, #11
 8001ca2:	e7f3      	b.n	8001c8c <AUDIO_REC_Process+0x188>
        else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
 8001ca4:	f1a3 0215 	sub.w	r2, r3, #21
 8001ca8:	2a30      	cmp	r2, #48	; 0x30
 8001caa:	d805      	bhi.n	8001cb8 <AUDIO_REC_Process+0x1b4>
 8001cac:	89ba      	ldrh	r2, [r7, #12]
 8001cae:	3ad5      	subs	r2, #213	; 0xd5
 8001cb0:	2a26      	cmp	r2, #38	; 0x26
 8001cb2:	d801      	bhi.n	8001cb8 <AUDIO_REC_Process+0x1b4>
          AudioState = AUDIO_STATE_VOLUME_DOWN;
 8001cb4:	230e      	movs	r3, #14
 8001cb6:	e7e9      	b.n	8001c8c <AUDIO_REC_Process+0x188>
        else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
 8001cb8:	f46f 71c9 	mvn.w	r1, #402	; 0x192
 8001cbc:	440b      	add	r3, r1
 8001cbe:	2b30      	cmp	r3, #48	; 0x30
 8001cc0:	d8c8      	bhi.n	8001c54 <AUDIO_REC_Process+0x150>
 8001cc2:	89bb      	ldrh	r3, [r7, #12]
 8001cc4:	3bd5      	subs	r3, #213	; 0xd5
 8001cc6:	2b26      	cmp	r3, #38	; 0x26
 8001cc8:	d8c4      	bhi.n	8001c54 <AUDIO_REC_Process+0x150>
          AudioState = AUDIO_STATE_VOLUME_UP;
 8001cca:	230d      	movs	r3, #13
 8001ccc:	e7de      	b.n	8001c8c <AUDIO_REC_Process+0x188>
    if(BufferCtl.wr_state == BUFFER_FULL)
 8001cce:	f644 0404 	movw	r4, #18436	; 0x4804
 8001cd2:	5d0d      	ldrb	r5, [r1, r4]
 8001cd4:	2d01      	cmp	r5, #1
 8001cd6:	d11d      	bne.n	8001d14 <AUDIO_REC_Process+0x210>
      if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset), 
 8001cd8:	f644 0308 	movw	r3, #18440	; 0x4808
 8001cdc:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8001ce0:	58c8      	ldr	r0, [r1, r3]
 8001ce2:	ab01      	add	r3, sp, #4
 8001ce4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001ce8:	4831      	ldr	r0, [pc, #196]	; (8001db0 <AUDIO_REC_Process+0x2ac>)
 8001cea:	f007 fda9 	bl	8009840 <f_write>
 8001cee:	b150      	cbz	r0, 8001d06 <AUDIO_REC_Process+0x202>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001cf0:	482a      	ldr	r0, [pc, #168]	; (8001d9c <AUDIO_REC_Process+0x298>)
 8001cf2:	f001 fc37 	bl	8003564 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"RECORD FAIL");
 8001cf6:	492f      	ldr	r1, [pc, #188]	; (8001db4 <AUDIO_REC_Process+0x2b0>)
 8001cf8:	200e      	movs	r0, #14
 8001cfa:	f001 fd9d 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
}
 8001cfe:	4628      	mov	r0, r5
 8001d00:	b006      	add	sp, #24
 8001d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      BufferCtl.fptr += byteswritten;
 8001d06:	f857 3008 	ldr.w	r3, [r7, r8]
 8001d0a:	9a01      	ldr	r2, [sp, #4]
      BufferCtl.wr_state =  BUFFER_EMPTY;
 8001d0c:	5538      	strb	r0, [r7, r4]
      BufferCtl.fptr += byteswritten;
 8001d0e:	4413      	add	r3, r2
 8001d10:	f847 3008 	str.w	r3, [r7, r8]
    elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2); 
 8001d14:	f644 040c 	movw	r4, #18444	; 0x480c
 8001d18:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
    if(prev_elapsed_time != elapsed_time)
 8001d1c:	68b3      	ldr	r3, [r6, #8]
    elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2); 
 8001d1e:	593a      	ldr	r2, [r7, r4]
 8001d20:	fbb2 f1f1 	udiv	r1, r2, r1
    if(prev_elapsed_time != elapsed_time)
 8001d24:	428b      	cmp	r3, r1
 8001d26:	f43f af0f 	beq.w	8001b48 <AUDIO_REC_Process+0x44>
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
 8001d2a:	233c      	movs	r3, #60	; 0x3c
      prev_elapsed_time = elapsed_time;
 8001d2c:	60b1      	str	r1, [r6, #8]
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
 8001d2e:	fbb1 f0f3 	udiv	r0, r1, r3
 8001d32:	fb03 1310 	mls	r3, r3, r0, r1
 8001d36:	4920      	ldr	r1, [pc, #128]	; (8001db8 <AUDIO_REC_Process+0x2b4>)
 8001d38:	a802      	add	r0, sp, #8
 8001d3a:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d3e:	491f      	ldr	r1, [pc, #124]	; (8001dbc <AUDIO_REC_Process+0x2b8>)
 8001d40:	f00a f940 	bl	800bfc4 <siprintf>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8001d44:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001d48:	f001 fc0c 	bl	8003564 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(263, LINE(8), str, LEFT_MODE);
 8001d4c:	f001 fc28 	bl	80035a0 <BSP_LCD_GetFont>
 8001d50:	88c1      	ldrh	r1, [r0, #6]
 8001d52:	aa02      	add	r2, sp, #8
 8001d54:	2303      	movs	r3, #3
 8001d56:	00c9      	lsls	r1, r1, #3
 8001d58:	f240 1007 	movw	r0, #263	; 0x107
 8001d5c:	b289      	uxth	r1, r1
 8001d5e:	f001 fd19 	bl	8003794 <BSP_LCD_DisplayStringAt>
      sprintf((char *)str, "%4d KB", (int)((int32_t)BufferCtl.fptr/1024));
 8001d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d66:	593a      	ldr	r2, [r7, r4]
 8001d68:	a802      	add	r0, sp, #8
 8001d6a:	4915      	ldr	r1, [pc, #84]	; (8001dc0 <AUDIO_REC_Process+0x2bc>)
 8001d6c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d70:	f00a f928 	bl	800bfc4 <siprintf>
      BSP_LCD_DisplayStringAt(83, LINE(8), str, LEFT_MODE);
 8001d74:	f001 fc14 	bl	80035a0 <BSP_LCD_GetFont>
 8001d78:	88c1      	ldrh	r1, [r0, #6]
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	aa02      	add	r2, sp, #8
 8001d7e:	00c9      	lsls	r1, r1, #3
 8001d80:	2053      	movs	r0, #83	; 0x53
 8001d82:	b289      	uxth	r1, r1
 8001d84:	f001 fd06 	bl	8003794 <BSP_LCD_DisplayStringAt>
 8001d88:	e6de      	b.n	8001b48 <AUDIO_REC_Process+0x44>
 8001d8a:	bf00      	nop
 8001d8c:	20007ab4 	.word	0x20007ab4
 8001d90:	20002208 	.word	0x20002208
 8001d94:	20000020 	.word	0x20000020
 8001d98:	0801145f 	.word	0x0801145f
 8001d9c:	ffff0000 	.word	0xffff0000
 8001da0:	2000009c 	.word	0x2000009c
 8001da4:	080114b2 	.word	0x080114b2
 8001da8:	20002234 	.word	0x20002234
 8001dac:	001d4bff 	.word	0x001d4bff
 8001db0:	20007da8 	.word	0x20007da8
 8001db4:	080114bd 	.word	0x080114bd
 8001db8:	003a9800 	.word	0x003a9800
 8001dbc:	080113de 	.word	0x080113de
 8001dc0:	080114c9 	.word	0x080114c9
    BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8001dc4:	2002      	movs	r0, #2
 8001dc6:	f001 f9f7 	bl	80031b8 <BSP_AUDIO_IN_Stop>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);   /* Display blue cyan record circle */
 8001dca:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001dce:	f001 fbc9 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
 8001dd2:	2214      	movs	r2, #20
 8001dd4:	21e8      	movs	r1, #232	; 0xe8
 8001dd6:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001dda:	f001 fecb 	bl	8003b74 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001dde:	4872      	ldr	r0, [pc, #456]	; (8001fa8 <AUDIO_REC_Process+0x4a4>)
 8001de0:	f001 fbc0 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
 8001de4:	2328      	movs	r3, #40	; 0x28
 8001de6:	21d4      	movs	r1, #212	; 0xd4
 8001de8:	20cd      	movs	r0, #205	; 0xcd
 8001dea:	461a      	mov	r2, r3
 8001dec:	f001 fe7e 	bl	8003aec <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8001df0:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001df4:	f001 fbb6 	bl	8003564 <BSP_LCD_SetTextColor>
    display_update = 1;
 8001df8:	4b6c      	ldr	r3, [pc, #432]	; (8001fac <AUDIO_REC_Process+0x4a8>)
 8001dfa:	2201      	movs	r2, #1
    HAL_Delay(150);
 8001dfc:	2096      	movs	r0, #150	; 0x96
    display_update = 1;
 8001dfe:	605a      	str	r2, [r3, #4]
    HAL_Delay(150);
 8001e00:	f002 fb58 	bl	80044b4 <HAL_Delay>
    if(f_lseek(&WavFile, 0) == FR_OK)
 8001e04:	2100      	movs	r1, #0
 8001e06:	486a      	ldr	r0, [pc, #424]	; (8001fb0 <AUDIO_REC_Process+0x4ac>)
 8001e08:	f007 fe38 	bl	8009a7c <f_lseek>
 8001e0c:	b9f0      	cbnz	r0, 8001e4c <AUDIO_REC_Process+0x348>
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 8001e0e:	4869      	ldr	r0, [pc, #420]	; (8001fb4 <AUDIO_REC_Process+0x4b0>)
 8001e10:	f644 020c 	movw	r2, #18444	; 0x480c
 8001e14:	4968      	ldr	r1, [pc, #416]	; (8001fb8 <AUDIO_REC_Process+0x4b4>)
 8001e16:	5883      	ldr	r3, [r0, r2]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 8001e18:	0a1d      	lsrs	r5, r3, #8
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 8001e1a:	710b      	strb	r3, [r1, #4]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 8001e1c:	714d      	strb	r5, [r1, #5]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 8001e1e:	0c1d      	lsrs	r5, r3, #16
 8001e20:	718d      	strb	r5, [r1, #6]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 8001e22:	0e1d      	lsrs	r5, r3, #24
  BufferCtl.fptr -=44;
 8001e24:	3b2c      	subs	r3, #44	; 0x2c
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 8001e26:	71cd      	strb	r5, [r1, #7]
  BufferCtl.fptr -=44;
 8001e28:	5083      	str	r3, [r0, r2]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8001e2a:	0a1a      	lsrs	r2, r3, #8
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 8001e2c:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8001e30:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 8001e34:	0c1a      	lsrs	r2, r3, #16
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 8001e36:	0e1b      	lsrs	r3, r3, #24
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 8001e38:	485d      	ldr	r0, [pc, #372]	; (8001fb0 <AUDIO_REC_Process+0x4ac>)
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 8001e3a:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 8001e3e:	222c      	movs	r2, #44	; 0x2c
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 8001e40:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 8001e44:	ab01      	add	r3, sp, #4
 8001e46:	f007 fcfb 	bl	8009840 <f_write>
 8001e4a:	b168      	cbz	r0, 8001e68 <AUDIO_REC_Process+0x364>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001e4c:	4856      	ldr	r0, [pc, #344]	; (8001fa8 <AUDIO_REC_Process+0x4a4>)
        audio_error = AUDIO_ERROR_IO;
 8001e4e:	2501      	movs	r5, #1
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001e50:	f001 fb88 	bl	8003564 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"RECORD FAIL");          
 8001e54:	4959      	ldr	r1, [pc, #356]	; (8001fbc <AUDIO_REC_Process+0x4b8>)
 8001e56:	200e      	movs	r0, #14
 8001e58:	f001 fcee 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
    AudioState = AUDIO_STATE_IDLE;      
 8001e5c:	2300      	movs	r3, #0
    f_close(&WavFile);
 8001e5e:	4854      	ldr	r0, [pc, #336]	; (8001fb0 <AUDIO_REC_Process+0x4ac>)
    AudioState = AUDIO_STATE_IDLE;      
 8001e60:	7023      	strb	r3, [r4, #0]
    f_close(&WavFile);
 8001e62:	f007 fdfa 	bl	8009a5a <f_close>
    break;
 8001e66:	e74a      	b.n	8001cfe <AUDIO_REC_Process+0x1fa>
        audio_error = AUDIO_ERROR_EOF;
 8001e68:	2502      	movs	r5, #2
 8001e6a:	e7f7      	b.n	8001e5c <AUDIO_REC_Process+0x358>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Displays red pause rectangles */
 8001e6c:	484e      	ldr	r0, [pc, #312]	; (8001fa8 <AUDIO_REC_Process+0x4a4>)
 8001e6e:	f001 fb79 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 8001e72:	2328      	movs	r3, #40	; 0x28
 8001e74:	220f      	movs	r2, #15
 8001e76:	21d4      	movs	r1, #212	; 0xd4
 8001e78:	207d      	movs	r0, #125	; 0x7d
 8001e7a:	f001 fe37 	bl	8003aec <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 8001e7e:	2328      	movs	r3, #40	; 0x28
 8001e80:	220f      	movs	r2, #15
 8001e82:	21d4      	movs	r1, #212	; 0xd4
 8001e84:	2091      	movs	r0, #145	; 0x91
 8001e86:	f001 fe31 	bl	8003aec <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);   /* Display blue cyan record circle */
 8001e8a:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001e8e:	f001 fb69 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
 8001e92:	2214      	movs	r2, #20
 8001e94:	21e8      	movs	r1, #232	; 0xe8
 8001e96:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001e9a:	f001 fe6b 	bl	8003b74 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001e9e:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001ea2:	f001 fb5f 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [PAUSE] ", LEFT_MODE);    
 8001ea6:	f001 fb7b 	bl	80035a0 <BSP_LCD_GetFont>
 8001eaa:	88c1      	ldrh	r1, [r0, #6]
 8001eac:	2303      	movs	r3, #3
 8001eae:	4a44      	ldr	r2, [pc, #272]	; (8001fc0 <AUDIO_REC_Process+0x4bc>)
 8001eb0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001eb4:	20f7      	movs	r0, #247	; 0xf7
 8001eb6:	0049      	lsls	r1, r1, #1
 8001eb8:	b289      	uxth	r1, r1
 8001eba:	f001 fc6b 	bl	8003794 <BSP_LCD_DisplayStringAt>
    BSP_AUDIO_IN_Pause();
 8001ebe:	f001 f995 	bl	80031ec <BSP_AUDIO_IN_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e669      	b.n	8001b9a <AUDIO_REC_Process+0x96>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);    /* Displays blue cyan pause rectangles */
 8001ec6:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001eca:	f001 fb4b 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 8001ece:	2328      	movs	r3, #40	; 0x28
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	21d4      	movs	r1, #212	; 0xd4
 8001ed4:	207d      	movs	r0, #125	; 0x7d
 8001ed6:	f001 fe09 	bl	8003aec <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 8001eda:	2328      	movs	r3, #40	; 0x28
 8001edc:	220f      	movs	r2, #15
 8001ede:	21d4      	movs	r1, #212	; 0xd4
 8001ee0:	2091      	movs	r0, #145	; 0x91
 8001ee2:	f001 fe03 	bl	8003aec <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red record circle */
 8001ee6:	4830      	ldr	r0, [pc, #192]	; (8001fa8 <AUDIO_REC_Process+0x4a4>)
 8001ee8:	f001 fb3c 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
 8001eec:	2214      	movs	r2, #20
 8001eee:	21e8      	movs	r1, #232	; 0xe8
 8001ef0:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001ef4:	f001 fe3e 	bl	8003b74 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001ef8:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001efc:	f001 fb32 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [RECORD]", LEFT_MODE);   
 8001f00:	f001 fb4e 	bl	80035a0 <BSP_LCD_GetFont>
 8001f04:	88c1      	ldrh	r1, [r0, #6]
 8001f06:	2303      	movs	r3, #3
 8001f08:	4a2e      	ldr	r2, [pc, #184]	; (8001fc4 <AUDIO_REC_Process+0x4c0>)
 8001f0a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001f0e:	20f7      	movs	r0, #247	; 0xf7
 8001f10:	0049      	lsls	r1, r1, #1
 8001f12:	b289      	uxth	r1, r1
 8001f14:	f001 fc3e 	bl	8003794 <BSP_LCD_DisplayStringAt>
    BSP_AUDIO_IN_Resume();
 8001f18:	f001 f970 	bl	80031fc <BSP_AUDIO_IN_Resume>
    AudioState = AUDIO_STATE_RECORD;
 8001f1c:	2305      	movs	r3, #5
 8001f1e:	e63c      	b.n	8001b9a <AUDIO_REC_Process+0x96>
    if(uwVolume <= 95)
 8001f20:	4d22      	ldr	r5, [pc, #136]	; (8001fac <AUDIO_REC_Process+0x4a8>)
 8001f22:	682b      	ldr	r3, [r5, #0]
 8001f24:	2b5f      	cmp	r3, #95	; 0x5f
 8001f26:	d802      	bhi.n	8001f2e <AUDIO_REC_Process+0x42a>
      uwVolume += 5;
 8001f28:	682b      	ldr	r3, [r5, #0]
 8001f2a:	3305      	adds	r3, #5
      uwVolume -= 5;
 8001f2c:	602b      	str	r3, [r5, #0]
    sprintf((char *)str,  "Volume : %d ", (int)uwVolume);
 8001f2e:	682a      	ldr	r2, [r5, #0]
 8001f30:	a802      	add	r0, sp, #8
 8001f32:	4925      	ldr	r1, [pc, #148]	; (8001fc8 <AUDIO_REC_Process+0x4c4>)
 8001f34:	f00a f846 	bl	800bfc4 <siprintf>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001f38:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001f3c:	f001 fb12 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_ClearStringLine(7);
 8001f40:	2007      	movs	r0, #7
 8001f42:	f001 fdf7 	bl	8003b34 <BSP_LCD_ClearStringLine>
    BSP_LCD_DisplayStringAtLine(7, str);
 8001f46:	a902      	add	r1, sp, #8
 8001f48:	2007      	movs	r0, #7
 8001f4a:	f001 fc75 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
    BSP_AUDIO_IN_SetVolume(uwVolume);
 8001f4e:	6828      	ldr	r0, [r5, #0]
 8001f50:	b2c0      	uxtb	r0, r0
 8001f52:	f001 f95b 	bl	800320c <BSP_AUDIO_IN_SetVolume>
 8001f56:	e7e1      	b.n	8001f1c <AUDIO_REC_Process+0x418>
    if(uwVolume >= 5)
 8001f58:	4d14      	ldr	r5, [pc, #80]	; (8001fac <AUDIO_REC_Process+0x4a8>)
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d9e6      	bls.n	8001f2e <AUDIO_REC_Process+0x42a>
      uwVolume -= 5;
 8001f60:	682b      	ldr	r3, [r5, #0]
 8001f62:	3b05      	subs	r3, #5
 8001f64:	e7e2      	b.n	8001f2c <AUDIO_REC_Process+0x428>
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
 8001f66:	4d19      	ldr	r5, [pc, #100]	; (8001fcc <AUDIO_REC_Process+0x4c8>)
 8001f68:	782b      	ldrb	r3, [r5, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	f43f ade9 	beq.w	8001b42 <AUDIO_REC_Process+0x3e>
      BSP_TS_GetState(&TS_State);
 8001f70:	4628      	mov	r0, r5
 8001f72:	f002 f981 	bl	8004278 <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
 8001f76:	782b      	ldrb	r3, [r5, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	f47f ade5 	bne.w	8001b48 <AUDIO_REC_Process+0x44>
        if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
 8001f7e:	886b      	ldrh	r3, [r5, #2]
 8001f80:	f46f 7296 	mvn.w	r2, #300	; 0x12c
 8001f84:	189a      	adds	r2, r3, r2
 8001f86:	2a26      	cmp	r2, #38	; 0x26
 8001f88:	d805      	bhi.n	8001f96 <AUDIO_REC_Process+0x492>
 8001f8a:	89aa      	ldrh	r2, [r5, #12]
 8001f8c:	3ad5      	subs	r2, #213	; 0xd5
 8001f8e:	2a26      	cmp	r2, #38	; 0x26
 8001f90:	d801      	bhi.n	8001f96 <AUDIO_REC_Process+0x492>
          AudioState = AUDIO_STATE_RESUME;
 8001f92:	230c      	movs	r3, #12
 8001f94:	e601      	b.n	8001b9a <AUDIO_REC_Process+0x96>
        else if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
 8001f96:	3b7e      	subs	r3, #126	; 0x7e
 8001f98:	2b16      	cmp	r3, #22
 8001f9a:	f63f add5 	bhi.w	8001b48 <AUDIO_REC_Process+0x44>
 8001f9e:	89ab      	ldrh	r3, [r5, #12]
 8001fa0:	3bd5      	subs	r3, #213	; 0xd5
 8001fa2:	2b26      	cmp	r3, #38	; 0x26
 8001fa4:	d9f5      	bls.n	8001f92 <AUDIO_REC_Process+0x48e>
 8001fa6:	e5cf      	b.n	8001b48 <AUDIO_REC_Process+0x44>
 8001fa8:	ffff0000 	.word	0xffff0000
 8001fac:	20000020 	.word	0x20000020
 8001fb0:	20007da8 	.word	0x20007da8
 8001fb4:	20002234 	.word	0x20002234
 8001fb8:	20007fd8 	.word	0x20007fd8
 8001fbc:	080114bd 	.word	0x080114bd
 8001fc0:	080114d0 	.word	0x080114d0
 8001fc4:	080114b2 	.word	0x080114b2
 8001fc8:	0801145f 	.word	0x0801145f
 8001fcc:	20002208 	.word	0x20002208

08001fd0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <BSP_AUDIO_IN_TransferComplete_CallBack+0x44>)
 8001fd2:	f503 4190 	add.w	r1, r3, #18432	; 0x4800
 8001fd6:	680a      	ldr	r2, [r1, #0]
 8001fd8:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 8001fdc:	f5b2 5f90 	cmp.w	r2, #4608	; 0x1200
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 8001fe0:	600a      	str	r2, [r1, #0]
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 8001fe2:	d108      	bne.n	8001ff6 <BSP_AUDIO_IN_TransferComplete_CallBack+0x26>
    BufferCtl.wr_state   =  BUFFER_FULL;
 8001fe4:	f644 0204 	movw	r2, #18436	; 0x4804
 8001fe8:	2101      	movs	r1, #1
 8001fea:	5499      	strb	r1, [r3, r2]
    BufferCtl.offset  = 0;
 8001fec:	f644 0208 	movw	r2, #18440	; 0x4808
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	5099      	str	r1, [r3, r2]
 8001ff4:	4770      	bx	lr
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 8001ff6:	f5b2 5f10 	cmp.w	r2, #9216	; 0x2400
 8001ffa:	d30a      	bcc.n	8002012 <BSP_AUDIO_IN_TransferComplete_CallBack+0x42>
    BufferCtl.wr_state   =  BUFFER_FULL;
 8001ffc:	f644 0204 	movw	r2, #18436	; 0x4804
 8002000:	2001      	movs	r0, #1
 8002002:	5498      	strb	r0, [r3, r2]
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 8002004:	f644 0208 	movw	r2, #18440	; 0x4808
 8002008:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 800200c:	5098      	str	r0, [r3, r2]
    BufferCtl.pcm_ptr = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	600b      	str	r3, [r1, #0]
}
 8002012:	4770      	bx	lr
 8002014:	20002234 	.word	0x20002234

08002018 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
 8002018:	f7ff bfda 	b.w	8001fd0 <BSP_AUDIO_IN_TransferComplete_CallBack>

0800201c <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800201c:	4770      	bx	lr

0800201e <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 800201e:	2000      	movs	r0, #0
 8002020:	4770      	bx	lr
	...

08002024 <ft5336_ReadID>:
{
 8002024:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8002026:	2300      	movs	r3, #0
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8002028:	4c0f      	ldr	r4, [pc, #60]	; (8002068 <ft5336_ReadID+0x44>)
{
 800202a:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 800202c:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8002030:	7823      	ldrb	r3, [r4, #0]
 8002032:	b91b      	cbnz	r3, 800203c <ft5336_ReadID+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8002034:	f000 fe58 	bl	8002ce8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8002038:	2301      	movs	r3, #1
 800203a:	7023      	strb	r3, [r4, #0]
{
 800203c:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800203e:	b2ed      	uxtb	r5, r5
 8002040:	3c01      	subs	r4, #1
 8002042:	21a8      	movs	r1, #168	; 0xa8
 8002044:	4628      	mov	r0, r5
 8002046:	f000 fe61 	bl	8002d0c <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800204a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800204e:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8002052:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002056:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002058:	d103      	bne.n	8002062 <ft5336_ReadID+0x3e>
  return (ucReadId);
 800205a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800205e:	b003      	add	sp, #12
 8002060:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002062:	2b51      	cmp	r3, #81	; 0x51
 8002064:	d1ec      	bne.n	8002040 <ft5336_ReadID+0x1c>
 8002066:	e7f8      	b.n	800205a <ft5336_ReadID+0x36>
 8002068:	20006a44 	.word	0x20006a44

0800206c <ft5336_TS_DetectTouch>:
{
 800206c:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 800206e:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8002070:	2102      	movs	r1, #2
 8002072:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8002074:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8002078:	f000 fe48 	bl	8002d0c <TS_IO_Read>
 800207c:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8002080:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800208c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002090:	2b05      	cmp	r3, #5
 8002092:	d901      	bls.n	8002098 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8002094:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8002098:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 800209e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80020a2:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80020a4:	2200      	movs	r2, #0
 80020a6:	709a      	strb	r2, [r3, #2]
}
 80020a8:	b002      	add	sp, #8
 80020aa:	bd10      	pop	{r4, pc}
 80020ac:	20006a44 	.word	0x20006a44

080020b0 <ft5336_TS_GetXY>:
{
 80020b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80020b4:	4c27      	ldr	r4, [pc, #156]	; (8002154 <ft5336_TS_GetXY+0xa4>)
{
 80020b6:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 80020b8:	2500      	movs	r5, #0
{
 80020ba:	4688      	mov	r8, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80020bc:	78a2      	ldrb	r2, [r4, #2]
 80020be:	7863      	ldrb	r3, [r4, #1]
  volatile uint8_t ucReadData = 0;
 80020c0:	f88d 5007 	strb.w	r5, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d93d      	bls.n	8002144 <ft5336_TS_GetXY+0x94>
 80020c8:	2a09      	cmp	r2, #9
 80020ca:	d83e      	bhi.n	800214a <ft5336_TS_GetXY+0x9a>
 80020cc:	4b22      	ldr	r3, [pc, #136]	; (8002158 <ft5336_TS_GetXY+0xa8>)
 80020ce:	5c99      	ldrb	r1, [r3, r2]
 80020d0:	4413      	add	r3, r2
 80020d2:	f893 a00a 	ldrb.w	sl, [r3, #10]
 80020d6:	f893 9014 	ldrb.w	r9, [r3, #20]
 80020da:	7f9d      	ldrb	r5, [r3, #30]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80020dc:	b2c7      	uxtb	r7, r0
 80020de:	4638      	mov	r0, r7
 80020e0:	f000 fe14 	bl	8002d0c <TS_IO_Read>
 80020e4:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80020e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80020ec:	4651      	mov	r1, sl
 80020ee:	4638      	mov	r0, r7
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80020f0:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80020f2:	f000 fe0b 	bl	8002d0c <TS_IO_Read>
 80020f6:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80020fa:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80020fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8002100:	4638      	mov	r0, r7
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002102:	88a2      	ldrh	r2, [r4, #4]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800210a:	4313      	orrs	r3, r2
    *X = coord;
 800210c:	f8a8 3000 	strh.w	r3, [r8]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002110:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8002112:	f000 fdfb 	bl	8002d0c <TS_IO_Read>
 8002116:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800211a:	4629      	mov	r1, r5
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800211c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8002120:	4638      	mov	r0, r7
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002122:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8002124:	f000 fdf2 	bl	8002d0c <TS_IO_Read>
 8002128:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800212c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002130:	88a2      	ldrh	r2, [r4, #4]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002138:	4313      	orrs	r3, r2
 800213a:	80a3      	strh	r3, [r4, #4]
    *Y = coord;
 800213c:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800213e:	78a3      	ldrb	r3, [r4, #2]
 8002140:	3301      	adds	r3, #1
 8002142:	70a3      	strb	r3, [r4, #2]
}
 8002144:	b002      	add	sp, #8
 8002146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800214a:	46a9      	mov	r9, r5
 800214c:	46aa      	mov	sl, r5
 800214e:	4629      	mov	r1, r5
 8002150:	e7c4      	b.n	80020dc <ft5336_TS_GetXY+0x2c>
 8002152:	bf00      	nop
 8002154:	20006a44 	.word	0x20006a44
 8002158:	0800d077 	.word	0x0800d077

0800215c <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800215c:	2201      	movs	r2, #1
 800215e:	21a4      	movs	r1, #164	; 0xa4
 8002160:	b2c0      	uxtb	r0, r0
 8002162:	f000 bdc3 	b.w	8002cec <TS_IO_Write>

08002166 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002166:	2200      	movs	r2, #0
 8002168:	21a4      	movs	r1, #164	; 0xa4
 800216a:	b2c0      	uxtb	r0, r0
 800216c:	f000 bdbe 	b.w	8002cec <TS_IO_Write>

08002170 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8002170:	f7ff bff9 	b.w	8002166 <ft5336_TS_DisableIT>

08002174 <ft5336_TS_ClearIT>:
 8002174:	4770      	bx	lr
	...

08002178 <ft5336_Init>:
{
 8002178:	b510      	push	{r4, lr}
  return(ft5336_handle.i2cInitialized);
 800217a:	4c05      	ldr	r4, [pc, #20]	; (8002190 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 800217c:	20c8      	movs	r0, #200	; 0xc8
 800217e:	f000 fdd9 	bl	8002d34 <TS_IO_Delay>
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8002182:	7823      	ldrb	r3, [r4, #0]
 8002184:	b91b      	cbnz	r3, 800218e <ft5336_Init+0x16>
    TS_IO_Init();
 8002186:	f000 fdaf 	bl	8002ce8 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800218a:	2301      	movs	r3, #1
 800218c:	7023      	strb	r3, [r4, #0]
}
 800218e:	bd10      	pop	{r4, pc}
 8002190:	20006a44 	.word	0x20006a44

08002194 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 8002194:	2300      	movs	r3, #0
{
 8002196:	b513      	push	{r0, r1, r4, lr}
 8002198:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800219a:	b2c0      	uxtb	r0, r0
 800219c:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 800219e:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80021a2:	f000 fdb3 	bl	8002d0c <TS_IO_Read>
 80021a6:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 80021aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021ae:	6023      	str	r3, [r4, #0]
}
 80021b0:	b002      	add	sp, #8
 80021b2:	bd10      	pop	{r4, pc}

080021b4 <ft5336_TS_GetTouchInfo>:
{
 80021b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80021b8:	461e      	mov	r6, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80021ba:	4b1c      	ldr	r3, [pc, #112]	; (800222c <ft5336_TS_GetTouchInfo+0x78>)
  volatile uint8_t ucReadData = 0;
 80021bc:	2400      	movs	r4, #0
{
 80021be:	4617      	mov	r7, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80021c0:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 80021c2:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80021c6:	428b      	cmp	r3, r1
 80021c8:	d92d      	bls.n	8002226 <ft5336_TS_GetTouchInfo+0x72>
 80021ca:	2909      	cmp	r1, #9
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80021cc:	b2c5      	uxtb	r5, r0
 80021ce:	bf94      	ite	ls
 80021d0:	4c17      	ldrls	r4, [pc, #92]	; (8002230 <ft5336_TS_GetTouchInfo+0x7c>)
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80021d2:	4621      	movhi	r1, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80021d4:	4628      	mov	r0, r5
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80021d6:	bf8f      	iteee	hi
 80021d8:	46a0      	movhi	r8, r4
 80021da:	1864      	addls	r4, r4, r1
 80021dc:	f894 1028 	ldrbls.w	r1, [r4, #40]	; 0x28
 80021e0:	f894 8032 	ldrbls.w	r8, [r4, #50]	; 0x32
 80021e4:	bf98      	it	ls
 80021e6:	f894 403c 	ldrbls.w	r4, [r4, #60]	; 0x3c
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80021ea:	f000 fd8f 	bl	8002d0c <TS_IO_Read>
 80021ee:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80021f2:	4628      	mov	r0, r5
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80021f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80021f8:	9b08      	ldr	r3, [sp, #32]
 80021fa:	0989      	lsrs	r1, r1, #6
 80021fc:	6019      	str	r1, [r3, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80021fe:	4641      	mov	r1, r8
 8002200:	f000 fd84 	bl	8002d0c <TS_IO_Read>
 8002204:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8002208:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800220c:	4621      	mov	r1, r4
 800220e:	4628      	mov	r0, r5
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8002210:	603b      	str	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8002212:	f000 fd7b 	bl	8002d0c <TS_IO_Read>
 8002216:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800221a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800221e:	0912      	lsrs	r2, r2, #4
 8002220:	f002 0204 	and.w	r2, r2, #4
 8002224:	6032      	str	r2, [r6, #0]
}
 8002226:	b002      	add	sp, #8
 8002228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800222c:	20006a44 	.word	0x20006a44
 8002230:	0800d077 	.word	0x0800d077

08002234 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 8002234:	2901      	cmp	r1, #1
{
 8002236:	b510      	push	{r4, lr}
 8002238:	b2c4      	uxtb	r4, r0
  switch (Output) 
 800223a:	d00f      	beq.n	800225c <wm8994_SetOutputMode+0x28>
 800223c:	2903      	cmp	r1, #3
 800223e:	d12d      	bne.n	800229c <wm8994_SetOutputMode+0x68>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8002240:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002244:	2105      	movs	r1, #5
 8002246:	4620      	mov	r0, r4
 8002248:	f000 fd24 	bl	8002c94 <AUDIO_IO_Write>
 800224c:	2201      	movs	r2, #1
 800224e:	f240 6101 	movw	r1, #1537	; 0x601
 8002252:	4620      	mov	r0, r4
 8002254:	f000 fd1e 	bl	8002c94 <AUDIO_IO_Write>
 8002258:	2201      	movs	r2, #1
 800225a:	e00c      	b.n	8002276 <wm8994_SetOutputMode+0x42>
 800225c:	f640 420c 	movw	r2, #3084	; 0xc0c
 8002260:	2105      	movs	r1, #5
 8002262:	4620      	mov	r0, r4
 8002264:	f000 fd16 	bl	8002c94 <AUDIO_IO_Write>
 8002268:	2200      	movs	r2, #0
 800226a:	f240 6101 	movw	r1, #1537	; 0x601
 800226e:	4620      	mov	r0, r4
 8002270:	f000 fd10 	bl	8002c94 <AUDIO_IO_Write>
 8002274:	2200      	movs	r2, #0
 8002276:	f240 6102 	movw	r1, #1538	; 0x602
 800227a:	4620      	mov	r0, r4
 800227c:	f000 fd0a 	bl	8002c94 <AUDIO_IO_Write>
 8002280:	2202      	movs	r2, #2
 8002282:	f240 6104 	movw	r1, #1540	; 0x604
 8002286:	4620      	mov	r0, r4
 8002288:	f000 fd04 	bl	8002c94 <AUDIO_IO_Write>
 800228c:	2202      	movs	r2, #2
 800228e:	4620      	mov	r0, r4
 8002290:	f240 6105 	movw	r1, #1541	; 0x605
 8002294:	f000 fcfe 	bl	8002c94 <AUDIO_IO_Write>
}
 8002298:	2000      	movs	r0, #0
 800229a:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 800229c:	f240 3203 	movw	r2, #771	; 0x303
 80022a0:	2105      	movs	r1, #5
 80022a2:	4620      	mov	r0, r4
 80022a4:	f000 fcf6 	bl	8002c94 <AUDIO_IO_Write>
 80022a8:	2201      	movs	r2, #1
 80022aa:	f240 6101 	movw	r1, #1537	; 0x601
 80022ae:	4620      	mov	r0, r4
 80022b0:	f000 fcf0 	bl	8002c94 <AUDIO_IO_Write>
 80022b4:	2201      	movs	r2, #1
 80022b6:	f240 6102 	movw	r1, #1538	; 0x602
 80022ba:	4620      	mov	r0, r4
 80022bc:	f000 fcea 	bl	8002c94 <AUDIO_IO_Write>
 80022c0:	2200      	movs	r2, #0
 80022c2:	f240 6104 	movw	r1, #1540	; 0x604
 80022c6:	4620      	mov	r0, r4
 80022c8:	f000 fce4 	bl	8002c94 <AUDIO_IO_Write>
 80022cc:	2200      	movs	r2, #0
 80022ce:	e7de      	b.n	800228e <wm8994_SetOutputMode+0x5a>

080022d0 <wm8994_SetFrequency>:
{
 80022d0:	b508      	push	{r3, lr}
  switch (AudioFreq)
 80022d2:	f245 6322 	movw	r3, #22050	; 0x5622
 80022d6:	b2c0      	uxtb	r0, r0
 80022d8:	4299      	cmp	r1, r3
 80022da:	d023      	beq.n	8002324 <wm8994_SetFrequency+0x54>
 80022dc:	d810      	bhi.n	8002300 <wm8994_SetFrequency+0x30>
 80022de:	f642 3311 	movw	r3, #11025	; 0x2b11
 80022e2:	4299      	cmp	r1, r3
 80022e4:	d01c      	beq.n	8002320 <wm8994_SetFrequency+0x50>
 80022e6:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 80022ea:	d015      	beq.n	8002318 <wm8994_SetFrequency+0x48>
 80022ec:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 80022f0:	d11c      	bne.n	800232c <wm8994_SetFrequency+0x5c>
 AUDIO_IO_Write(Addr, Reg, Value);
 80022f2:	2203      	movs	r2, #3
 80022f4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80022f8:	f000 fccc 	bl	8002c94 <AUDIO_IO_Write>
}
 80022fc:	2000      	movs	r0, #0
 80022fe:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 8002300:	f64a 4344 	movw	r3, #44100	; 0xac44
 8002304:	4299      	cmp	r1, r3
 8002306:	d00f      	beq.n	8002328 <wm8994_SetFrequency+0x58>
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <wm8994_SetFrequency+0x60>)
 800230a:	4299      	cmp	r1, r3
 800230c:	d006      	beq.n	800231c <wm8994_SetFrequency+0x4c>
 800230e:	f5b1 4ffa 	cmp.w	r1, #32000	; 0x7d00
 8002312:	d10b      	bne.n	800232c <wm8994_SetFrequency+0x5c>
 AUDIO_IO_Write(Addr, Reg, Value);
 8002314:	2263      	movs	r2, #99	; 0x63
 8002316:	e7ed      	b.n	80022f4 <wm8994_SetFrequency+0x24>
 8002318:	2233      	movs	r2, #51	; 0x33
 800231a:	e7eb      	b.n	80022f4 <wm8994_SetFrequency+0x24>
 800231c:	22a3      	movs	r2, #163	; 0xa3
 800231e:	e7e9      	b.n	80022f4 <wm8994_SetFrequency+0x24>
 8002320:	2213      	movs	r2, #19
 8002322:	e7e7      	b.n	80022f4 <wm8994_SetFrequency+0x24>
 8002324:	2243      	movs	r2, #67	; 0x43
 8002326:	e7e5      	b.n	80022f4 <wm8994_SetFrequency+0x24>
 8002328:	2273      	movs	r2, #115	; 0x73
 800232a:	e7e3      	b.n	80022f4 <wm8994_SetFrequency+0x24>
 800232c:	2283      	movs	r2, #131	; 0x83
 800232e:	e7e1      	b.n	80022f4 <wm8994_SetFrequency+0x24>
 8002330:	00017700 	.word	0x00017700

08002334 <wm8994_Reset>:
 8002334:	2200      	movs	r2, #0
 8002336:	b2c0      	uxtb	r0, r0
{
 8002338:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 800233a:	4611      	mov	r1, r2
 800233c:	f000 fcaa 	bl	8002c94 <AUDIO_IO_Write>
  outputEnabled = 0;
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <wm8994_Reset+0x18>)
 8002342:	2000      	movs	r0, #0
  inputEnabled=0;
 8002344:	e9c3 0000 	strd	r0, r0, [r3]
}
 8002348:	bd08      	pop	{r3, pc}
 800234a:	bf00      	nop
 800234c:	20006a4c 	.word	0x20006a4c

08002350 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 8002350:	f000 bc9e 	b.w	8002c90 <AUDIO_IO_DeInit>

08002354 <wm8994_ReadID>:
{
 8002354:	b510      	push	{r4, lr}
 8002356:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8002358:	f000 fc94 	bl	8002c84 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 800235c:	2100      	movs	r1, #0
 800235e:	b2e0      	uxtb	r0, r4
 8002360:	f000 fcaa 	bl	8002cb8 <AUDIO_IO_Read>
}
 8002364:	bd10      	pop	{r4, pc}
	...

08002368 <wm8994_SetMute>:
  if (outputEnabled != 0)
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <wm8994_SetMute+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
{
 800236c:	b510      	push	{r4, lr}
  if (outputEnabled != 0)
 800236e:	b183      	cbz	r3, 8002392 <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 8002370:	2901      	cmp	r1, #1
 8002372:	b2c4      	uxtb	r4, r0
 8002374:	d10f      	bne.n	8002396 <wm8994_SetMute+0x2e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8002376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800237e:	4620      	mov	r0, r4
 8002380:	f000 fc88 	bl	8002c94 <AUDIO_IO_Write>
 8002384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002388:	f240 4122 	movw	r1, #1058	; 0x422
 800238c:	4620      	mov	r0, r4
 800238e:	f000 fc81 	bl	8002c94 <AUDIO_IO_Write>
}
 8002392:	2000      	movs	r0, #0
 8002394:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8002396:	2210      	movs	r2, #16
 8002398:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800239c:	4620      	mov	r0, r4
 800239e:	f000 fc79 	bl	8002c94 <AUDIO_IO_Write>
 80023a2:	2210      	movs	r2, #16
 80023a4:	e7f0      	b.n	8002388 <wm8994_SetMute+0x20>
 80023a6:	bf00      	nop
 80023a8:	20006a4c 	.word	0x20006a4c

080023ac <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80023ac:	2100      	movs	r1, #0
 80023ae:	f7ff bfdb 	b.w	8002368 <wm8994_SetMute>

080023b2 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80023b2:	2100      	movs	r1, #0
 80023b4:	f7ff bfd8 	b.w	8002368 <wm8994_SetMute>

080023b8 <wm8994_Pause>:
{  
 80023b8:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80023ba:	2101      	movs	r1, #1
{  
 80023bc:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80023be:	f7ff ffd3 	bl	8002368 <wm8994_SetMute>
 80023c2:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 80023c4:	2201      	movs	r2, #1
 80023c6:	b2e8      	uxtb	r0, r5
 80023c8:	2102      	movs	r1, #2
 80023ca:	f000 fc63 	bl	8002c94 <AUDIO_IO_Write>
}
 80023ce:	4620      	mov	r0, r4
 80023d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080023d4 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80023d4:	2964      	cmp	r1, #100	; 0x64
{
 80023d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023da:	f04f 0764 	mov.w	r7, #100	; 0x64
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80023de:	bf98      	it	ls
 80023e0:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
{
 80023e4:	4605      	mov	r5, r0
 80023e6:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80023e8:	bf98      	it	ls
 80023ea:	fb93 f7f7 	sdivls	r7, r3, r7
  if (outputEnabled != 0)
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <wm8994_SetVolume+0x100>)
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80023f0:	bf98      	it	ls
 80023f2:	b2ff      	uxtbls	r7, r7
  if (outputEnabled != 0)
 80023f4:	681e      	ldr	r6, [r3, #0]
 80023f6:	4699      	mov	r9, r3
 80023f8:	b326      	cbz	r6, 8002444 <wm8994_SetVolume+0x70>
    if(convertedvol > 0x3E)
 80023fa:	2f3e      	cmp	r7, #62	; 0x3e
 80023fc:	d91d      	bls.n	800243a <wm8994_SetVolume+0x66>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80023fe:	b2ef      	uxtb	r7, r5
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002400:	2100      	movs	r1, #0
 8002402:	f7ff ffb1 	bl	8002368 <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 8002406:	f240 127f 	movw	r2, #383	; 0x17f
 800240a:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800240c:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 800240e:	4638      	mov	r0, r7
 8002410:	f000 fc40 	bl	8002c94 <AUDIO_IO_Write>
 8002414:	f240 127f 	movw	r2, #383	; 0x17f
 8002418:	211d      	movs	r1, #29
 800241a:	4638      	mov	r0, r7
 800241c:	f000 fc3a 	bl	8002c94 <AUDIO_IO_Write>
 8002420:	f240 127f 	movw	r2, #383	; 0x17f
 8002424:	2126      	movs	r1, #38	; 0x26
 8002426:	4638      	mov	r0, r7
 8002428:	f000 fc34 	bl	8002c94 <AUDIO_IO_Write>
 800242c:	f240 127f 	movw	r2, #383	; 0x17f
 8002430:	2127      	movs	r1, #39	; 0x27
 8002432:	4638      	mov	r0, r7
 8002434:	f000 fc2e 	bl	8002c94 <AUDIO_IO_Write>
 8002438:	e004      	b.n	8002444 <wm8994_SetVolume+0x70>
    else if (Volume == 0)
 800243a:	bb79      	cbnz	r1, 800249c <wm8994_SetVolume+0xc8>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800243c:	2101      	movs	r1, #1
 800243e:	f7ff ff93 	bl	8002368 <wm8994_SetMute>
 8002442:	4606      	mov	r6, r0
  if (inputEnabled != 0)
 8002444:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002448:	b32b      	cbz	r3, 8002496 <wm8994_SetVolume+0xc2>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800244a:	2c63      	cmp	r4, #99	; 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800244c:	b2ed      	uxtb	r5, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 800244e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8002452:	bf9a      	itte	ls
 8002454:	ebc4 1404 	rsbls	r4, r4, r4, lsl #4
 8002458:	2364      	movls	r3, #100	; 0x64
 800245a:	24ef      	movhi	r4, #239	; 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
 800245c:	4628      	mov	r0, r5
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800245e:	bf9e      	ittt	ls
 8002460:	0124      	lslls	r4, r4, #4
 8002462:	fb94 f4f3 	sdivls	r4, r4, r3
 8002466:	b2e4      	uxtbls	r4, r4
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8002468:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
 800246c:	4622      	mov	r2, r4
 800246e:	f000 fc11 	bl	8002c94 <AUDIO_IO_Write>
 8002472:	4622      	mov	r2, r4
 8002474:	f240 4101 	movw	r1, #1025	; 0x401
 8002478:	4628      	mov	r0, r5
 800247a:	f000 fc0b 	bl	8002c94 <AUDIO_IO_Write>
 800247e:	4622      	mov	r2, r4
 8002480:	f240 4104 	movw	r1, #1028	; 0x404
 8002484:	4628      	mov	r0, r5
 8002486:	f000 fc05 	bl	8002c94 <AUDIO_IO_Write>
 800248a:	4622      	mov	r2, r4
 800248c:	f240 4105 	movw	r1, #1029	; 0x405
 8002490:	4628      	mov	r0, r5
 8002492:	f000 fbff 	bl	8002c94 <AUDIO_IO_Write>
}
 8002496:	4630      	mov	r0, r6
 8002498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800249c:	fa5f f885 	uxtb.w	r8, r5
 80024a0:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80024a4:	2100      	movs	r1, #0
 80024a6:	f7ff ff5f 	bl	8002368 <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 80024aa:	463a      	mov	r2, r7
 80024ac:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80024ae:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 80024b0:	4640      	mov	r0, r8
 80024b2:	f000 fbef 	bl	8002c94 <AUDIO_IO_Write>
 80024b6:	463a      	mov	r2, r7
 80024b8:	211d      	movs	r1, #29
 80024ba:	4640      	mov	r0, r8
 80024bc:	f000 fbea 	bl	8002c94 <AUDIO_IO_Write>
 80024c0:	463a      	mov	r2, r7
 80024c2:	2126      	movs	r1, #38	; 0x26
 80024c4:	4640      	mov	r0, r8
 80024c6:	f000 fbe5 	bl	8002c94 <AUDIO_IO_Write>
 80024ca:	463a      	mov	r2, r7
 80024cc:	2127      	movs	r1, #39	; 0x27
 80024ce:	4640      	mov	r0, r8
 80024d0:	e7b0      	b.n	8002434 <wm8994_SetVolume+0x60>
 80024d2:	bf00      	nop
 80024d4:	20006a4c 	.word	0x20006a4c

080024d8 <wm8994_Init>:
{
 80024d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024dc:	4681      	mov	r9, r0
 80024de:	461f      	mov	r7, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80024e0:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
{
 80024e4:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80024e6:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
 80024ea:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
 80024ec:	f000 fbca 	bl	8002c84 <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
 80024f0:	2203      	movs	r2, #3
 80024f2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80024f6:	4620      	mov	r0, r4
 80024f8:	f000 fbcc 	bl	8002c94 <AUDIO_IO_Write>
 80024fc:	2200      	movs	r2, #0
 80024fe:	f640 0117 	movw	r1, #2071	; 0x817
 8002502:	4620      	mov	r0, r4
 8002504:	f000 fbc6 	bl	8002c94 <AUDIO_IO_Write>
 8002508:	2200      	movs	r2, #0
 800250a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800250e:	4620      	mov	r0, r4
 8002510:	f000 fbc0 	bl	8002c94 <AUDIO_IO_Write>
 8002514:	226c      	movs	r2, #108	; 0x6c
 8002516:	2139      	movs	r1, #57	; 0x39
 8002518:	4620      	mov	r0, r4
 800251a:	f000 fbbb 	bl	8002c94 <AUDIO_IO_Write>
  if (input_device > 0)
 800251e:	b3c5      	cbz	r5, 8002592 <wm8994_Init+0xba>
 AUDIO_IO_Write(Addr, Reg, Value);
 8002520:	2213      	movs	r2, #19
 8002522:	2101      	movs	r1, #1
 8002524:	4620      	mov	r0, r4
 8002526:	f000 fbb5 	bl	8002c94 <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 800252a:	2032      	movs	r0, #50	; 0x32
 800252c:	f000 fbda 	bl	8002ce4 <AUDIO_IO_Delay>
 8002530:	f8df b4e4 	ldr.w	fp, [pc, #1252]	; 8002a18 <wm8994_Init+0x540>
  if (output_device > 0)
 8002534:	2e00      	cmp	r6, #0
 8002536:	f000 8082 	beq.w	800263e <wm8994_Init+0x166>
    outputEnabled = 1;
 800253a:	f04f 0801 	mov.w	r8, #1
    switch (output_device)
 800253e:	2e02      	cmp	r6, #2
    outputEnabled = 1;
 8002540:	f8cb 8000 	str.w	r8, [fp]
    switch (output_device)
 8002544:	d061      	beq.n	800260a <wm8994_Init+0x132>
 8002546:	2e03      	cmp	r6, #3
 8002548:	d025      	beq.n	8002596 <wm8994_Init+0xbe>
 800254a:	4546      	cmp	r6, r8
 800254c:	d15d      	bne.n	800260a <wm8994_Init+0x132>
 AUDIO_IO_Write(Addr, Reg, Value);
 800254e:	f640 420c 	movw	r2, #3084	; 0xc0c
 8002552:	2105      	movs	r1, #5
 8002554:	4620      	mov	r0, r4
 8002556:	f000 fb9d 	bl	8002c94 <AUDIO_IO_Write>
 800255a:	2200      	movs	r2, #0
 800255c:	f240 6101 	movw	r1, #1537	; 0x601
 8002560:	4620      	mov	r0, r4
 8002562:	f000 fb97 	bl	8002c94 <AUDIO_IO_Write>
 8002566:	2200      	movs	r2, #0
 8002568:	f240 6102 	movw	r1, #1538	; 0x602
 800256c:	4620      	mov	r0, r4
 800256e:	f000 fb91 	bl	8002c94 <AUDIO_IO_Write>
 8002572:	2202      	movs	r2, #2
 8002574:	f240 6104 	movw	r1, #1540	; 0x604
 8002578:	4620      	mov	r0, r4
 800257a:	f000 fb8b 	bl	8002c94 <AUDIO_IO_Write>
 800257e:	2202      	movs	r2, #2
 8002580:	f240 6105 	movw	r1, #1541	; 0x605
 8002584:	4620      	mov	r0, r4
 8002586:	f000 fb85 	bl	8002c94 <AUDIO_IO_Write>
  if (input_device > 0)
 800258a:	bb35      	cbnz	r5, 80025da <wm8994_Init+0x102>
    inputEnabled = 0;
 800258c:	f8cb 5004 	str.w	r5, [fp, #4]
 8002590:	e0b1      	b.n	80026f6 <wm8994_Init+0x21e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8002592:	2203      	movs	r2, #3
 8002594:	e7c5      	b.n	8002522 <wm8994_Init+0x4a>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002596:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 800259a:	f640 720f 	movw	r2, #3855	; 0xf0f
 800259e:	f04f 0105 	mov.w	r1, #5
 80025a2:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80025a4:	d127      	bne.n	80025f6 <wm8994_Init+0x11e>
 AUDIO_IO_Write(Addr, Reg, Value);
 80025a6:	f000 fb75 	bl	8002c94 <AUDIO_IO_Write>
 80025aa:	4632      	mov	r2, r6
 80025ac:	f240 6101 	movw	r1, #1537	; 0x601
 80025b0:	4620      	mov	r0, r4
 80025b2:	f000 fb6f 	bl	8002c94 <AUDIO_IO_Write>
 80025b6:	4632      	mov	r2, r6
 80025b8:	f240 6102 	movw	r1, #1538	; 0x602
 80025bc:	4620      	mov	r0, r4
 80025be:	f000 fb69 	bl	8002c94 <AUDIO_IO_Write>
 80025c2:	4632      	mov	r2, r6
 80025c4:	f240 6104 	movw	r1, #1540	; 0x604
 80025c8:	4620      	mov	r0, r4
 80025ca:	f000 fb63 	bl	8002c94 <AUDIO_IO_Write>
 80025ce:	4632      	mov	r2, r6
 80025d0:	f240 6105 	movw	r1, #1541	; 0x605
 80025d4:	4620      	mov	r0, r4
 80025d6:	f000 fb5d 	bl	8002c94 <AUDIO_IO_Write>
    inputEnabled = 1;
 80025da:	2301      	movs	r3, #1
    switch (input_device)
 80025dc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    inputEnabled = 1;
 80025e0:	f8cb 3004 	str.w	r3, [fp, #4]
    switch (input_device)
 80025e4:	d063      	beq.n	80026ae <wm8994_Init+0x1d6>
 80025e6:	d82d      	bhi.n	8002644 <wm8994_Init+0x16c>
 80025e8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80025ec:	f000 81b9 	beq.w	8002962 <wm8994_Init+0x48a>
      counter++;
 80025f0:	f04f 0801 	mov.w	r8, #1
 80025f4:	e081      	b.n	80026fa <wm8994_Init+0x222>
 AUDIO_IO_Write(Addr, Reg, Value);
 80025f6:	f000 fb4d 	bl	8002c94 <AUDIO_IO_Write>
 80025fa:	4642      	mov	r2, r8
 80025fc:	f240 6101 	movw	r1, #1537	; 0x601
 8002600:	4620      	mov	r0, r4
 8002602:	f000 fb47 	bl	8002c94 <AUDIO_IO_Write>
 8002606:	4642      	mov	r2, r8
 8002608:	e7ae      	b.n	8002568 <wm8994_Init+0x90>
 800260a:	f240 3203 	movw	r2, #771	; 0x303
 800260e:	2105      	movs	r1, #5
 8002610:	4620      	mov	r0, r4
 8002612:	f000 fb3f 	bl	8002c94 <AUDIO_IO_Write>
 8002616:	4642      	mov	r2, r8
 8002618:	f240 6101 	movw	r1, #1537	; 0x601
 800261c:	4620      	mov	r0, r4
 800261e:	f000 fb39 	bl	8002c94 <AUDIO_IO_Write>
 8002622:	4642      	mov	r2, r8
 8002624:	f240 6102 	movw	r1, #1538	; 0x602
 8002628:	4620      	mov	r0, r4
 800262a:	f000 fb33 	bl	8002c94 <AUDIO_IO_Write>
 800262e:	2200      	movs	r2, #0
 8002630:	f240 6104 	movw	r1, #1540	; 0x604
 8002634:	4620      	mov	r0, r4
 8002636:	f000 fb2d 	bl	8002c94 <AUDIO_IO_Write>
 800263a:	2200      	movs	r2, #0
 800263c:	e7a0      	b.n	8002580 <wm8994_Init+0xa8>
    outputEnabled = 0;
 800263e:	f8cb 6000 	str.w	r6, [fp]
 8002642:	e7a2      	b.n	800258a <wm8994_Init+0xb2>
    switch (input_device)
 8002644:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8002648:	f000 815c 	beq.w	8002904 <wm8994_Init+0x42c>
 800264c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002650:	d1ce      	bne.n	80025f0 <wm8994_Init+0x118>
 AUDIO_IO_Write(Addr, Reg, Value);
 8002652:	f640 723c 	movw	r2, #3900	; 0xf3c
 8002656:	2104      	movs	r1, #4
 8002658:	4620      	mov	r0, r4
 800265a:	f000 fb1b 	bl	8002c94 <AUDIO_IO_Write>
 800265e:	22db      	movs	r2, #219	; 0xdb
 8002660:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8002664:	4620      	mov	r0, r4
 8002666:	f000 fb15 	bl	8002c94 <AUDIO_IO_Write>
 800266a:	22db      	movs	r2, #219	; 0xdb
 800266c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002670:	4620      	mov	r0, r4
 8002672:	f000 fb0f 	bl	8002c94 <AUDIO_IO_Write>
 8002676:	f246 32a0 	movw	r2, #25504	; 0x63a0
 800267a:	2102      	movs	r1, #2
 800267c:	4620      	mov	r0, r4
 800267e:	f000 fb09 	bl	8002c94 <AUDIO_IO_Write>
 8002682:	2202      	movs	r2, #2
 8002684:	f240 6106 	movw	r1, #1542	; 0x606
 8002688:	4620      	mov	r0, r4
 800268a:	f000 fb03 	bl	8002c94 <AUDIO_IO_Write>
 800268e:	2202      	movs	r2, #2
 8002690:	f240 6107 	movw	r1, #1543	; 0x607
 8002694:	4620      	mov	r0, r4
 8002696:	f000 fafd 	bl	8002c94 <AUDIO_IO_Write>
 800269a:	2202      	movs	r2, #2
 800269c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80026a0:	4620      	mov	r0, r4
 80026a2:	f000 faf7 	bl	8002c94 <AUDIO_IO_Write>
 80026a6:	2202      	movs	r2, #2
 80026a8:	f240 6109 	movw	r1, #1545	; 0x609
 80026ac:	e154      	b.n	8002958 <wm8994_Init+0x480>
 80026ae:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80026b2:	2104      	movs	r1, #4
 80026b4:	4620      	mov	r0, r4
 80026b6:	f000 faed 	bl	8002c94 <AUDIO_IO_Write>
 80026ba:	22db      	movs	r2, #219	; 0xdb
 80026bc:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80026c0:	4620      	mov	r0, r4
 80026c2:	f000 fae7 	bl	8002c94 <AUDIO_IO_Write>
 80026c6:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80026ca:	2102      	movs	r1, #2
 80026cc:	4620      	mov	r0, r4
 80026ce:	f000 fae1 	bl	8002c94 <AUDIO_IO_Write>
 80026d2:	2202      	movs	r2, #2
 80026d4:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80026d8:	4620      	mov	r0, r4
 80026da:	f000 fadb 	bl	8002c94 <AUDIO_IO_Write>
 80026de:	2202      	movs	r2, #2
 80026e0:	f240 6109 	movw	r1, #1545	; 0x609
 80026e4:	4620      	mov	r0, r4
 80026e6:	f000 fad5 	bl	8002c94 <AUDIO_IO_Write>
 80026ea:	220e      	movs	r2, #14
 80026ec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80026f0:	4620      	mov	r0, r4
 80026f2:	f000 facf 	bl	8002c94 <AUDIO_IO_Write>
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80026f6:	f04f 0800 	mov.w	r8, #0
  switch (AudioFreq)
 80026fa:	f245 6322 	movw	r3, #22050	; 0x5622
 80026fe:	429f      	cmp	r7, r3
 8002700:	f000 814b 	beq.w	800299a <wm8994_Init+0x4c2>
 8002704:	f200 8130 	bhi.w	8002968 <wm8994_Init+0x490>
 8002708:	f642 3311 	movw	r3, #11025	; 0x2b11
 800270c:	429f      	cmp	r7, r3
 800270e:	f000 8142 	beq.w	8002996 <wm8994_Init+0x4be>
 8002712:	f5b7 5f7a 	cmp.w	r7, #16000	; 0x3e80
 8002716:	f000 813a 	beq.w	800298e <wm8994_Init+0x4b6>
 800271a:	f5b7 5ffa 	cmp.w	r7, #8000	; 0x1f40
 800271e:	f040 812b 	bne.w	8002978 <wm8994_Init+0x4a0>
 AUDIO_IO_Write(Addr, Reg, Value);
 8002722:	2203      	movs	r2, #3
 8002724:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002728:	4620      	mov	r0, r4
 800272a:	f000 fab3 	bl	8002c94 <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800272e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8002732:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002736:	4620      	mov	r0, r4
 8002738:	bf0c      	ite	eq
 800273a:	f244 0218 	movweq	r2, #16408	; 0x4018
 800273e:	f244 0210 	movwne	r2, #16400	; 0x4010
 8002742:	f000 faa7 	bl	8002c94 <AUDIO_IO_Write>
 8002746:	2200      	movs	r2, #0
 8002748:	f240 3102 	movw	r1, #770	; 0x302
 800274c:	4620      	mov	r0, r4
 800274e:	f000 faa1 	bl	8002c94 <AUDIO_IO_Write>
 8002752:	220a      	movs	r2, #10
 8002754:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002758:	4620      	mov	r0, r4
 800275a:	f000 fa9b 	bl	8002c94 <AUDIO_IO_Write>
 800275e:	2201      	movs	r2, #1
 8002760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002764:	4620      	mov	r0, r4
 8002766:	f000 fa95 	bl	8002c94 <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 800276a:	2e00      	cmp	r6, #0
 800276c:	f000 80a9 	beq.w	80028c2 <wm8994_Init+0x3ea>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8002770:	2e02      	cmp	r6, #2
 8002772:	d123      	bne.n	80027bc <wm8994_Init+0x2e4>
 AUDIO_IO_Write(Addr, Reg, Value);
 8002774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002778:	212d      	movs	r1, #45	; 0x2d
 800277a:	4620      	mov	r0, r4
      if(ColdStartup)
 800277c:	4ea4      	ldr	r6, [pc, #656]	; (8002a10 <wm8994_Init+0x538>)
 AUDIO_IO_Write(Addr, Reg, Value);
 800277e:	f000 fa89 	bl	8002c94 <AUDIO_IO_Write>
 8002782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002786:	212e      	movs	r1, #46	; 0x2e
 8002788:	4620      	mov	r0, r4
 800278a:	f000 fa83 	bl	8002c94 <AUDIO_IO_Write>
      if(ColdStartup)
 800278e:	7833      	ldrb	r3, [r6, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 8106 	beq.w	80029a2 <wm8994_Init+0x4ca>
 AUDIO_IO_Write(Addr, Reg, Value);
 8002796:	4620      	mov	r0, r4
 8002798:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 800279c:	f44f 7188 	mov.w	r1, #272	; 0x110
 80027a0:	f000 fa78 	bl	8002c94 <AUDIO_IO_Write>
        ColdStartup=0;
 80027a4:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
 80027a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
        ColdStartup=0;
 80027aa:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(50);
 80027ac:	f000 fa9a 	bl	8002ce4 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 80027b0:	2200      	movs	r2, #0
 80027b2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80027b6:	4620      	mov	r0, r4
 80027b8:	f000 fa6c 	bl	8002c94 <AUDIO_IO_Write>
 80027bc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80027c0:	2103      	movs	r1, #3
 80027c2:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80027c4:	f243 3603 	movw	r6, #13059	; 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
 80027c8:	f000 fa64 	bl	8002c94 <AUDIO_IO_Write>
 80027cc:	2200      	movs	r2, #0
 80027ce:	2122      	movs	r1, #34	; 0x22
 80027d0:	4620      	mov	r0, r4
 80027d2:	f000 fa5f 	bl	8002c94 <AUDIO_IO_Write>
 80027d6:	2200      	movs	r2, #0
 80027d8:	2123      	movs	r1, #35	; 0x23
 80027da:	4620      	mov	r0, r4
 80027dc:	f000 fa5a 	bl	8002c94 <AUDIO_IO_Write>
 80027e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80027e4:	2136      	movs	r1, #54	; 0x36
 80027e6:	4620      	mov	r0, r4
 80027e8:	f000 fa54 	bl	8002c94 <AUDIO_IO_Write>
 80027ec:	f243 0203 	movw	r2, #12291	; 0x3003
 80027f0:	2101      	movs	r1, #1
 80027f2:	4620      	mov	r0, r4
 80027f4:	f000 fa4e 	bl	8002c94 <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80027f8:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 80027fc:	f04f 0151 	mov.w	r1, #81	; 0x51
 8002800:	4620      	mov	r0, r4
 8002802:	bf0c      	ite	eq
 8002804:	f240 2205 	movweq	r2, #517	; 0x205
 8002808:	2205      	movne	r2, #5
 800280a:	f000 fa43 	bl	8002c94 <AUDIO_IO_Write>
 800280e:	f243 3203 	movw	r2, #13059	; 0x3303
 8002812:	2101      	movs	r1, #1
 8002814:	4620      	mov	r0, r4
 8002816:	f000 fa3d 	bl	8002c94 <AUDIO_IO_Write>
 800281a:	2222      	movs	r2, #34	; 0x22
 800281c:	2160      	movs	r1, #96	; 0x60
 800281e:	4620      	mov	r0, r4
 8002820:	f000 fa38 	bl	8002c94 <AUDIO_IO_Write>
 8002824:	f649 7225 	movw	r2, #40741	; 0x9f25
 8002828:	214c      	movs	r1, #76	; 0x4c
 800282a:	4620      	mov	r0, r4
 800282c:	f000 fa32 	bl	8002c94 <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 8002830:	200f      	movs	r0, #15
 8002832:	f000 fa57 	bl	8002ce4 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8002836:	2201      	movs	r2, #1
 8002838:	212d      	movs	r1, #45	; 0x2d
 800283a:	4620      	mov	r0, r4
 800283c:	f000 fa2a 	bl	8002c94 <AUDIO_IO_Write>
 8002840:	2201      	movs	r2, #1
 8002842:	212e      	movs	r1, #46	; 0x2e
 8002844:	4620      	mov	r0, r4
 8002846:	f000 fa25 	bl	8002c94 <AUDIO_IO_Write>
 800284a:	f44f 724c 	mov.w	r2, #816	; 0x330
 800284e:	2103      	movs	r1, #3
 8002850:	4620      	mov	r0, r4
 8002852:	f000 fa1f 	bl	8002c94 <AUDIO_IO_Write>
 8002856:	2233      	movs	r2, #51	; 0x33
 8002858:	2154      	movs	r1, #84	; 0x54
 800285a:	4620      	mov	r0, r4
 800285c:	f000 fa1a 	bl	8002c94 <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
 8002860:	f240 1001 	movw	r0, #257	; 0x101
 8002864:	f000 fa3e 	bl	8002ce4 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8002868:	22ee      	movs	r2, #238	; 0xee
 800286a:	2160      	movs	r1, #96	; 0x60
 800286c:	4620      	mov	r0, r4
 800286e:	f000 fa11 	bl	8002c94 <AUDIO_IO_Write>
 8002872:	22c0      	movs	r2, #192	; 0xc0
 8002874:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8002878:	4620      	mov	r0, r4
 800287a:	f000 fa0b 	bl	8002c94 <AUDIO_IO_Write>
 800287e:	22c0      	movs	r2, #192	; 0xc0
 8002880:	f240 6111 	movw	r1, #1553	; 0x611
 8002884:	4620      	mov	r0, r4
 8002886:	f000 fa05 	bl	8002c94 <AUDIO_IO_Write>
 800288a:	2210      	movs	r2, #16
 800288c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002890:	4620      	mov	r0, r4
 8002892:	f000 f9ff 	bl	8002c94 <AUDIO_IO_Write>
 8002896:	22c0      	movs	r2, #192	; 0xc0
 8002898:	f240 6112 	movw	r1, #1554	; 0x612
 800289c:	4620      	mov	r0, r4
 800289e:	f000 f9f9 	bl	8002c94 <AUDIO_IO_Write>
 80028a2:	22c0      	movs	r2, #192	; 0xc0
 80028a4:	f240 6113 	movw	r1, #1555	; 0x613
 80028a8:	4620      	mov	r0, r4
 80028aa:	f000 f9f3 	bl	8002c94 <AUDIO_IO_Write>
 80028ae:	2210      	movs	r2, #16
 80028b0:	f240 4122 	movw	r1, #1058	; 0x422
 80028b4:	4620      	mov	r0, r4
 80028b6:	f000 f9ed 	bl	8002c94 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 80028ba:	4651      	mov	r1, sl
 80028bc:	4648      	mov	r0, r9
 80028be:	f7ff fd89 	bl	80023d4 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
 80028c2:	b1e5      	cbz	r5, 80028fe <wm8994_Init+0x426>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80028c4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80028c8:	d002      	beq.n	80028d0 <wm8994_Init+0x3f8>
 80028ca:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80028ce:	d171      	bne.n	80029b4 <wm8994_Init+0x4dc>
 AUDIO_IO_Write(Addr, Reg, Value);
 80028d0:	f046 0213 	orr.w	r2, r6, #19
 80028d4:	2101      	movs	r1, #1
 80028d6:	4620      	mov	r0, r4
 80028d8:	f000 f9dc 	bl	8002c94 <AUDIO_IO_Write>
 80028dc:	2202      	movs	r2, #2
 80028de:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80028e2:	4620      	mov	r0, r4
 80028e4:	f000 f9d6 	bl	8002c94 <AUDIO_IO_Write>
 80028e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028ec:	f240 4111 	movw	r1, #1041	; 0x411
 80028f0:	4620      	mov	r0, r4
 80028f2:	f000 f9cf 	bl	8002c94 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 80028f6:	4651      	mov	r1, sl
 80028f8:	4648      	mov	r0, r9
 80028fa:	f7ff fd6b 	bl	80023d4 <wm8994_SetVolume>
}
 80028fe:	4640      	mov	r0, r8
 8002900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8002904:	2211      	movs	r2, #17
 8002906:	2128      	movs	r1, #40	; 0x28
 8002908:	4620      	mov	r0, r4
 800290a:	f000 f9c3 	bl	8002c94 <AUDIO_IO_Write>
 800290e:	2235      	movs	r2, #53	; 0x35
 8002910:	2129      	movs	r1, #41	; 0x29
 8002912:	4620      	mov	r0, r4
 8002914:	f000 f9be 	bl	8002c94 <AUDIO_IO_Write>
 8002918:	2235      	movs	r2, #53	; 0x35
 800291a:	212a      	movs	r1, #42	; 0x2a
 800291c:	4620      	mov	r0, r4
 800291e:	f000 f9b9 	bl	8002c94 <AUDIO_IO_Write>
 8002922:	f240 3203 	movw	r2, #771	; 0x303
 8002926:	2104      	movs	r1, #4
 8002928:	4620      	mov	r0, r4
 800292a:	f000 f9b3 	bl	8002c94 <AUDIO_IO_Write>
 800292e:	22db      	movs	r2, #219	; 0xdb
 8002930:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002934:	4620      	mov	r0, r4
 8002936:	f000 f9ad 	bl	8002c94 <AUDIO_IO_Write>
 800293a:	f246 3250 	movw	r2, #25424	; 0x6350
 800293e:	2102      	movs	r1, #2
 8002940:	4620      	mov	r0, r4
 8002942:	f000 f9a7 	bl	8002c94 <AUDIO_IO_Write>
 8002946:	2202      	movs	r2, #2
 8002948:	f240 6106 	movw	r1, #1542	; 0x606
 800294c:	4620      	mov	r0, r4
 800294e:	f000 f9a1 	bl	8002c94 <AUDIO_IO_Write>
 8002952:	2202      	movs	r2, #2
 8002954:	f240 6107 	movw	r1, #1543	; 0x607
 8002958:	4620      	mov	r0, r4
 800295a:	f000 f99b 	bl	8002c94 <AUDIO_IO_Write>
 800295e:	220d      	movs	r2, #13
 8002960:	e6c4      	b.n	80026ec <wm8994_Init+0x214>
 8002962:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8002966:	e7de      	b.n	8002926 <wm8994_Init+0x44e>
  switch (AudioFreq)
 8002968:	f64a 4344 	movw	r3, #44100	; 0xac44
 800296c:	429f      	cmp	r7, r3
 800296e:	d016      	beq.n	800299e <wm8994_Init+0x4c6>
 8002970:	d804      	bhi.n	800297c <wm8994_Init+0x4a4>
 8002972:	f5b7 4ffa 	cmp.w	r7, #32000	; 0x7d00
 8002976:	d00c      	beq.n	8002992 <wm8994_Init+0x4ba>
 AUDIO_IO_Write(Addr, Reg, Value);
 8002978:	2283      	movs	r2, #131	; 0x83
 800297a:	e6d3      	b.n	8002724 <wm8994_Init+0x24c>
  switch (AudioFreq)
 800297c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002980:	429f      	cmp	r7, r3
 8002982:	d0f9      	beq.n	8002978 <wm8994_Init+0x4a0>
 8002984:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <wm8994_Init+0x53c>)
 8002986:	429f      	cmp	r7, r3
 8002988:	d1f6      	bne.n	8002978 <wm8994_Init+0x4a0>
 AUDIO_IO_Write(Addr, Reg, Value);
 800298a:	22a3      	movs	r2, #163	; 0xa3
 800298c:	e6ca      	b.n	8002724 <wm8994_Init+0x24c>
 800298e:	2233      	movs	r2, #51	; 0x33
 8002990:	e6c8      	b.n	8002724 <wm8994_Init+0x24c>
 8002992:	2263      	movs	r2, #99	; 0x63
 8002994:	e6c6      	b.n	8002724 <wm8994_Init+0x24c>
 8002996:	2213      	movs	r2, #19
 8002998:	e6c4      	b.n	8002724 <wm8994_Init+0x24c>
 800299a:	2243      	movs	r2, #67	; 0x43
 800299c:	e6c2      	b.n	8002724 <wm8994_Init+0x24c>
 800299e:	2273      	movs	r2, #115	; 0x73
 80029a0:	e6c0      	b.n	8002724 <wm8994_Init+0x24c>
 80029a2:	4620      	mov	r0, r4
 80029a4:	f248 1208 	movw	r2, #33032	; 0x8108
 80029a8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80029ac:	f000 f972 	bl	8002c94 <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
 80029b0:	2032      	movs	r0, #50	; 0x32
 80029b2:	e6fb      	b.n	80027ac <wm8994_Init+0x2d4>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80029b4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80029b8:	d115      	bne.n	80029e6 <wm8994_Init+0x50e>
 AUDIO_IO_Write(Addr, Reg, Value);
 80029ba:	f046 0213 	orr.w	r2, r6, #19
 80029be:	2101      	movs	r1, #1
 80029c0:	4620      	mov	r0, r4
 80029c2:	f000 f967 	bl	8002c94 <AUDIO_IO_Write>
 80029c6:	2202      	movs	r2, #2
 80029c8:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80029cc:	4620      	mov	r0, r4
 80029ce:	f000 f961 	bl	8002c94 <AUDIO_IO_Write>
 80029d2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80029d6:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80029da:	4620      	mov	r0, r4
 80029dc:	f000 f95a 	bl	8002c94 <AUDIO_IO_Write>
 80029e0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80029e4:	e782      	b.n	80028ec <wm8994_Init+0x414>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80029e6:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 80029ea:	d002      	beq.n	80029f2 <wm8994_Init+0x51a>
 80029ec:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80029f0:	d181      	bne.n	80028f6 <wm8994_Init+0x41e>
 AUDIO_IO_Write(Addr, Reg, Value);
 80029f2:	220b      	movs	r2, #11
 80029f4:	2118      	movs	r1, #24
 80029f6:	4620      	mov	r0, r4
 80029f8:	f000 f94c 	bl	8002c94 <AUDIO_IO_Write>
 80029fc:	220b      	movs	r2, #11
 80029fe:	211a      	movs	r1, #26
 8002a00:	4620      	mov	r0, r4
 8002a02:	f000 f947 	bl	8002c94 <AUDIO_IO_Write>
 8002a06:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002a0a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002a0e:	e76f      	b.n	80028f0 <wm8994_Init+0x418>
 8002a10:	20000054 	.word	0x20000054
 8002a14:	00017700 	.word	0x00017700
 8002a18:	20006a4c 	.word	0x20006a4c

08002a1c <wm8994_Stop>:
{
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
 8002a1e:	4e19      	ldr	r6, [pc, #100]	; (8002a84 <wm8994_Stop+0x68>)
{
 8002a20:	4604      	mov	r4, r0
 8002a22:	460f      	mov	r7, r1
  if (outputEnabled != 0)
 8002a24:	6835      	ldr	r5, [r6, #0]
 8002a26:	b355      	cbz	r5, 8002a7e <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002a28:	2101      	movs	r1, #1
 8002a2a:	f7ff fc9d 	bl	8002368 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8002a2e:	2f02      	cmp	r7, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002a30:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8002a32:	d024      	beq.n	8002a7e <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002a34:	b2e4      	uxtb	r4, r4
 AUDIO_IO_Write(Addr, Reg, Value);
 8002a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f000 f928 	bl	8002c94 <AUDIO_IO_Write>
 8002a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a48:	f240 4122 	movw	r1, #1058	; 0x422
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f000 f921 	bl	8002c94 <AUDIO_IO_Write>
 8002a52:	2200      	movs	r2, #0
 8002a54:	212d      	movs	r1, #45	; 0x2d
 8002a56:	4620      	mov	r0, r4
 8002a58:	f000 f91c 	bl	8002c94 <AUDIO_IO_Write>
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	212e      	movs	r1, #46	; 0x2e
 8002a60:	4620      	mov	r0, r4
 8002a62:	f000 f917 	bl	8002c94 <AUDIO_IO_Write>
 8002a66:	2200      	movs	r2, #0
 8002a68:	2105      	movs	r1, #5
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f000 f912 	bl	8002c94 <AUDIO_IO_Write>
 8002a70:	2200      	movs	r2, #0
 8002a72:	4620      	mov	r0, r4
 8002a74:	4611      	mov	r1, r2
 8002a76:	f000 f90d 	bl	8002c94 <AUDIO_IO_Write>
      outputEnabled = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	6033      	str	r3, [r6, #0]
}
 8002a7e:	4628      	mov	r0, r5
 8002a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20006a4c 	.word	0x20006a4c

08002a88 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002a8e:	f003 f92b 	bl	8005ce8 <HAL_I2C_GetState>
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d155      	bne.n	8002b42 <I2Cx_Init+0xba>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002a96:	4b4a      	ldr	r3, [pc, #296]	; (8002bc0 <I2Cx_Init+0x138>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8002a98:	2600      	movs	r6, #0
 8002a9a:	4c4a      	ldr	r4, [pc, #296]	; (8002bc4 <I2Cx_Init+0x13c>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002a9c:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8002a9e:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002aa0:	bf0c      	ite	eq
 8002aa2:	4a49      	ldreq	r2, [pc, #292]	; (8002bc8 <I2Cx_Init+0x140>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002aa4:	4a49      	ldrne	r2, [pc, #292]	; (8002bcc <I2Cx_Init+0x144>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002aa6:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002aa8:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 8002aaa:	4a49      	ldr	r2, [pc, #292]	; (8002bd0 <I2Cx_Init+0x148>)
 8002aac:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002ab0:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002ab4:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002ab8:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002abc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002abe:	d142      	bne.n	8002b46 <I2Cx_Init+0xbe>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002ac4:	2080      	movs	r0, #128	; 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002ac6:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002aca:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002acc:	6323      	str	r3, [r4, #48]	; 0x30
 8002ace:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002ad0:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002ada:	2312      	movs	r3, #18
 8002adc:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002ae0:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ae2:	483c      	ldr	r0, [pc, #240]	; (8002bd4 <I2Cx_Init+0x14c>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002ae4:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ae8:	f002 f8c0 	bl	8004c6c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002aec:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002af0:	a905      	add	r1, sp, #20
 8002af2:	4838      	ldr	r0, [pc, #224]	; (8002bd4 <I2Cx_Init+0x14c>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002af4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002af6:	f002 f8b9 	bl	8004c6c <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002afc:	4632      	mov	r2, r6
 8002afe:	210f      	movs	r1, #15
 8002b00:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002b02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b06:	6423      	str	r3, [r4, #64]	; 0x40
 8002b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b0e:	9302      	str	r3, [sp, #8]
 8002b10:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002b12:	6a23      	ldr	r3, [r4, #32]
 8002b14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b18:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002b1a:	6a23      	ldr	r3, [r4, #32]
 8002b1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b20:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002b22:	f001 fceb 	bl	80044fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002b26:	2048      	movs	r0, #72	; 0x48
 8002b28:	f001 fd1a 	bl	8004560 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002b2c:	2049      	movs	r0, #73	; 0x49
 8002b2e:	4632      	mov	r2, r6
 8002b30:	210f      	movs	r1, #15
 8002b32:	f001 fce3 	bl	80044fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002b36:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002b38:	f001 fd12 	bl	8004560 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f002 fefa 	bl	8005936 <HAL_I2C_Init>
  }
}
 8002b42:	b00a      	add	sp, #40	; 0x28
 8002b44:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002b46:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002b4e:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002b50:	4821      	ldr	r0, [pc, #132]	; (8002bd8 <I2Cx_Init+0x150>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002b52:	6323      	str	r3, [r4, #48]	; 0x30
 8002b54:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002b56:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	9303      	str	r3, [sp, #12]
 8002b5e:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002b60:	2312      	movs	r3, #18
 8002b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002b66:	2304      	movs	r3, #4
 8002b68:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002b6c:	a905      	add	r1, sp, #20
 8002b6e:	f002 f87d 	bl	8004c6c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002b72:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002b76:	a905      	add	r1, sp, #20
 8002b78:	4817      	ldr	r0, [pc, #92]	; (8002bd8 <I2Cx_Init+0x150>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002b7a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002b7c:	f002 f876 	bl	8004c6c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002b82:	4632      	mov	r2, r6
 8002b84:	210f      	movs	r1, #15
 8002b86:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002b88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b8c:	6423      	str	r3, [r4, #64]	; 0x40
 8002b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b94:	9304      	str	r3, [sp, #16]
 8002b96:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002b98:	6a23      	ldr	r3, [r4, #32]
 8002b9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b9e:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002ba0:	6a23      	ldr	r3, [r4, #32]
 8002ba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ba6:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002ba8:	f001 fca8 	bl	80044fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002bac:	201f      	movs	r0, #31
 8002bae:	f001 fcd7 	bl	8004560 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002bb2:	2020      	movs	r0, #32
 8002bb4:	4632      	mov	r2, r6
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	f001 fca0 	bl	80044fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002bbc:	2020      	movs	r0, #32
 8002bbe:	e7bb      	b.n	8002b38 <I2Cx_Init+0xb0>
 8002bc0:	20006a54 	.word	0x20006a54
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40005c00 	.word	0x40005c00
 8002bcc:	40005400 	.word	0x40005400
 8002bd0:	40912732 	.word	0x40912732
 8002bd4:	40021c00 	.word	0x40021c00
 8002bd8:	40020400 	.word	0x40020400

08002bdc <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002bdc:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002bde:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8002be2:	b085      	sub	sp, #20
 8002be4:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002be6:	9402      	str	r4, [sp, #8]
 8002be8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8002bec:	9401      	str	r4, [sp, #4]
 8002bee:	9c08      	ldr	r4, [sp, #32]
 8002bf0:	9400      	str	r4, [sp, #0]
 8002bf2:	f002 ff0b 	bl	8005a0c <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	b128      	cbz	r0, 8002c06 <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	f002 feed 	bl	80059da <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002c00:	4628      	mov	r0, r5
 8002c02:	f7ff ff41 	bl	8002a88 <I2Cx_Init>
}
 8002c06:	4620      	mov	r0, r4
 8002c08:	b005      	add	sp, #20
 8002c0a:	bd30      	pop	{r4, r5, pc}

08002c0c <I2Cx_ReadMultiple>:
{
 8002c0c:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002c0e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8002c12:	b085      	sub	sp, #20
 8002c14:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002c16:	9402      	str	r4, [sp, #8]
 8002c18:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8002c1c:	9401      	str	r4, [sp, #4]
 8002c1e:	9c08      	ldr	r4, [sp, #32]
 8002c20:	9400      	str	r4, [sp, #0]
 8002c22:	f002 ffa7 	bl	8005b74 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8002c26:	4604      	mov	r4, r0
 8002c28:	b128      	cbz	r0, 8002c36 <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	f002 fed5 	bl	80059da <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8002c30:	4628      	mov	r0, r5
 8002c32:	f7ff ff29 	bl	8002a88 <I2Cx_Init>
}
 8002c36:	4620      	mov	r0, r4
 8002c38:	b005      	add	sp, #20
 8002c3a:	bd30      	pop	{r4, r5, pc}

08002c3c <BSP_LED_Init>:
{
 8002c3c:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
 8002c3e:	4605      	mov	r5, r0
{
 8002c40:	b087      	sub	sp, #28
  if (Led == LED1)
 8002c42:	b9c8      	cbnz	r0, 8002c78 <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
 8002c44:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	2402      	movs	r4, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8002c48:	480d      	ldr	r0, [pc, #52]	; (8002c80 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 8002c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c4c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002c50:	6319      	str	r1, [r3, #48]	; 0x30
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8002c52:	a901      	add	r1, sp, #4
    LED1_GPIO_CLK_ENABLE();
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e9cd 4301 	strd	r4, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002c64:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002c66:	2303      	movs	r3, #3
 8002c68:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8002c6a:	f001 ffff 	bl	8004c6c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8002c6e:	462a      	mov	r2, r5
 8002c70:	4621      	mov	r1, r4
 8002c72:	4803      	ldr	r0, [pc, #12]	; (8002c80 <BSP_LED_Init+0x44>)
 8002c74:	f002 f8e8 	bl	8004e48 <HAL_GPIO_WritePin>
}
 8002c78:	b007      	add	sp, #28
 8002c7a:	bd30      	pop	{r4, r5, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40022000 	.word	0x40022000

08002c84 <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 8002c84:	4801      	ldr	r0, [pc, #4]	; (8002c8c <AUDIO_IO_Init+0x8>)
 8002c86:	f7ff beff 	b.w	8002a88 <I2Cx_Init>
 8002c8a:	bf00      	nop
 8002c8c:	20006a54 	.word	0x20006a54

08002c90 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 8002c90:	4770      	bx	lr
	...

08002c94 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8002c96:	ba52      	rev16	r2, r2
 8002c98:	ac04      	add	r4, sp, #16
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8002c9a:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8002c9c:	f824 2d02 	strh.w	r2, [r4, #-2]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8002ca0:	460a      	mov	r2, r1
 8002ca2:	4601      	mov	r1, r0
 8002ca4:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <AUDIO_IO_Write+0x20>)
 8002ca6:	e9cd 4300 	strd	r4, r3, [sp]
 8002caa:	f7ff ff97 	bl	8002bdc <I2Cx_WriteMultiple>
}
 8002cae:	b004      	add	sp, #16
 8002cb0:	bd10      	pop	{r4, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20006a54 	.word	0x20006a54

08002cb8 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8002cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	aa04      	add	r2, sp, #16
 8002cbe:	f822 3d02 	strh.w	r3, [r2, #-2]!
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e9cd 2300 	strd	r2, r3, [sp]
 8002cc8:	460a      	mov	r2, r1
 8002cca:	4601      	mov	r1, r0
 8002ccc:	4804      	ldr	r0, [pc, #16]	; (8002ce0 <AUDIO_IO_Read+0x28>)
 8002cce:	f7ff ff9d 	bl	8002c0c <I2Cx_ReadMultiple>
 8002cd2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8002cd6:	ba40      	rev16	r0, r0
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
  
  read_value = tmp;
  
  return read_value;
}
 8002cd8:	b280      	uxth	r0, r0
 8002cda:	b005      	add	sp, #20
 8002cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ce0:	20006a54 	.word	0x20006a54

08002ce4 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8002ce4:	f001 bbe6 	b.w	80044b4 <HAL_Delay>

08002ce8 <TS_IO_Init>:
 8002ce8:	f7ff bfcc 	b.w	8002c84 <AUDIO_IO_Init>

08002cec <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002cee:	ac04      	add	r4, sp, #16
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002cf0:	2301      	movs	r3, #1
{
 8002cf2:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002cf6:	460a      	mov	r2, r1
 8002cf8:	4601      	mov	r1, r0
 8002cfa:	4803      	ldr	r0, [pc, #12]	; (8002d08 <TS_IO_Write+0x1c>)
 8002cfc:	e9cd 4300 	strd	r4, r3, [sp]
 8002d00:	f7ff ff6c 	bl	8002bdc <I2Cx_WriteMultiple>
}
 8002d04:	b004      	add	sp, #16
 8002d06:	bd10      	pop	{r4, pc}
 8002d08:	20006a54 	.word	0x20006a54

08002d0c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	aa04      	add	r2, sp, #16
 8002d12:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002d16:	2301      	movs	r3, #1
 8002d18:	e9cd 2300 	strd	r2, r3, [sp]
 8002d1c:	460a      	mov	r2, r1
 8002d1e:	4601      	mov	r1, r0
 8002d20:	4803      	ldr	r0, [pc, #12]	; (8002d30 <TS_IO_Read+0x24>)
 8002d22:	f7ff ff73 	bl	8002c0c <I2Cx_ReadMultiple>

  return read_value;
}
 8002d26:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8002d2a:	b005      	add	sp, #20
 8002d2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d30:	20006a54 	.word	0x20006a54

08002d34 <TS_IO_Delay>:
 8002d34:	f001 bbbe 	b.w	80044b4 <HAL_Delay>

08002d38 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <SAIx_Out_DeInit+0x14>)
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <SAIx_Out_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002d3c:	681a      	ldr	r2, [r3, #0]
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002d3e:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002d40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d44:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8002d46:	f004 b880 	b.w	8006e4a <HAL_SAI_DeInit>
 8002d4a:	bf00      	nop
 8002d4c:	40015c04 	.word	0x40015c04
 8002d50:	20006aec 	.word	0x20006aec

08002d54 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <SAIx_In_DeInit+0x14>)
 8002d56:	4805      	ldr	r0, [pc, #20]	; (8002d6c <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002d58:	681a      	ldr	r2, [r3, #0]
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002d5a:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002d5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d62:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8002d64:	f004 b871 	b.w	8006e4a <HAL_SAI_DeInit>
 8002d68:	40015c24 	.word	0x40015c24
 8002d6c:	20006aec 	.word	0x20006aec

08002d70 <SAIx_In_Init>:
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002d70:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <SAIx_In_Init+0xdc>)
{
 8002d72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d76:	460f      	mov	r7, r1
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002d78:	6819      	ldr	r1, [r3, #0]
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002d7a:	4c35      	ldr	r4, [pc, #212]	; (8002e50 <SAIx_In_Init+0xe0>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002d7c:	2500      	movs	r5, #0
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002d7e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
{
 8002d82:	b085      	sub	sp, #20
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002d84:	6023      	str	r3, [r4, #0]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002d86:	2601      	movs	r6, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002d88:	6019      	str	r1, [r3, #0]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8002d8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002d8e:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8002d92:	2180      	movs	r1, #128	; 0x80
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8002d94:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002d96:	f04f 0b20 	mov.w	fp, #32
  haudio_out_sai.FrameInit.FrameLength = 64;
 8002d9a:	2340      	movs	r3, #64	; 0x40
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002d9c:	f44f 2980 	mov.w	r9, #262144	; 0x40000
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8002da0:	f04f 0804 	mov.w	r8, #4
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8002da4:	6060      	str	r0, [r4, #4]
  HAL_SAI_Init(&haudio_out_sai);
 8002da6:	4620      	mov	r0, r4
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002da8:	61e2      	str	r2, [r4, #28]
 8002daa:	9203      	str	r2, [sp, #12]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8002dac:	6361      	str	r1, [r4, #52]	; 0x34
 8002dae:	9102      	str	r1, [sp, #8]
  haudio_out_sai.FrameInit.FrameLength = 64;
 8002db0:	6423      	str	r3, [r4, #64]	; 0x40
 8002db2:	9301      	str	r3, [sp, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002db4:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002db6:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002db8:	63a5      	str	r5, [r4, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002dba:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8002dbc:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002dbe:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002dc0:	64e5      	str	r5, [r4, #76]	; 0x4c
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002dc2:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002dc4:	e9c4 ba11 	strd	fp, sl, [r4, #68]	; 0x44
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8002dc8:	e9c4 9514 	strd	r9, r5, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8002dcc:	e9c4 8717 	strd	r8, r7, [r4, #92]	; 0x5c
  HAL_SAI_Init(&haudio_out_sai);
 8002dd0:	f003 ff60 	bl	8006c94 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002dd4:	481f      	ldr	r0, [pc, #124]	; (8002e54 <SAIx_In_Init+0xe4>)
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8002dd6:	9a03      	ldr	r2, [sp, #12]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002dd8:	f8d0 c000 	ldr.w	ip, [r0]
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002ddc:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002de0:	f42c 3c80 	bic.w	ip, ip, #65536	; 0x10000
  haudio_in_sai.FrameInit.FrameLength = 64;
 8002de4:	9b01      	ldr	r3, [sp, #4]
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8002de6:	9902      	ldr	r1, [sp, #8]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002de8:	f8c0 c000 	str.w	ip, [r0]
  HAL_SAI_Init(&haudio_in_sai);
 8002dec:	f104 0084 	add.w	r0, r4, #132	; 0x84
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8002df0:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8002df4:	2203      	movs	r2, #3
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002df6:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8002dfa:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002dfe:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002e02:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8002e06:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8002e0a:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002e0e:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8002e12:	f8c4 70e4 	str.w	r7, [r4, #228]	; 0xe4
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8002e16:	e9c4 3b31 	strd	r3, fp, [r4, #196]	; 0xc4
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002e1a:	e9c4 152e 	strd	r1, r5, [r4, #184]	; 0xb8
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002e1e:	e9c4 a533 	strd	sl, r5, [r4, #204]	; 0xcc
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002e22:	e9c4 9535 	strd	r9, r5, [r4, #212]	; 0xd4
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8002e26:	e9c4 5837 	strd	r5, r8, [r4, #220]	; 0xdc
  HAL_SAI_Init(&haudio_in_sai);
 8002e2a:	f003 ff33 	bl	8006c94 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002e2e:	6822      	ldr	r2, [r4, #0]
 8002e30:	6813      	ldr	r3, [r2, #0]
 8002e32:	ea43 030a 	orr.w	r3, r3, sl
 8002e36:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8002e38:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002e3c:	6813      	ldr	r3, [r2, #0]
 8002e3e:	ea43 030a 	orr.w	r3, r3, sl
 8002e42:	6013      	str	r3, [r2, #0]
}
 8002e44:	b005      	add	sp, #20
 8002e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40015c04 	.word	0x40015c04
 8002e50:	20006aec 	.word	0x20006aec
 8002e54:	40015c24 	.word	0x40015c24

08002e58 <BSP_AUDIO_OUT_Play>:
{
 8002e58:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <BSP_AUDIO_OUT_Play+0x34>)
{
 8002e5c:	4605      	mov	r5, r0
 8002e5e:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8002e60:	b28a      	uxth	r2, r1
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4601      	mov	r1, r0
 8002e66:	2034      	movs	r0, #52	; 0x34
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	4798      	blx	r3
 8002e6c:	b960      	cbnz	r0, 8002e88 <BSP_AUDIO_OUT_Play+0x30>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8002e6e:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8002e72:	4629      	mov	r1, r5
 8002e74:	4806      	ldr	r0, [pc, #24]	; (8002e90 <BSP_AUDIO_OUT_Play+0x38>)
 8002e76:	bf34      	ite	cc
 8002e78:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8002e7c:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 8002e80:	f004 f878 	bl	8006f74 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 8002e84:	2000      	movs	r0, #0
}
 8002e86:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8002e88:	2001      	movs	r0, #1
 8002e8a:	e7fc      	b.n	8002e86 <BSP_AUDIO_OUT_Play+0x2e>
 8002e8c:	20008044 	.word	0x20008044
 8002e90:	20006aec 	.word	0x20006aec

08002e94 <BSP_AUDIO_OUT_Pause>:
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8002e94:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <BSP_AUDIO_OUT_Pause+0x20>)
 8002e96:	2034      	movs	r0, #52	; 0x34
 8002e98:	681b      	ldr	r3, [r3, #0]
{    
 8002e9a:	b510      	push	{r4, lr}
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	4798      	blx	r3
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	b920      	cbnz	r0, 8002eae <BSP_AUDIO_OUT_Pause+0x1a>
    HAL_SAI_DMAPause(&haudio_out_sai);
 8002ea4:	4804      	ldr	r0, [pc, #16]	; (8002eb8 <BSP_AUDIO_OUT_Pause+0x24>)
 8002ea6:	f003 fff0 	bl	8006e8a <HAL_SAI_DMAPause>
    return AUDIO_OK;
 8002eaa:	4620      	mov	r0, r4
}
 8002eac:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 8002eae:	2001      	movs	r0, #1
 8002eb0:	e7fc      	b.n	8002eac <BSP_AUDIO_OUT_Pause+0x18>
 8002eb2:	bf00      	nop
 8002eb4:	20008044 	.word	0x20008044
 8002eb8:	20006aec 	.word	0x20006aec

08002ebc <BSP_AUDIO_OUT_Resume>:
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8002ebc:	4b07      	ldr	r3, [pc, #28]	; (8002edc <BSP_AUDIO_OUT_Resume+0x20>)
 8002ebe:	2034      	movs	r0, #52	; 0x34
 8002ec0:	681b      	ldr	r3, [r3, #0]
{    
 8002ec2:	b510      	push	{r4, lr}
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	4798      	blx	r3
 8002ec8:	4604      	mov	r4, r0
 8002eca:	b920      	cbnz	r0, 8002ed6 <BSP_AUDIO_OUT_Resume+0x1a>
    HAL_SAI_DMAResume(&haudio_out_sai);
 8002ecc:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <BSP_AUDIO_OUT_Resume+0x24>)
 8002ece:	f003 ffec 	bl	8006eaa <HAL_SAI_DMAResume>
    return AUDIO_OK;
 8002ed2:	4620      	mov	r0, r4
}
 8002ed4:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	e7fc      	b.n	8002ed4 <BSP_AUDIO_OUT_Resume+0x18>
 8002eda:	bf00      	nop
 8002edc:	20008044 	.word	0x20008044
 8002ee0:	20006aec 	.word	0x20006aec

08002ee4 <BSP_AUDIO_OUT_Stop>:
{
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
 8002ee8:	4809      	ldr	r0, [pc, #36]	; (8002f10 <BSP_AUDIO_OUT_Stop+0x2c>)
 8002eea:	f003 fff8 	bl	8006ede <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <BSP_AUDIO_OUT_Stop+0x30>)
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	2034      	movs	r0, #52	; 0x34
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	4798      	blx	r3
 8002efa:	4604      	mov	r4, r0
 8002efc:	b930      	cbnz	r0, 8002f0c <BSP_AUDIO_OUT_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 8002efe:	2d01      	cmp	r5, #1
 8002f00:	d102      	bne.n	8002f08 <BSP_AUDIO_OUT_Stop+0x24>
      HAL_Delay(1);
 8002f02:	4628      	mov	r0, r5
 8002f04:	f001 fad6 	bl	80044b4 <HAL_Delay>
    return AUDIO_OK;
 8002f08:	4620      	mov	r0, r4
 8002f0a:	e000      	b.n	8002f0e <BSP_AUDIO_OUT_Stop+0x2a>
    return AUDIO_ERROR;
 8002f0c:	2001      	movs	r0, #1
}
 8002f0e:	bd38      	pop	{r3, r4, r5, pc}
 8002f10:	20006aec 	.word	0x20006aec
 8002f14:	20008044 	.word	0x20008044

08002f18 <BSP_AUDIO_OUT_SetVolume>:
{
 8002f18:	b508      	push	{r3, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <BSP_AUDIO_OUT_SetVolume+0x18>)
 8002f1c:	4601      	mov	r1, r0
 8002f1e:	2034      	movs	r0, #52	; 0x34
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4798      	blx	r3
}
 8002f26:	3000      	adds	r0, #0
 8002f28:	bf18      	it	ne
 8002f2a:	2001      	movne	r0, #1
 8002f2c:	bd08      	pop	{r3, pc}
 8002f2e:	bf00      	nop
 8002f30:	20008044 	.word	0x20008044

08002f34 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
{ 
 8002f34:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002f36:	4c08      	ldr	r4, [pc, #32]	; (8002f58 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
 8002f38:	6822      	ldr	r2, [r4, #0]
 8002f3a:	6813      	ldr	r3, [r2, #0]
 8002f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8002f42:	6620      	str	r0, [r4, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8002f44:	4620      	mov	r0, r4
 8002f46:	f003 fea5 	bl	8006c94 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002f4a:	6822      	ldr	r2, [r4, #0]
 8002f4c:	6813      	ldr	r3, [r2, #0]
 8002f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f52:	6013      	str	r3, [r2, #0]
}
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	bf00      	nop
 8002f58:	20006aec 	.word	0x20006aec

08002f5c <HAL_SAI_TxCpltCallback>:
{
 8002f5c:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002f5e:	f7fe fc27 	bl	80017b0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002f62:	bd08      	pop	{r3, pc}

08002f64 <HAL_SAI_TxHalfCpltCallback>:
{
 8002f64:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8002f66:	f7fe fc2f 	bl	80017c8 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8002f6a:	bd08      	pop	{r3, pc}

08002f6c <BSP_AUDIO_OUT_Error_CallBack>:
 8002f6c:	4770      	bx	lr
	...

08002f70 <BSP_AUDIO_OUT_MspInit>:
{ 
 8002f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002f74:	4c51      	ldr	r4, [pc, #324]	; (80030bc <BSP_AUDIO_OUT_MspInit+0x14c>)
{ 
 8002f76:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002f78:	f04f 0802 	mov.w	r8, #2
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002f7c:	2500      	movs	r5, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002f7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002f80:	2603      	movs	r6, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002f82:	270a      	movs	r7, #10
{ 
 8002f84:	4681      	mov	r9, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002f86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8002f8a:	a905      	add	r1, sp, #20
 8002f8c:	484c      	ldr	r0, [pc, #304]	; (80030c0 <BSP_AUDIO_OUT_MspInit+0x150>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8002f8e:	f04f 0a40 	mov.w	sl, #64	; 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002f92:	6463      	str	r3, [r4, #68]	; 0x44
 8002f94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8002f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa4:	6323      	str	r3, [r4, #48]	; 0x30
 8002fa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8002fb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8002fb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	9302      	str	r3, [sp, #8]
 8002fc0:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8002fc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6323      	str	r3, [r4, #48]	; 0x30
 8002fca:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002fcc:	9709      	str	r7, [sp, #36]	; 0x24
  AUDIO_OUT_SAIx_FS_ENABLE();
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	9303      	str	r3, [sp, #12]
 8002fd4:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002fd8:	e9cd 5607 	strd	r5, r6, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002fdc:	e9cd 3805 	strd	r3, r8, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8002fe0:	f001 fe44 	bl	8004c6c <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8002fe4:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002fe6:	a905      	add	r1, sp, #20
 8002fe8:	4835      	ldr	r0, [pc, #212]	; (80030c0 <BSP_AUDIO_OUT_MspInit+0x150>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8002fea:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002fec:	e9cd 3805 	strd	r3, r8, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002ff0:	e9cd 5607 	strd	r5, r6, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002ff4:	f001 fe3a 	bl	8004c6c <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002ff8:	a905      	add	r1, sp, #20
 8002ffa:	4831      	ldr	r0, [pc, #196]	; (80030c0 <BSP_AUDIO_OUT_MspInit+0x150>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002ffc:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002ffe:	e9cd a805 	strd	sl, r8, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003002:	e9cd 5607 	strd	r5, r6, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003006:	f001 fe31 	bl	8004c6c <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800300a:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800300c:	a905      	add	r1, sp, #20
 800300e:	482c      	ldr	r0, [pc, #176]	; (80030c0 <BSP_AUDIO_OUT_MspInit+0x150>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003010:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003012:	e9cd 3805 	strd	r3, r8, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003016:	e9cd 5607 	strd	r5, r6, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800301a:	f001 fe27 	bl	8004c6c <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800301e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8003020:	f8d9 2000 	ldr.w	r2, [r9]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003024:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003028:	6323      	str	r3, [r4, #48]	; 0x30
 800302a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800302c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003030:	9304      	str	r3, [sp, #16]
 8003032:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <BSP_AUDIO_OUT_MspInit+0x154>)
 8003036:	429a      	cmp	r2, r3
 8003038:	d134      	bne.n	80030a4 <BSP_AUDIO_OUT_MspInit+0x134>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800303a:	4b23      	ldr	r3, [pc, #140]	; (80030c8 <BSP_AUDIO_OUT_MspInit+0x158>)
 800303c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003040:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003044:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003048:	f503 7484 	add.w	r4, r3, #264	; 0x108
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800304c:	f8c3 a110 	str.w	sl, [r3, #272]	; 0x110
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003050:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003054:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003058:	f8c9 406c 	str.w	r4, [r9, #108]	; 0x6c
    HAL_DMA_DeInit(&hdma_sai_tx);
 800305c:	4620      	mov	r0, r4
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800305e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003066:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 800306a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800306e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003072:	f8c3 6130 	str.w	r6, [r3, #304]	; 0x130
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8003076:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800307a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800307e:	f8c3 5134 	str.w	r5, [r3, #308]	; 0x134
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003082:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003086:	2204      	movs	r2, #4
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003088:	f8c3 5138 	str.w	r5, [r3, #312]	; 0x138
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800308c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003090:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <BSP_AUDIO_OUT_MspInit+0x15c>)
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003092:	f8c3 9140 	str.w	r9, [r3, #320]	; 0x140
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003096:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    HAL_DMA_DeInit(&hdma_sai_tx);
 800309a:	f001 fb19 	bl	80046d0 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
 800309e:	4620      	mov	r0, r4
 80030a0:	f001 fa98 	bl	80045d4 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80030a4:	2200      	movs	r2, #0
 80030a6:	210e      	movs	r1, #14
 80030a8:	203c      	movs	r0, #60	; 0x3c
 80030aa:	f001 fa27 	bl	80044fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80030ae:	203c      	movs	r0, #60	; 0x3c
 80030b0:	f001 fa56 	bl	8004560 <HAL_NVIC_EnableIRQ>
}
 80030b4:	b00a      	add	sp, #40	; 0x28
 80030b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40022000 	.word	0x40022000
 80030c4:	40015c04 	.word	0x40015c04
 80030c8:	20006aec 	.word	0x20006aec
 80030cc:	40026470 	.word	0x40026470

080030d0 <BSP_AUDIO_OUT_Init>:
{ 
 80030d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030d4:	4616      	mov	r6, r2
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80030d6:	4c2f      	ldr	r4, [pc, #188]	; (8003194 <BSP_AUDIO_OUT_Init+0xc4>)
{ 
 80030d8:	4607      	mov	r7, r0
 80030da:	4688      	mov	r8, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80030dc:	4d2e      	ldr	r5, [pc, #184]	; (8003198 <BSP_AUDIO_OUT_Init+0xc8>)
  SAIx_Out_DeInit();
 80030de:	f7ff fe2b 	bl	8002d38 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80030e2:	4631      	mov	r1, r6
 80030e4:	2200      	movs	r2, #0
 80030e6:	4620      	mov	r0, r4
 80030e8:	f7fd fd3c 	bl	8000b64 <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80030ec:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80030ee:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80030f0:	f004 f840 	bl	8007174 <HAL_SAI_GetState>
 80030f4:	4601      	mov	r1, r0
 80030f6:	b910      	cbnz	r0, 80030fe <BSP_AUDIO_OUT_Init+0x2e>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80030f8:	4620      	mov	r0, r4
 80030fa:	f7ff ff39 	bl	8002f70 <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80030fe:	682b      	ldr	r3, [r5, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8003100:	f04f 0900 	mov.w	r9, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003104:	6025      	str	r5, [r4, #0]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8003106:	2240      	movs	r2, #64	; 0x40
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 800310c:	2104      	movs	r1, #4
  HAL_SAI_Init(&haudio_out_sai);
 800310e:	4821      	ldr	r0, [pc, #132]	; (8003194 <BSP_AUDIO_OUT_Init+0xc4>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003110:	602b      	str	r3, [r5, #0]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8003112:	2380      	movs	r3, #128	; 0x80
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003114:	2501      	movs	r5, #1
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8003116:	61e6      	str	r6, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8003118:	f8c4 9004 	str.w	r9, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800311c:	f8c4 9014 	str.w	r9, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003120:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003124:	63e5      	str	r5, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8003126:	f8c4 9008 	str.w	r9, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800312a:	61a5      	str	r5, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800312c:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003130:	e9c4 390d 	strd	r3, r9, [r4, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8003134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003138:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800313a:	2320      	movs	r3, #32
 800313c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003144:	e9c4 3912 	strd	r3, r9, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003148:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800314c:	e9c4 3914 	strd	r3, r9, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8003150:	230f      	movs	r3, #15
 8003152:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  HAL_SAI_Init(&haudio_out_sai);
 8003156:	f003 fd9d 	bl	8006c94 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800315a:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800315c:	4c0f      	ldr	r4, [pc, #60]	; (800319c <BSP_AUDIO_OUT_Init+0xcc>)
 800315e:	2034      	movs	r0, #52	; 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8003160:	6813      	ldr	r3, [r2, #0]
 8003162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003166:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8003168:	68a3      	ldr	r3, [r4, #8]
 800316a:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 800316c:	f648 1394 	movw	r3, #35220	; 0x8994
 8003170:	4298      	cmp	r0, r3
 8003172:	d10d      	bne.n	8003190 <BSP_AUDIO_OUT_Init+0xc0>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8003174:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003176:	2034      	movs	r0, #52	; 0x34
 8003178:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <BSP_AUDIO_OUT_Init+0xd0>)
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800317c:	4642      	mov	r2, r8
 800317e:	4639      	mov	r1, r7
    audio_drv = &wm8994_drv; 
 8003180:	601c      	str	r4, [r3, #0]
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8003182:	2034      	movs	r0, #52	; 0x34
 8003184:	6824      	ldr	r4, [r4, #0]
 8003186:	4633      	mov	r3, r6
 8003188:	47a0      	blx	r4
    ret = AUDIO_OK;
 800318a:	4648      	mov	r0, r9
}
 800318c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ret = AUDIO_ERROR;
 8003190:	4628      	mov	r0, r5
 8003192:	e7fb      	b.n	800318c <BSP_AUDIO_OUT_Init+0xbc>
 8003194:	20006aec 	.word	0x20006aec
 8003198:	40015c04 	.word	0x40015c04
 800319c:	20000058 	.word	0x20000058
 80031a0:	20008044 	.word	0x20008044

080031a4 <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80031a4:	b28a      	uxth	r2, r1
 80031a6:	4601      	mov	r1, r0
 80031a8:	4802      	ldr	r0, [pc, #8]	; (80031b4 <BSP_AUDIO_IN_Record+0x10>)
{
 80031aa:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80031ac:	f003 ff30 	bl	8007010 <HAL_SAI_Receive_DMA>
}
 80031b0:	2000      	movs	r0, #0
 80031b2:	bd08      	pop	{r3, pc}
 80031b4:	20006b70 	.word	0x20006b70

080031b8 <BSP_AUDIO_IN_Stop>:
{
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_in_sai);
 80031bc:	4809      	ldr	r0, [pc, #36]	; (80031e4 <BSP_AUDIO_IN_Stop+0x2c>)
 80031be:	f003 fe8e 	bl	8006ede <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <BSP_AUDIO_IN_Stop+0x30>)
 80031c4:	4629      	mov	r1, r5
 80031c6:	2034      	movs	r0, #52	; 0x34
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	4798      	blx	r3
 80031ce:	4604      	mov	r4, r0
 80031d0:	b930      	cbnz	r0, 80031e0 <BSP_AUDIO_IN_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 80031d2:	2d01      	cmp	r5, #1
 80031d4:	d102      	bne.n	80031dc <BSP_AUDIO_IN_Stop+0x24>
      HAL_Delay(1);
 80031d6:	4628      	mov	r0, r5
 80031d8:	f001 f96c 	bl	80044b4 <HAL_Delay>
    return AUDIO_OK;
 80031dc:	4620      	mov	r0, r4
 80031de:	e000      	b.n	80031e2 <BSP_AUDIO_IN_Stop+0x2a>
    return AUDIO_ERROR;
 80031e0:	2001      	movs	r0, #1
}
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	20006b70 	.word	0x20006b70
 80031e8:	20008044 	.word	0x20008044

080031ec <BSP_AUDIO_IN_Pause>:
{    
 80031ec:	b508      	push	{r3, lr}
  HAL_SAI_DMAPause(&haudio_in_sai);
 80031ee:	4802      	ldr	r0, [pc, #8]	; (80031f8 <BSP_AUDIO_IN_Pause+0xc>)
 80031f0:	f003 fe4b 	bl	8006e8a <HAL_SAI_DMAPause>
}
 80031f4:	2000      	movs	r0, #0
 80031f6:	bd08      	pop	{r3, pc}
 80031f8:	20006b70 	.word	0x20006b70

080031fc <BSP_AUDIO_IN_Resume>:
{    
 80031fc:	b508      	push	{r3, lr}
  HAL_SAI_DMAResume(&haudio_in_sai);
 80031fe:	4802      	ldr	r0, [pc, #8]	; (8003208 <BSP_AUDIO_IN_Resume+0xc>)
 8003200:	f003 fe53 	bl	8006eaa <HAL_SAI_DMAResume>
}
 8003204:	2000      	movs	r0, #0
 8003206:	bd08      	pop	{r3, pc}
 8003208:	20006b70 	.word	0x20006b70

0800320c <BSP_AUDIO_IN_SetVolume>:
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800320c:	4b07      	ldr	r3, [pc, #28]	; (800322c <BSP_AUDIO_IN_SetVolume+0x20>)
 800320e:	4601      	mov	r1, r0
 8003210:	681b      	ldr	r3, [r3, #0]
{
 8003212:	b510      	push	{r4, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8003214:	6a1b      	ldr	r3, [r3, #32]
{
 8003216:	4604      	mov	r4, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8003218:	2034      	movs	r0, #52	; 0x34
 800321a:	4798      	blx	r3
 800321c:	b918      	cbnz	r0, 8003226 <BSP_AUDIO_IN_SetVolume+0x1a>
    AudioInVolume = Volume;
 800321e:	b2a4      	uxth	r4, r4
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <BSP_AUDIO_IN_SetVolume+0x24>)
 8003222:	801c      	strh	r4, [r3, #0]
}
 8003224:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 8003226:	2001      	movs	r0, #1
 8003228:	e7fc      	b.n	8003224 <BSP_AUDIO_IN_SetVolume+0x18>
 800322a:	bf00      	nop
 800322c:	20008044 	.word	0x20008044
 8003230:	20000088 	.word	0x20000088

08003234 <HAL_SAI_RxCpltCallback>:
{
 8003234:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8003236:	f7fe fecb 	bl	8001fd0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800323a:	bd08      	pop	{r3, pc}

0800323c <HAL_SAI_RxHalfCpltCallback>:
{
 800323c:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800323e:	f7fe feeb 	bl	8002018 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8003242:	bd08      	pop	{r3, pc}

08003244 <BSP_AUDIO_IN_Error_CallBack>:
 8003244:	4770      	bx	lr
	...

08003248 <HAL_SAI_ErrorCallback>:
{
 8003248:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 800324a:	480a      	ldr	r0, [pc, #40]	; (8003274 <HAL_SAI_ErrorCallback+0x2c>)
 800324c:	f003 ff92 	bl	8007174 <HAL_SAI_GetState>
 8003250:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003252:	4809      	ldr	r0, [pc, #36]	; (8003278 <HAL_SAI_ErrorCallback+0x30>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8003254:	f005 05ef 	and.w	r5, r5, #239	; 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003258:	f003 ff8c 	bl	8007174 <HAL_SAI_GetState>
 800325c:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 800325e:	2d02      	cmp	r5, #2
 8003260:	d101      	bne.n	8003266 <HAL_SAI_ErrorCallback+0x1e>
    BSP_AUDIO_OUT_Error_CallBack();
 8003262:	f7ff fe83 	bl	8002f6c <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8003266:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800326a:	2c02      	cmp	r4, #2
 800326c:	d101      	bne.n	8003272 <HAL_SAI_ErrorCallback+0x2a>
    BSP_AUDIO_IN_Error_CallBack();
 800326e:	f7ff ffe9 	bl	8003244 <BSP_AUDIO_IN_Error_CallBack>
}
 8003272:	bd38      	pop	{r3, r4, r5, pc}
 8003274:	20006aec 	.word	0x20006aec
 8003278:	20006b70 	.word	0x20006b70

0800327c <BSP_AUDIO_IN_MspInit>:
{
 800327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
 8003280:	4c42      	ldr	r4, [pc, #264]	; (800338c <BSP_AUDIO_IN_MspInit+0x110>)
{
 8003282:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003284:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003286:	2500      	movs	r5, #0
  AUDIO_IN_SAIx_CLK_ENABLE();
 8003288:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800328a:	f44f 6880 	mov.w	r8, #1024	; 0x400
{
 800328e:	4606      	mov	r6, r0
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8003290:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
 8003292:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8003296:	483e      	ldr	r0, [pc, #248]	; (8003390 <BSP_AUDIO_IN_MspInit+0x114>)
  AUDIO_IN_SAIx_CLK_ENABLE();
 8003298:	6463      	str	r3, [r4, #68]	; 0x44
 800329a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800329c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
 80032a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032aa:	6323      	str	r3, [r4, #48]	; 0x30
 80032ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	9302      	str	r3, [sp, #8]
 80032b4:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80032b6:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80032b8:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80032bc:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80032be:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80032c2:	f001 fcd3 	bl	8004c6c <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 80032c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80032c8:	a905      	add	r1, sp, #20
 80032ca:	4832      	ldr	r0, [pc, #200]	; (8003394 <BSP_AUDIO_IN_MspInit+0x118>)
  AUDIO_IN_INT_GPIO_ENABLE();
 80032cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d0:	6323      	str	r3, [r4, #48]	; 0x30
 80032d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d8:	9303      	str	r3, [sp, #12]
 80032da:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80032dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80032e0:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80032e4:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80032e8:	f001 fcc0 	bl	8004c6c <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80032ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
 80032ee:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80032f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032f4:	6323      	str	r3, [r4, #48]	; 0x30
 80032f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fc:	9304      	str	r3, [sp, #16]
 80032fe:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <BSP_AUDIO_IN_MspInit+0x11c>)
 8003302:	429a      	cmp	r2, r3
 8003304:	d12f      	bne.n	8003366 <BSP_AUDIO_IN_MspInit+0xea>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8003306:	4b25      	ldr	r3, [pc, #148]	; (800339c <BSP_AUDIO_IN_MspInit+0x120>)
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800330c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8003310:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8003314:	f503 74b4 	add.w	r4, r3, #360	; 0x168
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8003318:	f8c3 516c 	str.w	r5, [r3, #364]	; 0x16c
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800331c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8003320:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8003324:	6734      	str	r4, [r6, #112]	; 0x70
    HAL_DMA_DeInit(&hdma_sai_rx);
 8003326:	4620      	mov	r0, r4
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8003328:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800332c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003330:	f8c3 5170 	str.w	r5, [r3, #368]	; 0x170
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003334:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003338:	2203      	movs	r2, #3
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800333a:	f8c3 5174 	str.w	r5, [r3, #372]	; 0x174
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800333e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8003342:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <BSP_AUDIO_IN_MspInit+0x124>)
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8003344:	f8c3 8178 	str.w	r8, [r3, #376]	; 0x178
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003348:	f8c3 518c 	str.w	r5, [r3, #396]	; 0x18c
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800334c:	f8c3 5194 	str.w	r5, [r3, #404]	; 0x194
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8003350:	f8c3 5198 	str.w	r5, [r3, #408]	; 0x198
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8003354:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8003358:	f8c3 61a0 	str.w	r6, [r3, #416]	; 0x1a0
    HAL_DMA_DeInit(&hdma_sai_rx);
 800335c:	f001 f9b8 	bl	80046d0 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 8003360:	4620      	mov	r0, r4
 8003362:	f001 f937 	bl	80045d4 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003366:	2200      	movs	r2, #0
 8003368:	210f      	movs	r1, #15
 800336a:	2046      	movs	r0, #70	; 0x46
 800336c:	f001 f8c6 	bl	80044fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8003370:	2046      	movs	r0, #70	; 0x46
 8003372:	f001 f8f5 	bl	8004560 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003376:	2200      	movs	r2, #0
 8003378:	210f      	movs	r1, #15
 800337a:	2028      	movs	r0, #40	; 0x28
 800337c:	f001 f8be 	bl	80044fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8003380:	2028      	movs	r0, #40	; 0x28
 8003382:	f001 f8ed 	bl	8004560 <HAL_NVIC_EnableIRQ>
}
 8003386:	b00a      	add	sp, #40	; 0x28
 8003388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	40021800 	.word	0x40021800
 8003394:	40021c00 	.word	0x40021c00
 8003398:	40015c24 	.word	0x40015c24
 800339c:	20006aec 	.word	0x20006aec
 80033a0:	400264b8 	.word	0x400264b8

080033a4 <BSP_AUDIO_IN_InitEx.part.0>:
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a6:	460d      	mov	r5, r1
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80033a8:	4c1e      	ldr	r4, [pc, #120]	; (8003424 <BSP_AUDIO_IN_InitEx.part.0+0x80>)
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
 80033aa:	4607      	mov	r7, r0
    SAIx_In_DeInit();
 80033ac:	f7ff fcd2 	bl	8002d54 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80033b0:	2200      	movs	r2, #0
 80033b2:	4629      	mov	r1, r5
 80033b4:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80033b8:	f7fd fbd4 	bl	8000b64 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80033bc:	4620      	mov	r0, r4
 80033be:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <BSP_AUDIO_IN_InitEx.part.0+0x84>)
 80033c0:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80033c4:	f003 fed6 	bl	8007174 <HAL_SAI_GetState>
 80033c8:	4606      	mov	r6, r0
 80033ca:	b948      	cbnz	r0, 80033e0 <BSP_AUDIO_IN_InitEx.part.0+0x3c>
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 80033cc:	4601      	mov	r1, r0
 80033ce:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80033d2:	f7ff fdcd 	bl	8002f70 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80033d6:	4631      	mov	r1, r6
 80033d8:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80033dc:	f7ff ff4e 	bl	800327c <BSP_AUDIO_IN_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80033e0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80033e4:	4c11      	ldr	r4, [pc, #68]	; (800342c <BSP_AUDIO_IN_InitEx.part.0+0x88>)
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 80033e6:	462a      	mov	r2, r5
 80033e8:	f04f 0001 	mov.w	r0, #1
 80033ec:	bf0c      	ite	eq
 80033ee:	210a      	moveq	r1, #10
 80033f0:	2105      	movne	r1, #5
 80033f2:	f7ff fcbd 	bl	8002d70 <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80033f6:	68a3      	ldr	r3, [r4, #8]
 80033f8:	2034      	movs	r0, #52	; 0x34
 80033fa:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
 80033fc:	f648 1394 	movw	r3, #35220	; 0x8994
 8003400:	4298      	cmp	r0, r3
 8003402:	d10c      	bne.n	800341e <BSP_AUDIO_IN_InitEx.part.0+0x7a>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8003404:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003406:	2034      	movs	r0, #52	; 0x34
 8003408:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <BSP_AUDIO_IN_InitEx.part.0+0x8c>)
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 800340c:	2264      	movs	r2, #100	; 0x64
 800340e:	4639      	mov	r1, r7
      audio_drv = &wm8994_drv;
 8003410:	601c      	str	r4, [r3, #0]
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8003412:	2034      	movs	r0, #52	; 0x34
 8003414:	6824      	ldr	r4, [r4, #0]
 8003416:	462b      	mov	r3, r5
 8003418:	47a0      	blx	r4
      ret = AUDIO_OK;
 800341a:	2000      	movs	r0, #0
}
 800341c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = AUDIO_ERROR;
 800341e:	2001      	movs	r0, #1
 8003420:	e7fc      	b.n	800341c <BSP_AUDIO_IN_InitEx.part.0+0x78>
 8003422:	bf00      	nop
 8003424:	20006aec 	.word	0x20006aec
 8003428:	40015c24 	.word	0x40015c24
 800342c:	20000058 	.word	0x20000058
 8003430:	20008044 	.word	0x20008044

08003434 <BSP_AUDIO_IN_Init>:
{
 8003434:	4601      	mov	r1, r0
 8003436:	f44f 7000 	mov.w	r0, #512	; 0x200
 800343a:	f7ff bfb3 	b.w	80033a4 <BSP_AUDIO_IN_InitEx.part.0>
	...

08003440 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003440:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003444:	4616      	mov	r6, r2
 8003446:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003448:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800344c:	4b17      	ldr	r3, [pc, #92]	; (80034ac <LL_FillBuffer+0x6c>)
{
 800344e:	4680      	mov	r8, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003450:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8003454:	4816      	ldr	r0, [pc, #88]	; (80034b0 <LL_FillBuffer+0x70>)
{
 8003456:	460d      	mov	r5, r1
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003458:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800345a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345c:	fb0c 0202 	mla	r2, ip, r2, r0
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003460:	4812      	ldr	r0, [pc, #72]	; (80034ac <LL_FillBuffer+0x6c>)
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003462:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003464:	2a02      	cmp	r2, #2
{
 8003466:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800346a:	bf18      	it	ne
 800346c:	2200      	movne	r2, #0
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800346e:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hDma2dHandler.Instance = DMA2D;
 8003472:	4a10      	ldr	r2, [pc, #64]	; (80034b4 <LL_FillBuffer+0x74>)
 8003474:	601a      	str	r2, [r3, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003476:	f001 fae8 	bl	8004a4a <HAL_DMA2D_Init>
 800347a:	b998      	cbnz	r0, 80034a4 <LL_FillBuffer+0x64>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800347c:	4641      	mov	r1, r8
 800347e:	480b      	ldr	r0, [pc, #44]	; (80034ac <LL_FillBuffer+0x6c>)
 8003480:	f001 fbaa 	bl	8004bd8 <HAL_DMA2D_ConfigLayer>
 8003484:	b970      	cbnz	r0, 80034a4 <LL_FillBuffer+0x64>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003486:	9700      	str	r7, [sp, #0]
 8003488:	4633      	mov	r3, r6
 800348a:	462a      	mov	r2, r5
 800348c:	4621      	mov	r1, r4
 800348e:	4807      	ldr	r0, [pc, #28]	; (80034ac <LL_FillBuffer+0x6c>)
 8003490:	f001 fb07 	bl	8004aa2 <HAL_DMA2D_Start>
 8003494:	b930      	cbnz	r0, 80034a4 <LL_FillBuffer+0x64>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003496:	210a      	movs	r1, #10
 8003498:	4804      	ldr	r0, [pc, #16]	; (80034ac <LL_FillBuffer+0x6c>)
      }
    }
  } 
}
 800349a:	b002      	add	sp, #8
 800349c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80034a0:	f001 bb19 	b.w	8004ad6 <HAL_DMA2D_PollForTransfer>
}
 80034a4:	b002      	add	sp, #8
 80034a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034aa:	bf00      	nop
 80034ac:	20006d14 	.word	0x20006d14
 80034b0:	20008048 	.word	0x20008048
 80034b4:	4002b000 	.word	0x4002b000

080034b8 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <BSP_LCD_GetXSize+0x10>)
 80034ba:	2134      	movs	r1, #52	; 0x34
 80034bc:	4a03      	ldr	r2, [pc, #12]	; (80034cc <BSP_LCD_GetXSize+0x14>)
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	fb01 2303 	mla	r3, r1, r3, r2
}
 80034c4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80034c6:	4770      	bx	lr
 80034c8:	20006d14 	.word	0x20006d14
 80034cc:	20008048 	.word	0x20008048

080034d0 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80034d0:	4b03      	ldr	r3, [pc, #12]	; (80034e0 <BSP_LCD_GetYSize+0x10>)
 80034d2:	2134      	movs	r1, #52	; 0x34
 80034d4:	4a03      	ldr	r2, [pc, #12]	; (80034e4 <BSP_LCD_GetYSize+0x14>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	fb01 2303 	mla	r3, r1, r3, r2
}
 80034dc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80034de:	4770      	bx	lr
 80034e0:	20006d14 	.word	0x20006d14
 80034e4:	20008048 	.word	0x20008048

080034e8 <BSP_LCD_LayerDefaultInit>:
{     
 80034e8:	b570      	push	{r4, r5, r6, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80034ea:	4d18      	ldr	r5, [pc, #96]	; (800354c <BSP_LCD_LayerDefaultInit+0x64>)
{     
 80034ec:	4604      	mov	r4, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80034ee:	2634      	movs	r6, #52	; 0x34
 80034f0:	4817      	ldr	r0, [pc, #92]	; (8003550 <BSP_LCD_LayerDefaultInit+0x68>)
 80034f2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
{     
 80034f4:	b08e      	sub	sp, #56	; 0x38
  layer_cfg.WindowX0 = 0;
 80034f6:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80034f8:	fb06 0202 	mla	r2, r6, r2, r0
  layer_cfg.FBStartAdress = FB_Address;
 80034fc:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 80034fe:	21ff      	movs	r1, #255	; 0xff
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003500:	6e16      	ldr	r6, [r2, #96]	; 0x60
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003502:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.WindowX0 = 0;
 8003504:	9301      	str	r3, [sp, #4]
  layer_cfg.Backcolor.Blue = 0;
 8003506:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 800350a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800350e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  layer_cfg.Alpha0 = 0;
 8003512:	e9cd 1306 	strd	r1, r3, [sp, #24]
  layer_cfg.WindowY0 = 0;
 8003516:	e9cd 6302 	strd	r6, r3, [sp, #8]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800351a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800351e:	2307      	movs	r3, #7
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003520:	e9cd 620b 	strd	r6, r2, [sp, #44]	; 0x2c
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003524:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003528:	4622      	mov	r2, r4
 800352a:	a901      	add	r1, sp, #4
 800352c:	f002 fcd2 	bl	8005ed4 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003530:	200c      	movs	r0, #12
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
 8003536:	fb00 5004 	mla	r0, r0, r4, r5
 800353a:	6483      	str	r3, [r0, #72]	; 0x48
  DrawProp[LayerIndex].pFont     = &Font24;
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <BSP_LCD_LayerDefaultInit+0x6c>)
 800353e:	64c3      	str	r3, [r0, #76]	; 0x4c
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003540:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003544:	6443      	str	r3, [r0, #68]	; 0x44
}
 8003546:	b00e      	add	sp, #56	; 0x38
 8003548:	bd70      	pop	{r4, r5, r6, pc}
 800354a:	bf00      	nop
 800354c:	20006d14 	.word	0x20006d14
 8003550:	20008048 	.word	0x20008048
 8003554:	2000008c 	.word	0x2000008c

08003558 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8003558:	4b01      	ldr	r3, [pc, #4]	; (8003560 <BSP_LCD_SelectLayer+0x8>)
 800355a:	6418      	str	r0, [r3, #64]	; 0x40
} 
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20006d14 	.word	0x20006d14

08003564 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8003564:	4a03      	ldr	r2, [pc, #12]	; (8003574 <BSP_LCD_SetTextColor+0x10>)
 8003566:	210c      	movs	r1, #12
 8003568:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800356a:	fb01 2303 	mla	r3, r1, r3, r2
 800356e:	6458      	str	r0, [r3, #68]	; 0x44
}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20006d14 	.word	0x20006d14

08003578 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8003578:	4a03      	ldr	r2, [pc, #12]	; (8003588 <BSP_LCD_SetBackColor+0x10>)
 800357a:	210c      	movs	r1, #12
 800357c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800357e:	fb01 2303 	mla	r3, r1, r3, r2
 8003582:	6498      	str	r0, [r3, #72]	; 0x48
}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20006d14 	.word	0x20006d14

0800358c <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 800358c:	4a03      	ldr	r2, [pc, #12]	; (800359c <BSP_LCD_SetFont+0x10>)
 800358e:	210c      	movs	r1, #12
 8003590:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003592:	fb01 2303 	mla	r3, r1, r3, r2
 8003596:	64d8      	str	r0, [r3, #76]	; 0x4c
}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	20006d14 	.word	0x20006d14

080035a0 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 80035a0:	4a03      	ldr	r2, [pc, #12]	; (80035b0 <BSP_LCD_GetFont+0x10>)
 80035a2:	210c      	movs	r1, #12
 80035a4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80035a6:	fb01 2303 	mla	r3, r1, r3, r2
}
 80035aa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20006d14 	.word	0x20006d14

080035b4 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <BSP_LCD_Clear+0x24>)
{ 
 80035b6:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80035b8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80035ba:	2134      	movs	r1, #52	; 0x34
 80035bc:	4b07      	ldr	r3, [pc, #28]	; (80035dc <BSP_LCD_Clear+0x28>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80035be:	9001      	str	r0, [sp, #4]
 80035c0:	4620      	mov	r0, r4
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80035c2:	fb01 3104 	mla	r1, r1, r4, r3
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80035c6:	2300      	movs	r3, #0
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	e9d1 2318 	ldrd	r2, r3, [r1, #96]	; 0x60
 80035ce:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 80035d0:	f7ff ff36 	bl	8003440 <LL_FillBuffer>
}
 80035d4:	b002      	add	sp, #8
 80035d6:	bd10      	pop	{r4, pc}
 80035d8:	20006d14 	.word	0x20006d14
 80035dc:	20008048 	.word	0x20008048

080035e0 <BSP_LCD_DrawHLine>:
{
 80035e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80035e2:	4d0f      	ldr	r5, [pc, #60]	; (8003620 <BSP_LCD_DrawHLine+0x40>)
 80035e4:	2434      	movs	r4, #52	; 0x34
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <BSP_LCD_DrawHLine+0x44>)
 80035e8:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 80035ea:	fb04 3407 	mla	r4, r4, r7, r3
 80035ee:	e9d4 3617 	ldrd	r3, r6, [r4, #92]	; 0x5c
 80035f2:	fb06 0101 	mla	r1, r6, r1, r0
 80035f6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80035f8:	2802      	cmp	r0, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80035fa:	4638      	mov	r0, r7
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80035fc:	bf0c      	ite	eq
 80035fe:	eb03 0141 	addeq.w	r1, r3, r1, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003602:	eb03 0181 	addne.w	r1, r3, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003606:	230c      	movs	r3, #12
 8003608:	fb03 5507 	mla	r5, r3, r7, r5
 800360c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	2300      	movs	r3, #0
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2301      	movs	r3, #1
 8003616:	f7ff ff13 	bl	8003440 <LL_FillBuffer>
}
 800361a:	b003      	add	sp, #12
 800361c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800361e:	bf00      	nop
 8003620:	20006d14 	.word	0x20006d14
 8003624:	20008048 	.word	0x20008048

08003628 <BSP_LCD_DrawVLine>:
{
 8003628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800362a:	4f11      	ldr	r7, [pc, #68]	; (8003670 <BSP_LCD_DrawVLine+0x48>)
{
 800362c:	4613      	mov	r3, r2
 800362e:	2534      	movs	r5, #52	; 0x34
 8003630:	4a10      	ldr	r2, [pc, #64]	; (8003674 <BSP_LCD_DrawVLine+0x4c>)
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003632:	f8d7 c040 	ldr.w	ip, [r7, #64]	; 0x40
 8003636:	fb05 250c 	mla	r5, r5, ip, r2
 800363a:	e9d5 4617 	ldrd	r4, r6, [r5, #92]	; 0x5c
 800363e:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8003640:	fb06 0101 	mla	r1, r6, r1, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003644:	200c      	movs	r0, #12
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003646:	2a02      	cmp	r2, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003648:	f106 36ff 	add.w	r6, r6, #4294967295
 800364c:	fb00 770c 	mla	r7, r0, ip, r7
 8003650:	4660      	mov	r0, ip
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003652:	bf08      	it	eq
 8003654:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003658:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800365a:	bf18      	it	ne
 800365c:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003660:	9600      	str	r6, [sp, #0]
 8003662:	9201      	str	r2, [sp, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f7ff feeb 	bl	8003440 <LL_FillBuffer>
}
 800366a:	b003      	add	sp, #12
 800366c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800366e:	bf00      	nop
 8003670:	20006d14 	.word	0x20006d14
 8003674:	20008048 	.word	0x20008048

08003678 <BSP_LCD_DrawRect>:
{
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	461e      	mov	r6, r3
 800367c:	460d      	mov	r5, r1
 800367e:	4604      	mov	r4, r0
 8003680:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8003682:	f7ff ffad 	bl	80035e0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8003686:	19a9      	adds	r1, r5, r6
 8003688:	463a      	mov	r2, r7
 800368a:	4620      	mov	r0, r4
 800368c:	b289      	uxth	r1, r1
 800368e:	f7ff ffa7 	bl	80035e0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8003692:	4632      	mov	r2, r6
 8003694:	4629      	mov	r1, r5
 8003696:	4620      	mov	r0, r4
 8003698:	f7ff ffc6 	bl	8003628 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 800369c:	19e0      	adds	r0, r4, r7
 800369e:	4632      	mov	r2, r6
 80036a0:	4629      	mov	r1, r5
 80036a2:	b280      	uxth	r0, r0
}
 80036a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80036a8:	f7ff bfbe 	b.w	8003628 <BSP_LCD_DrawVLine>

080036ac <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <BSP_LCD_DrawPixel+0x2c>)
{
 80036ae:	b530      	push	{r4, r5, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	2534      	movs	r5, #52	; 0x34
 80036b4:	4c09      	ldr	r4, [pc, #36]	; (80036dc <BSP_LCD_DrawPixel+0x30>)
 80036b6:	fb05 4303 	mla	r3, r5, r3, r4
 80036ba:	e9d3 5417 	ldrd	r5, r4, [r3, #92]	; 0x5c
 80036be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c0:	fb04 0101 	mla	r1, r4, r1, r0
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d103      	bne.n	80036d0 <BSP_LCD_DrawPixel+0x24>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80036c8:	b292      	uxth	r2, r2
 80036ca:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
}
 80036ce:	bd30      	pop	{r4, r5, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80036d0:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
}
 80036d4:	e7fb      	b.n	80036ce <BSP_LCD_DrawPixel+0x22>
 80036d6:	bf00      	nop
 80036d8:	20006d14 	.word	0x20006d14
 80036dc:	20008048 	.word	0x20008048

080036e0 <BSP_LCD_DisplayChar>:
{
 80036e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e4:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80036e6:	f1a2 0520 	sub.w	r5, r2, #32
  for(i = 0; i < height; i++)
 80036ea:	f04f 0800 	mov.w	r8, #0
{
 80036ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80036f2:	4827      	ldr	r0, [pc, #156]	; (8003790 <BSP_LCD_DisplayChar+0xb0>)
 80036f4:	210c      	movs	r1, #12
 80036f6:	f8d0 b040 	ldr.w	fp, [r0, #64]	; 0x40
 80036fa:	fb01 010b 	mla	r1, r1, fp, r0
 80036fe:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003700:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 8003704:	88cb      	ldrh	r3, [r1, #6]
 8003706:	f10a 0607 	add.w	r6, sl, #7
 800370a:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800370c:	435d      	muls	r5, r3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800370e:	10f6      	asrs	r6, r6, #3
 8003710:	9300      	str	r3, [sp, #0]
  offset =  8 *((width + 7)/8) -  width ;
 8003712:	ebca 00c6 	rsb	r0, sl, r6, lsl #3
 8003716:	fb06 2505 	mla	r5, r6, r5, r2
      if(line & (1 << (width- j + offset- 1))) 
 800371a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800371e:	fa52 f380 	uxtab	r3, r2, r0
 8003722:	9303      	str	r3, [sp, #12]
 8003724:	9b02      	ldr	r3, [sp, #8]
 8003726:	eb03 0908 	add.w	r9, r3, r8
  for(i = 0; i < height; i++)
 800372a:	9b00      	ldr	r3, [sp, #0]
 800372c:	4598      	cmp	r8, r3
 800372e:	fa1f f989 	uxth.w	r9, r9
 8003732:	d302      	bcc.n	800373a <BSP_LCD_DisplayChar+0x5a>
}
 8003734:	b005      	add	sp, #20
 8003736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 800373a:	2e01      	cmp	r6, #1
 800373c:	782c      	ldrb	r4, [r5, #0]
 800373e:	d004      	beq.n	800374a <BSP_LCD_DisplayChar+0x6a>
 8003740:	2e02      	cmp	r6, #2
 8003742:	d109      	bne.n	8003758 <BSP_LCD_DisplayChar+0x78>
      line =  (pchar[0]<< 8) | pchar[1];      
 8003744:	882c      	ldrh	r4, [r5, #0]
 8003746:	ba64      	rev16	r4, r4
 8003748:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 800374a:	2700      	movs	r7, #0
 800374c:	45ba      	cmp	sl, r7
 800374e:	d80a      	bhi.n	8003766 <BSP_LCD_DisplayChar+0x86>
  for(i = 0; i < height; i++)
 8003750:	f108 0801 	add.w	r8, r8, #1
 8003754:	4435      	add	r5, r6
 8003756:	e7e5      	b.n	8003724 <BSP_LCD_DisplayChar+0x44>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003758:	786a      	ldrb	r2, [r5, #1]
 800375a:	0424      	lsls	r4, r4, #16
 800375c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8003760:	78aa      	ldrb	r2, [r5, #2]
 8003762:	4314      	orrs	r4, r2
 8003764:	e7f1      	b.n	800374a <BSP_LCD_DisplayChar+0x6a>
 8003766:	9b01      	ldr	r3, [sp, #4]
      if(line & (1 << (width- j + offset- 1))) 
 8003768:	2201      	movs	r2, #1
 800376a:	19d8      	adds	r0, r3, r7
 800376c:	9b03      	ldr	r3, [sp, #12]
 800376e:	1bd9      	subs	r1, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <BSP_LCD_DisplayChar+0xb0>)
 8003772:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 8003774:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 8003776:	408a      	lsls	r2, r1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003778:	4649      	mov	r1, r9
      if(line & (1 << (width- j + offset- 1))) 
 800377a:	4222      	tst	r2, r4
 800377c:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003780:	fb02 320b 	mla	r2, r2, fp, r3
 8003784:	bf14      	ite	ne
 8003786:	6c52      	ldrne	r2, [r2, #68]	; 0x44
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003788:	6c92      	ldreq	r2, [r2, #72]	; 0x48
 800378a:	f7ff ff8f 	bl	80036ac <BSP_LCD_DrawPixel>
 800378e:	e7dd      	b.n	800374c <BSP_LCD_DisplayChar+0x6c>
 8003790:	20006d14 	.word	0x20006d14

08003794 <BSP_LCD_DisplayStringAt>:
{
 8003794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003798:	4607      	mov	r7, r0
 800379a:	460d      	mov	r5, r1
 800379c:	4614      	mov	r4, r2
 800379e:	1b10      	subs	r0, r2, r4
  while (*ptr++) size ++ ;
 80037a0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80037a4:	2900      	cmp	r1, #0
 80037a6:	d1fa      	bne.n	800379e <BSP_LCD_DisplayStringAt+0xa>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80037a8:	4a21      	ldr	r2, [pc, #132]	; (8003830 <BSP_LCD_DisplayStringAt+0x9c>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80037aa:	260c      	movs	r6, #12
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80037ac:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003834 <BSP_LCD_DisplayStringAt+0xa0>
 80037b0:	f04f 0e34 	mov.w	lr, #52	; 0x34
 80037b4:	6c11      	ldr	r1, [r2, #64]	; 0x40
  switch (Mode)
 80037b6:	2b01      	cmp	r3, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80037b8:	fb06 2601 	mla	r6, r6, r1, r2
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80037bc:	fb0e 8e01 	mla	lr, lr, r1, r8
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80037c0:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
 80037c2:	f8de 2060 	ldr.w	r2, [lr, #96]	; 0x60
 80037c6:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 80037ca:	fbb2 f2fc 	udiv	r2, r2, ip
  switch (Mode)
 80037ce:	d01a      	beq.n	8003806 <BSP_LCD_DisplayStringAt+0x72>
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d01f      	beq.n	8003814 <BSP_LCD_DisplayStringAt+0x80>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80037d4:	b23b      	sxth	r3, r7
    ref_column = 1;
 80037d6:	46a1      	mov	r9, r4
 80037d8:	2b00      	cmp	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80037da:	f04f 0334 	mov.w	r3, #52	; 0x34
    ref_column = 1;
 80037de:	bfd8      	it	le
 80037e0:	2701      	movle	r7, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80037e2:	fb03 8801 	mla	r8, r3, r1, r8
 80037e6:	eba9 0304 	sub.w	r3, r9, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80037ea:	88b0      	ldrh	r0, [r6, #4]
 80037ec:	f8d8 1060 	ldr.w	r1, [r8, #96]	; 0x60
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f819 2b01 	ldrb.w	r2, [r9], #1
 80037f6:	fb00 1313 	mls	r3, r0, r3, r1
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	4283      	cmp	r3, r0
 80037fe:	d300      	bcc.n	8003802 <BSP_LCD_DisplayStringAt+0x6e>
 8003800:	b96a      	cbnz	r2, 800381e <BSP_LCD_DisplayStringAt+0x8a>
}
 8003802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003806:	1a10      	subs	r0, r2, r0
 8003808:	fb0c f000 	mul.w	r0, ip, r0
 800380c:	eb07 0050 	add.w	r0, r7, r0, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003810:	b287      	uxth	r7, r0
      break;
 8003812:	e7df      	b.n	80037d4 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003814:	1a10      	subs	r0, r2, r0
 8003816:	fb10 f00c 	smulbb	r0, r0, ip
 800381a:	1bc0      	subs	r0, r0, r7
 800381c:	e7f8      	b.n	8003810 <BSP_LCD_DisplayStringAt+0x7c>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800381e:	4638      	mov	r0, r7
 8003820:	4629      	mov	r1, r5
 8003822:	f7ff ff5d 	bl	80036e0 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003826:	88b0      	ldrh	r0, [r6, #4]
 8003828:	4438      	add	r0, r7
 800382a:	b287      	uxth	r7, r0
 800382c:	e7db      	b.n	80037e6 <BSP_LCD_DisplayStringAt+0x52>
 800382e:	bf00      	nop
 8003830:	20006d14 	.word	0x20006d14
 8003834:	20008048 	.word	0x20008048

08003838 <BSP_LCD_DisplayStringAtLine>:
  return DrawProp[ActiveLayer].pFont;
 8003838:	4a08      	ldr	r2, [pc, #32]	; (800385c <BSP_LCD_DisplayStringAtLine+0x24>)
{  
 800383a:	b410      	push	{r4}
  return DrawProp[ActiveLayer].pFont;
 800383c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800383e:	240c      	movs	r4, #12
 8003840:	fb04 2303 	mla	r3, r4, r3, r2
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003844:	460a      	mov	r2, r1
}
 8003846:	f85d 4b04 	ldr.w	r4, [sp], #4
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800384a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384c:	88db      	ldrh	r3, [r3, #6]
 800384e:	fb13 f000 	smulbb	r0, r3, r0
 8003852:	2303      	movs	r3, #3
 8003854:	b281      	uxth	r1, r0
 8003856:	2000      	movs	r0, #0
 8003858:	f7ff bf9c 	b.w	8003794 <BSP_LCD_DisplayStringAt>
 800385c:	20006d14 	.word	0x20006d14

08003860 <BSP_LCD_DrawLine>:
{
 8003860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003864:	1a14      	subs	r4, r2, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003866:	1a5e      	subs	r6, r3, r1
{
 8003868:	b087      	sub	sp, #28
  x = x1;                       /* Start x off at the first pixel */
 800386a:	fa0f f980 	sxth.w	r9, r0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800386e:	2c00      	cmp	r4, #0
  y = y1;                       /* Start y off at the first pixel */
 8003870:	fa0f fa81 	sxth.w	sl, r1
 8003874:	f04f 0502 	mov.w	r5, #2
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003878:	bfb8      	it	lt
 800387a:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800387c:	2e00      	cmp	r6, #0
 800387e:	bfb8      	it	lt
 8003880:	4276      	neglt	r6, r6
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003882:	b224      	sxth	r4, r4
    xinc1 = -1;
 8003884:	4282      	cmp	r2, r0
 8003886:	bf2c      	ite	cs
 8003888:	2701      	movcs	r7, #1
 800388a:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
 800388e:	428b      	cmp	r3, r1
 8003890:	bf2c      	ite	cs
 8003892:	f04f 0801 	movcs.w	r8, #1
 8003896:	f04f 38ff 	movcc.w	r8, #4294967295
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800389a:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800389c:	42b4      	cmp	r4, r6
 800389e:	db0e      	blt.n	80038be <BSP_LCD_DrawLine+0x5e>
 80038a0:	9703      	str	r7, [sp, #12]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80038a2:	2700      	movs	r7, #0
    num = deltax / 2;
 80038a4:	fb94 f5f5 	sdiv	r5, r4, r5
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80038a8:	9704      	str	r7, [sp, #16]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80038aa:	f04f 0b00 	mov.w	fp, #0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <BSP_LCD_DrawLine+0xd0>)
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80038b0:	fa0f f28b 	sxth.w	r2, fp
 80038b4:	4294      	cmp	r4, r2
 80038b6:	da0f      	bge.n	80038d8 <BSP_LCD_DrawLine+0x78>
}
 80038b8:	b007      	add	sp, #28
 80038ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 80038be:	fb96 f5f5 	sdiv	r5, r6, r5
 80038c2:	4623      	mov	r3, r4
 80038c4:	f8cd 8010 	str.w	r8, [sp, #16]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80038c8:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 80038cc:	4634      	mov	r4, r6
 80038ce:	b22d      	sxth	r5, r5
 80038d0:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80038d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80038d6:	e7e8      	b.n	80038aa <BSP_LCD_DrawLine+0x4a>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80038d8:	fa1f f289 	uxth.w	r2, r9
 80038dc:	210c      	movs	r1, #12
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 80038de:	4435      	add	r5, r6
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80038e0:	9305      	str	r3, [sp, #20]
 80038e2:	9201      	str	r2, [sp, #4]
 80038e4:	fa1f f28a 	uxth.w	r2, sl
 80038e8:	9202      	str	r2, [sp, #8]
 80038ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ec:	fb01 3202 	mla	r2, r1, r2, r3
 80038f0:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 80038f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038f6:	f7ff fed9 	bl	80036ac <BSP_LCD_DrawPixel>
    if (num >= den)                           /* Check if numerator >= denominator */
 80038fa:	9b05      	ldr	r3, [sp, #20]
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 80038fc:	b2aa      	uxth	r2, r5
 80038fe:	b215      	sxth	r5, r2
    if (num >= den)                           /* Check if numerator >= denominator */
 8003900:	42ac      	cmp	r4, r5
 8003902:	dc09      	bgt.n	8003918 <BSP_LCD_DrawLine+0xb8>
      num -= den;                             /* Calculate the new numerator value */
 8003904:	1b15      	subs	r5, r2, r4
      x += xinc1;                             /* Change the x as appropriate */
 8003906:	9a01      	ldr	r2, [sp, #4]
 8003908:	443a      	add	r2, r7
      num -= den;                             /* Calculate the new numerator value */
 800390a:	b22d      	sxth	r5, r5
      x += xinc1;                             /* Change the x as appropriate */
 800390c:	fa0f f982 	sxth.w	r9, r2
      y += yinc1;                             /* Change the y as appropriate */
 8003910:	9a02      	ldr	r2, [sp, #8]
 8003912:	4442      	add	r2, r8
 8003914:	fa0f fa82 	sxth.w	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
 8003918:	9a03      	ldr	r2, [sp, #12]
 800391a:	f10b 0b01 	add.w	fp, fp, #1
 800391e:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
 8003920:	9a04      	ldr	r2, [sp, #16]
 8003922:	4492      	add	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
 8003924:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
 8003928:	fa0f fa8a 	sxth.w	sl, sl
 800392c:	e7c0      	b.n	80038b0 <BSP_LCD_DrawLine+0x50>
 800392e:	bf00      	nop
 8003930:	20006d14 	.word	0x20006d14

08003934 <FillTriangle>:
{ 
 8003934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003938:	b087      	sub	sp, #28
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800393a:	1a0c      	subs	r4, r1, r0
  x = x1;                       /* Start x off at the first pixel */
 800393c:	fa0f f980 	sxth.w	r9, r0
 8003940:	2502      	movs	r5, #2
{ 
 8003942:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003946:	2c00      	cmp	r4, #0
{ 
 8003948:	9204      	str	r2, [sp, #16]
  y = y1;                       /* Start y off at the first pixel */
 800394a:	fa0f fa83 	sxth.w	sl, r3
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800394e:	eba8 0603 	sub.w	r6, r8, r3
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003952:	bfb8      	it	lt
 8003954:	4264      	neglt	r4, r4
{ 
 8003956:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800395a:	2e00      	cmp	r6, #0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800395c:	b224      	sxth	r4, r4
{ 
 800395e:	9205      	str	r2, [sp, #20]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003960:	bfb8      	it	lt
 8003962:	4276      	neglt	r6, r6
    xinc1 = -1;
 8003964:	4281      	cmp	r1, r0
 8003966:	bf2c      	ite	cs
 8003968:	2701      	movcs	r7, #1
 800396a:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
 800396e:	4598      	cmp	r8, r3
 8003970:	bf2c      	ite	cs
 8003972:	f04f 0801 	movcs.w	r8, #1
 8003976:	f04f 38ff 	movcc.w	r8, #4294967295
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800397a:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800397c:	42b4      	cmp	r4, r6
 800397e:	db0d      	blt.n	800399c <FillTriangle+0x68>
 8003980:	9702      	str	r7, [sp, #8]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003982:	2700      	movs	r7, #0
    num = deltax / 2;
 8003984:	fb94 f5f5 	sdiv	r5, r4, r5
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003988:	9703      	str	r7, [sp, #12]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800398a:	f04f 0b00 	mov.w	fp, #0
 800398e:	fa0f f38b 	sxth.w	r3, fp
 8003992:	429c      	cmp	r4, r3
 8003994:	da0f      	bge.n	80039b6 <FillTriangle+0x82>
}
 8003996:	b007      	add	sp, #28
 8003998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 800399c:	fb96 f5f5 	sdiv	r5, r6, r5
 80039a0:	4623      	mov	r3, r4
 80039a2:	f8cd 800c 	str.w	r8, [sp, #12]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80039a6:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 80039aa:	4634      	mov	r4, r6
 80039ac:	b22d      	sxth	r5, r5
 80039ae:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80039b0:	f8cd 8008 	str.w	r8, [sp, #8]
 80039b4:	e7e9      	b.n	800398a <FillTriangle+0x56>
    BSP_LCD_DrawLine(x, y, x3, y3);
 80039b6:	fa1f f389 	uxth.w	r3, r9
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80039ba:	4435      	add	r5, r6
    BSP_LCD_DrawLine(x, y, x3, y3);
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	fa1f f38a 	uxth.w	r3, sl
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039cc:	f7ff ff48 	bl	8003860 <BSP_LCD_DrawLine>
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80039d0:	b2ab      	uxth	r3, r5
 80039d2:	b21d      	sxth	r5, r3
    if (num >= den)             /* Check if numerator >= denominator */
 80039d4:	42ac      	cmp	r4, r5
 80039d6:	dc09      	bgt.n	80039ec <FillTriangle+0xb8>
      num -= den;               /* Calculate the new numerator value */
 80039d8:	1b1d      	subs	r5, r3, r4
      x += xinc1;               /* Change the x as appropriate */
 80039da:	9b00      	ldr	r3, [sp, #0]
 80039dc:	443b      	add	r3, r7
      num -= den;               /* Calculate the new numerator value */
 80039de:	b22d      	sxth	r5, r5
      x += xinc1;               /* Change the x as appropriate */
 80039e0:	fa0f f983 	sxth.w	r9, r3
      y += yinc1;               /* Change the y as appropriate */
 80039e4:	9b01      	ldr	r3, [sp, #4]
 80039e6:	4443      	add	r3, r8
 80039e8:	fa0f fa83 	sxth.w	sl, r3
    x += xinc2;                 /* Change the x as appropriate */
 80039ec:	9b02      	ldr	r3, [sp, #8]
 80039ee:	f10b 0b01 	add.w	fp, fp, #1
 80039f2:	4499      	add	r9, r3
    y += yinc2;                 /* Change the y as appropriate */
 80039f4:	9b03      	ldr	r3, [sp, #12]
 80039f6:	449a      	add	sl, r3
    x += xinc2;                 /* Change the x as appropriate */
 80039f8:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                 /* Change the y as appropriate */
 80039fc:	fa0f fa8a 	sxth.w	sl, sl
 8003a00:	e7c5      	b.n	800398e <FillTriangle+0x5a>
	...

08003a04 <BSP_LCD_DrawCircle>:
{
 8003a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decision = 3 - (Radius << 1);
 8003a08:	0054      	lsls	r4, r2, #1
{
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	4681      	mov	r9, r0
 8003a0e:	468a      	mov	sl, r1
  decision = 3 - (Radius << 1);
 8003a10:	f1c4 0403 	rsb	r4, r4, #3
  current_y = Radius;
 8003a14:	4616      	mov	r6, r2
  current_x = 0;
 8003a16:	f04f 0800 	mov.w	r8, #0
 8003a1a:	fa1f f388 	uxth.w	r3, r8
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003a1e:	4a32      	ldr	r2, [pc, #200]	; (8003ae8 <BSP_LCD_DrawCircle+0xe4>)
 8003a20:	b2b5      	uxth	r5, r6
 8003a22:	210c      	movs	r1, #12
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	444b      	add	r3, r9
 8003a28:	ebaa 0b05 	sub.w	fp, sl, r5
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	fa1f fb8b 	uxth.w	fp, fp
 8003a32:	9304      	str	r3, [sp, #16]
 8003a34:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a36:	9804      	ldr	r0, [sp, #16]
 8003a38:	fb01 2303 	mla	r3, r1, r3, r2
 8003a3c:	4659      	mov	r1, fp
 8003a3e:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8003a40:	463a      	mov	r2, r7
 8003a42:	f7ff fe33 	bl	80036ac <BSP_LCD_DrawPixel>
 8003a46:	9b01      	ldr	r3, [sp, #4]
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003a48:	4659      	mov	r1, fp
 8003a4a:	463a      	mov	r2, r7
 8003a4c:	eba9 0303 	sub.w	r3, r9, r3
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003a50:	eba9 0b05 	sub.w	fp, r9, r5
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	fa1f fb8b 	uxth.w	fp, fp
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	9303      	str	r3, [sp, #12]
 8003a5e:	f7ff fe25 	bl	80036ac <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003a62:	eb05 0309 	add.w	r3, r5, r9
 8003a66:	463a      	mov	r2, r7
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003a68:	4455      	add	r5, sl
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003a6a:	b29b      	uxth	r3, r3
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003a6c:	b2ad      	uxth	r5, r5
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003a6e:	9302      	str	r3, [sp, #8]
 8003a70:	9b01      	ldr	r3, [sp, #4]
 8003a72:	9802      	ldr	r0, [sp, #8]
 8003a74:	ebaa 0303 	sub.w	r3, sl, r3
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	9305      	str	r3, [sp, #20]
 8003a7e:	f7ff fe15 	bl	80036ac <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003a82:	9b05      	ldr	r3, [sp, #20]
 8003a84:	463a      	mov	r2, r7
 8003a86:	4658      	mov	r0, fp
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f7ff fe0f 	bl	80036ac <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003a8e:	4629      	mov	r1, r5
 8003a90:	463a      	mov	r2, r7
 8003a92:	9804      	ldr	r0, [sp, #16]
 8003a94:	f7ff fe0a 	bl	80036ac <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003a98:	4629      	mov	r1, r5
 8003a9a:	463a      	mov	r2, r7
 8003a9c:	9803      	ldr	r0, [sp, #12]
 8003a9e:	f7ff fe05 	bl	80036ac <BSP_LCD_DrawPixel>
 8003aa2:	9b01      	ldr	r3, [sp, #4]
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003aa4:	463a      	mov	r2, r7
 8003aa6:	9802      	ldr	r0, [sp, #8]
 8003aa8:	eb03 050a 	add.w	r5, r3, sl
 8003aac:	b2ad      	uxth	r5, r5
 8003aae:	4629      	mov	r1, r5
 8003ab0:	f7ff fdfc 	bl	80036ac <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003ab4:	463a      	mov	r2, r7
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	4658      	mov	r0, fp
 8003aba:	f7ff fdf7 	bl	80036ac <BSP_LCD_DrawPixel>
    if (decision < 0)
 8003abe:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
 8003ac0:	bfb1      	iteee	lt
 8003ac2:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
 8003ac4:	eba8 0306 	subge.w	r3, r8, r6
 8003ac8:	340a      	addge	r4, #10
      current_y--;
 8003aca:	f106 36ff 	addge.w	r6, r6, #4294967295
      decision += (current_x << 2) + 6;
 8003ace:	bfb8      	it	lt
 8003ad0:	eb04 0488 	addlt.w	r4, r4, r8, lsl #2
    current_x++;
 8003ad4:	f108 0801 	add.w	r8, r8, #1
      decision += ((current_x - current_y) << 2) + 10;
 8003ad8:	bfa8      	it	ge
 8003ada:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
 8003ade:	4546      	cmp	r6, r8
 8003ae0:	d29b      	bcs.n	8003a1a <BSP_LCD_DrawCircle+0x16>
}
 8003ae2:	b007      	add	sp, #28
 8003ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae8:	20006d14 	.word	0x20006d14

08003aec <BSP_LCD_FillRect>:
{
 8003aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003aee:	4d0f      	ldr	r5, [pc, #60]	; (8003b2c <BSP_LCD_FillRect+0x40>)
 8003af0:	240c      	movs	r4, #12
 8003af2:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 8003af4:	fb04 5407 	mla	r4, r4, r7, r5
 8003af8:	2534      	movs	r5, #52	; 0x34
 8003afa:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 8003afe:	4c0c      	ldr	r4, [pc, #48]	; (8003b30 <BSP_LCD_FillRect+0x44>)
 8003b00:	fb05 4507 	mla	r5, r5, r7, r4
 8003b04:	e9d5 4617 	ldrd	r4, r6, [r5, #92]	; 0x5c
 8003b08:	fb06 0101 	mla	r1, r6, r1, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003b0c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003b0e:	1ab6      	subs	r6, r6, r2
 8003b10:	f8cd c004 	str.w	ip, [sp, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003b14:	2802      	cmp	r0, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003b16:	4638      	mov	r0, r7
 8003b18:	9600      	str	r6, [sp, #0]
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003b1a:	bf0c      	ite	eq
 8003b1c:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003b20:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003b24:	f7ff fc8c 	bl	8003440 <LL_FillBuffer>
}
 8003b28:	b003      	add	sp, #12
 8003b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b2c:	20006d14 	.word	0x20006d14
 8003b30:	20008048 	.word	0x20008048

08003b34 <BSP_LCD_ClearStringLine>:
{
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8003b36:	4c0d      	ldr	r4, [pc, #52]	; (8003b6c <BSP_LCD_ClearStringLine+0x38>)
 8003b38:	250c      	movs	r5, #12
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003b3a:	2734      	movs	r7, #52	; 0x34
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8003b3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b3e:	fb05 4302 	mla	r3, r5, r2, r4
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8003b42:	e9d3 6111 	ldrd	r6, r1, [r3, #68]	; 0x44
 8003b46:	6459      	str	r1, [r3, #68]	; 0x44
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003b4a:	4909      	ldr	r1, [pc, #36]	; (8003b70 <BSP_LCD_ClearStringLine+0x3c>)
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8003b4c:	88db      	ldrh	r3, [r3, #6]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003b4e:	fb07 1202 	mla	r2, r7, r2, r1
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8003b52:	fb10 f103 	smulbb	r1, r0, r3
 8003b56:	2000      	movs	r0, #0
 8003b58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8003b5c:	b289      	uxth	r1, r1
 8003b5e:	f7ff ffc5 	bl	8003aec <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = color_backup;
 8003b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b64:	fb05 4403 	mla	r4, r5, r3, r4
 8003b68:	6466      	str	r6, [r4, #68]	; 0x44
}
 8003b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b6c:	20006d14 	.word	0x20006d14
 8003b70:	20008048 	.word	0x20008048

08003b74 <BSP_LCD_FillCircle>:
{
 8003b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decision = 3 - (Radius << 1);
 8003b78:	0054      	lsls	r4, r2, #1
{
 8003b7a:	4682      	mov	sl, r0
 8003b7c:	4689      	mov	r9, r1
 8003b7e:	4693      	mov	fp, r2
  decision = 3 - (Radius << 1);
 8003b80:	f1c4 0403 	rsb	r4, r4, #3
  current_y = Radius;
 8003b84:	4616      	mov	r6, r2
  current_x = 0;
 8003b86:	2500      	movs	r5, #0
    if(current_y > 0) 
 8003b88:	b1be      	cbz	r6, 8003bba <BSP_LCD_FillCircle+0x46>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003b8a:	b2b7      	uxth	r7, r6
 8003b8c:	fa1f f885 	uxth.w	r8, r5
 8003b90:	ebaa 0307 	sub.w	r3, sl, r7
 8003b94:	007f      	lsls	r7, r7, #1
 8003b96:	eb09 0108 	add.w	r1, r9, r8
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	b2bf      	uxth	r7, r7
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	b289      	uxth	r1, r1
 8003ba2:	463a      	mov	r2, r7
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	f7ff fd1b 	bl	80035e0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003baa:	eba9 0108 	sub.w	r1, r9, r8
 8003bae:	9b01      	ldr	r3, [sp, #4]
 8003bb0:	463a      	mov	r2, r7
 8003bb2:	b289      	uxth	r1, r1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fd13 	bl	80035e0 <BSP_LCD_DrawHLine>
    if(current_x > 0) 
 8003bba:	b1bd      	cbz	r5, 8003bec <BSP_LCD_FillCircle+0x78>
 8003bbc:	b2af      	uxth	r7, r5
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003bbe:	fa1f f886 	uxth.w	r8, r6
 8003bc2:	ebaa 0307 	sub.w	r3, sl, r7
 8003bc6:	007f      	lsls	r7, r7, #1
 8003bc8:	eba9 0108 	sub.w	r1, r9, r8
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	b2bf      	uxth	r7, r7
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	b289      	uxth	r1, r1
 8003bd4:	463a      	mov	r2, r7
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	f7ff fd02 	bl	80035e0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003bdc:	eb08 0109 	add.w	r1, r8, r9
 8003be0:	9b01      	ldr	r3, [sp, #4]
 8003be2:	463a      	mov	r2, r7
 8003be4:	b289      	uxth	r1, r1
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff fcfa 	bl	80035e0 <BSP_LCD_DrawHLine>
    if (decision < 0)
 8003bec:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
 8003bee:	bfb1      	iteee	lt
 8003bf0:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
 8003bf2:	1bab      	subge	r3, r5, r6
 8003bf4:	340a      	addge	r4, #10
      current_y--;
 8003bf6:	f106 36ff 	addge.w	r6, r6, #4294967295
      decision += (current_x << 2) + 6;
 8003bfa:	bfb8      	it	lt
 8003bfc:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
    current_x++;
 8003c00:	f105 0501 	add.w	r5, r5, #1
      decision += ((current_x - current_y) << 2) + 10;
 8003c04:	bfa8      	it	ge
 8003c06:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
 8003c0a:	42ae      	cmp	r6, r5
 8003c0c:	d2bc      	bcs.n	8003b88 <BSP_LCD_FillCircle+0x14>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003c0e:	465a      	mov	r2, fp
 8003c10:	4649      	mov	r1, r9
 8003c12:	4650      	mov	r0, sl
}
 8003c14:	b003      	add	sp, #12
 8003c16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003c1a:	f7ff bef3 	b.w	8003a04 <BSP_LCD_DrawCircle>

08003c1e <BSP_LCD_FillPolygon>:
{
 8003c1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  image_left = image_right = Points->X;
 8003c22:	f8b0 a000 	ldrh.w	sl, [r0]
{
 8003c26:	460f      	mov	r7, r1
  image_top= image_bottom = Points->Y;
 8003c28:	f8b0 b002 	ldrh.w	fp, [r0, #2]
{
 8003c2c:	b087      	sub	sp, #28
  image_left = image_right = Points->X;
 8003c2e:	4656      	mov	r6, sl
 8003c30:	4654      	mov	r4, sl
  image_top= image_bottom = Points->Y;
 8003c32:	465d      	mov	r5, fp
 8003c34:	4659      	mov	r1, fp
  for(counter = 1; counter < PointCount; counter++)
 8003c36:	2301      	movs	r3, #1
 8003c38:	42bb      	cmp	r3, r7
 8003c3a:	db2f      	blt.n	8003c9c <BSP_LCD_FillPolygon+0x7e>
  if(PointCount < 2)
 8003c3c:	2f01      	cmp	r7, #1
 8003c3e:	d92a      	bls.n	8003c96 <BSP_LCD_FillPolygon+0x78>
  X_center = (image_left + image_right)/2;
 8003c40:	4434      	add	r4, r6
  Y_center = (image_bottom + image_top)/2;
 8003c42:	440d      	add	r5, r1
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8003c44:	f04f 0800 	mov.w	r8, #0
 8003c48:	1d06      	adds	r6, r0, #4
 8003c4a:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8003c4e:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8003c52:	f8cd 8014 	str.w	r8, [sp, #20]
  while(--PointCount)
 8003c56:	3f01      	subs	r7, #1
 8003c58:	3604      	adds	r6, #4
 8003c5a:	b2bf      	uxth	r7, r7
 8003c5c:	bb9f      	cbnz	r7, 8003cc6 <BSP_LCD_FillPolygon+0xa8>
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 8003c5e:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 8003c62:	fa1f f688 	uxth.w	r6, r8
 8003c66:	465b      	mov	r3, fp
 8003c68:	4622      	mov	r2, r4
 8003c6a:	4639      	mov	r1, r7
 8003c6c:	4650      	mov	r0, sl
 8003c6e:	e9cd 6500 	strd	r6, r5, [sp]
 8003c72:	f7ff fe5f 	bl	8003934 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8003c76:	465b      	mov	r3, fp
 8003c78:	463a      	mov	r2, r7
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	4650      	mov	r0, sl
 8003c7e:	e9cd 5600 	strd	r5, r6, [sp]
 8003c82:	f7ff fe57 	bl	8003934 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 8003c86:	462b      	mov	r3, r5
 8003c88:	4652      	mov	r2, sl
 8003c8a:	4639      	mov	r1, r7
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	e9cd 6b00 	strd	r6, fp, [sp]
 8003c92:	f7ff fe4f 	bl	8003934 <FillTriangle>
}
 8003c96:	b007      	add	sp, #28
 8003c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pixelX = POLY_X(counter);
 8003c9c:	f930 2023 	ldrsh.w	r2, [r0, r3, lsl #2]
 8003ca0:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 8003ca4:	3301      	adds	r3, #1
    if(pixelX < image_left)
 8003ca6:	42a2      	cmp	r2, r4
 8003ca8:	b21b      	sxth	r3, r3
      image_left = pixelX;
 8003caa:	bfb8      	it	lt
 8003cac:	b294      	uxthlt	r4, r2
    if(pixelX > image_right)
 8003cae:	42b2      	cmp	r2, r6
      image_right = pixelX;
 8003cb0:	bfc8      	it	gt
 8003cb2:	b296      	uxthgt	r6, r2
    pixelY = POLY_Y(counter);
 8003cb4:	f9bc 2002 	ldrsh.w	r2, [ip, #2]
    if(pixelY < image_top)
 8003cb8:	428a      	cmp	r2, r1
      image_top = pixelY;
 8003cba:	bfb8      	it	lt
 8003cbc:	b291      	uxthlt	r1, r2
    if(pixelY > image_bottom)
 8003cbe:	42aa      	cmp	r2, r5
      image_bottom = pixelY;
 8003cc0:	bfc8      	it	gt
 8003cc2:	b295      	uxthgt	r5, r2
 8003cc4:	e7b8      	b.n	8003c38 <BSP_LCD_FillPolygon+0x1a>
    X2 = Points->X;
 8003cc6:	f936 3c04 	ldrsh.w	r3, [r6, #-4]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 8003cca:	4622      	mov	r2, r4
    Y2 = Points->Y;    
 8003ccc:	f936 8c02 	ldrsh.w	r8, [r6, #-2]
    X2 = Points->X;
 8003cd0:	9305      	str	r3, [sp, #20]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 8003cd2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003cd6:	f836 9c08 	ldrh.w	r9, [r6, #-8]
 8003cda:	9302      	str	r3, [sp, #8]
 8003cdc:	f836 3c06 	ldrh.w	r3, [r6, #-6]
 8003ce0:	4648      	mov	r0, r9
 8003ce2:	9902      	ldr	r1, [sp, #8]
 8003ce4:	9303      	str	r3, [sp, #12]
 8003ce6:	fa1f f388 	uxth.w	r3, r8
 8003cea:	9304      	str	r3, [sp, #16]
 8003cec:	e9cd 3500 	strd	r3, r5, [sp]
 8003cf0:	9b03      	ldr	r3, [sp, #12]
 8003cf2:	f7ff fe1f 	bl	8003934 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8003cf6:	9b04      	ldr	r3, [sp, #16]
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	4648      	mov	r0, r9
 8003cfc:	e9cd 5300 	strd	r5, r3, [sp]
 8003d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d04:	f7ff fe16 	bl	8003934 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 8003d08:	9b03      	ldr	r3, [sp, #12]
 8003d0a:	464a      	mov	r2, r9
 8003d0c:	9902      	ldr	r1, [sp, #8]
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	4620      	mov	r0, r4
 8003d12:	9b04      	ldr	r3, [sp, #16]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	462b      	mov	r3, r5
 8003d18:	f7ff fe0c 	bl	8003934 <FillTriangle>
 8003d1c:	e79b      	b.n	8003c56 <BSP_LCD_FillPolygon+0x38>
	...

08003d20 <BSP_LCD_DisplayOn>:
{
 8003d20:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d28:	4808      	ldr	r0, [pc, #32]	; (8003d4c <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	6993      	ldr	r3, [r2, #24]
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003d34:	2201      	movs	r2, #1
 8003d36:	f001 f887 	bl	8004e48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2108      	movs	r1, #8
 8003d3e:	4804      	ldr	r0, [pc, #16]	; (8003d50 <BSP_LCD_DisplayOn+0x30>)
}
 8003d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003d44:	f001 b880 	b.w	8004e48 <HAL_GPIO_WritePin>
 8003d48:	20008048 	.word	0x20008048
 8003d4c:	40022000 	.word	0x40022000
 8003d50:	40022800 	.word	0x40022800

08003d54 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003d54:	4b4b      	ldr	r3, [pc, #300]	; (8003e84 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003d56:	484c      	ldr	r0, [pc, #304]	; (8003e88 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d5a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 8003d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
{
 8003d62:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d66:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003d68:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003d6a:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003d6c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003d70:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003d74:	4e45      	ldr	r6, [pc, #276]	; (8003e8c <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003d76:	9200      	str	r2, [sp, #0]
 8003d78:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
 8003d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d84:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8003d88:	9201      	str	r2, [sp, #4]
 8003d8a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8e:	f042 0210 	orr.w	r2, r2, #16
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
 8003d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d96:	f002 0210 	and.w	r2, r2, #16
 8003d9a:	9202      	str	r2, [sp, #8]
 8003d9c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
 8003da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003dac:	9203      	str	r2, [sp, #12]
 8003dae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
 8003db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dba:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003dbe:	9204      	str	r2, [sp, #16]
 8003dc0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
 8003dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dcc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003dd0:	9205      	str	r2, [sp, #20]
 8003dd2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
 8003ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dde:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003de2:	9206      	str	r2, [sp, #24]
 8003de4:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
 8003dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003df4:	9207      	str	r2, [sp, #28]
 8003df6:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003e02:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e08:	9308      	str	r3, [sp, #32]
 8003e0a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003e14:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003e18:	f000 ff28 	bl	8004c6c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003e1c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003e1e:	a909      	add	r1, sp, #36	; 0x24
 8003e20:	481b      	ldr	r0, [pc, #108]	; (8003e90 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003e22:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e24:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003e28:	f000 ff20 	bl	8004c6c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003e2c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003e30:	a909      	add	r1, sp, #36	; 0x24
 8003e32:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e34:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e36:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003e3a:	f000 ff17 	bl	8004c6c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003e3e:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003e42:	a909      	add	r1, sp, #36	; 0x24
 8003e44:	4813      	ldr	r0, [pc, #76]	; (8003e94 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e46:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e48:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003e4c:	f000 ff0e 	bl	8004c6c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003e50:	23f7      	movs	r3, #247	; 0xf7
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e52:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003e54:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003e56:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e58:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003e5c:	4c0e      	ldr	r4, [pc, #56]	; (8003e98 <BSP_LCD_MspInit+0x144>)
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f000 ff04 	bl	8004c6c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003e64:	a909      	add	r1, sp, #36	; 0x24
 8003e66:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003e68:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003e6a:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003e6c:	f000 fefe 	bl	8004c6c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003e70:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003e72:	a909      	add	r1, sp, #36	; 0x24
 8003e74:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003e76:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003e7a:	f000 fef7 	bl	8004c6c <HAL_GPIO_Init>
}
 8003e7e:	b00f      	add	sp, #60	; 0x3c
 8003e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40022000 	.word	0x40022000
 8003e90:	40021800 	.word	0x40021800
 8003e94:	40022400 	.word	0x40022400
 8003e98:	40022800 	.word	0x40022800

08003e9c <BSP_LCD_Init>:
{    
 8003e9c:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003e9e:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003ea0:	4c24      	ldr	r4, [pc, #144]	; (8003f34 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003ea2:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003ea4:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003ea6:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003eaa:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003eae:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003eb2:	230b      	movs	r3, #11
 8003eb4:	e9c4 1307 	strd	r1, r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003eb8:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003ebc:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003ebe:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003ec2:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003ec6:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003ec8:	e9c4 3c0b 	strd	r3, ip, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003ecc:	f7fc fed2 	bl	8000c74 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003ed0:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 8003ed4:	f44f 7388 	mov.w	r3, #272	; 0x110
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003ed8:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003eda:	e9c4 e318 	strd	lr, r3, [r4, #96]	; 0x60
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003ee2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003ee6:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003eea:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hLtdcHandler.Instance = LTDC;
 8003eee:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <BSP_LCD_Init+0x9c>)
 8003ef0:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003ef2:	f002 f818 	bl	8005f26 <HAL_LTDC_GetState>
 8003ef6:	4601      	mov	r1, r0
 8003ef8:	b910      	cbnz	r0, 8003f00 <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003efa:	4620      	mov	r0, r4
 8003efc:	f7ff ff2a 	bl	8003d54 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8003f00:	480c      	ldr	r0, [pc, #48]	; (8003f34 <BSP_LCD_Init+0x98>)
 8003f02:	f001 ff7b 	bl	8005dfc <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003f06:	2201      	movs	r2, #1
 8003f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f0c:	480b      	ldr	r0, [pc, #44]	; (8003f3c <BSP_LCD_Init+0xa0>)
 8003f0e:	f000 ff9b 	bl	8004e48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003f12:	2201      	movs	r2, #1
 8003f14:	2108      	movs	r1, #8
 8003f16:	480a      	ldr	r0, [pc, #40]	; (8003f40 <BSP_LCD_Init+0xa4>)
 8003f18:	f000 ff96 	bl	8004e48 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8003f1c:	f000 f920 	bl	8004160 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8003f20:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <BSP_LCD_Init+0xa8>)
 8003f22:	210c      	movs	r1, #12
}
 8003f24:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 8003f26:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003f28:	fb01 2303 	mla	r3, r1, r3, r2
 8003f2c:	4a06      	ldr	r2, [pc, #24]	; (8003f48 <BSP_LCD_Init+0xac>)
 8003f2e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003f30:	bd10      	pop	{r4, pc}
 8003f32:	bf00      	nop
 8003f34:	20008048 	.word	0x20008048
 8003f38:	40016800 	.word	0x40016800
 8003f3c:	40022000 	.word	0x40022000
 8003f40:	40022800 	.word	0x40022800
 8003f44:	20006d14 	.word	0x20006d14
 8003f48:	2000008c 	.word	0x2000008c

08003f4c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003f50:	4c21      	ldr	r4, [pc, #132]	; (8003fd8 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003f52:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003f54:	4d21      	ldr	r5, [pc, #132]	; (8003fdc <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 8003f56:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003f5a:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003f5c:	4621      	mov	r1, r4
{
 8003f5e:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f64:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8003f66:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003f6a:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8003f6e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003f72:	f003 f923 	bl	80071bc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003f76:	4630      	mov	r0, r6
 8003f78:	f000 fa9c 	bl	80044b4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003f7c:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003f7e:	4621      	mov	r1, r4
 8003f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f84:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003f86:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8003f8a:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003f8e:	f003 f915 	bl	80071bc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003f92:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003f94:	4621      	mov	r1, r4
 8003f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f9a:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003f9c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8003fa0:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8003fa2:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003fa6:	f003 f909 	bl	80071bc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003faa:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003fae:	4621      	mov	r1, r4
 8003fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003fb4:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003fb6:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003fb8:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8003fba:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003fbc:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8003fc0:	9b01      	ldr	r3, [sp, #4]
 8003fc2:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003fc4:	f003 f8fa 	bl	80071bc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003fc8:	4649      	mov	r1, r9
 8003fca:	4628      	mov	r0, r5
}
 8003fcc:	b003      	add	sp, #12
 8003fce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003fd2:	f003 b90a 	b.w	80071ea <HAL_SDRAM_ProgramRefreshRate>
 8003fd6:	bf00      	nop
 8003fd8:	20006df4 	.word	0x20006df4
 8003fdc:	200080f0 	.word	0x200080f0

08003fe0 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003fe0:	4b56      	ldr	r3, [pc, #344]	; (800413c <BSP_SDRAM_MspInit+0x15c>)
 8003fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
{  
 8003fe8:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8003fea:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8003fec:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8003fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8003ff0:	4606      	mov	r6, r0
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003ff2:	ac0e      	add	r4, sp, #56	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003ff4:	4852      	ldr	r0, [pc, #328]	; (8004140 <BSP_SDRAM_MspInit+0x160>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003ff6:	f002 0201 	and.w	r2, r2, #1
 8003ffa:	9201      	str	r2, [sp, #4]
 8003ffc:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8003ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004000:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
 8004006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004008:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800400c:	9202      	str	r2, [sp, #8]
 800400e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004012:	f042 0204 	orr.w	r2, r2, #4
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
 8004018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800401a:	f002 0204 	and.w	r2, r2, #4
 800401e:	9203      	str	r2, [sp, #12]
 8004020:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004024:	f042 0208 	orr.w	r2, r2, #8
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
 800402a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402c:	f002 0208 	and.w	r2, r2, #8
 8004030:	9204      	str	r2, [sp, #16]
 8004032:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004036:	f042 0210 	orr.w	r2, r2, #16
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
 800403c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403e:	f002 0210 	and.w	r2, r2, #16
 8004042:	9205      	str	r2, [sp, #20]
 8004044:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004048:	f042 0220 	orr.w	r2, r2, #32
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
 800404e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004050:	f002 0220 	and.w	r2, r2, #32
 8004054:	9206      	str	r2, [sp, #24]
 8004056:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
 8004060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004062:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004066:	9207      	str	r2, [sp, #28]
 8004068:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800406a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004072:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	9308      	str	r3, [sp, #32]
 800407c:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800407e:	2302      	movs	r3, #2
 8004080:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004084:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004086:	230c      	movs	r3, #12
 8004088:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800408a:	2308      	movs	r3, #8
 800408c:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004090:	4621      	mov	r1, r4
 8004092:	f000 fdeb 	bl	8004c6c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004096:	f24c 7303 	movw	r3, #50947	; 0xc703
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800409a:	4621      	mov	r1, r4
 800409c:	4829      	ldr	r0, [pc, #164]	; (8004144 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800409e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80040a0:	f000 fde4 	bl	8004c6c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80040a4:	f64f 7383 	movw	r3, #65411	; 0xff83
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80040a8:	4621      	mov	r1, r4
 80040aa:	4827      	ldr	r0, [pc, #156]	; (8004148 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80040ac:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80040ae:	f000 fddd 	bl	8004c6c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80040b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80040b6:	4621      	mov	r1, r4
 80040b8:	4824      	ldr	r0, [pc, #144]	; (800414c <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80040ba:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80040bc:	f000 fdd6 	bl	8004c6c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80040c0:	f248 1333 	movw	r3, #33075	; 0x8133
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80040c4:	4621      	mov	r1, r4
 80040c6:	4822      	ldr	r0, [pc, #136]	; (8004150 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80040c8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80040ca:	f000 fdcf 	bl	8004c6c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80040ce:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80040d0:	4621      	mov	r1, r4
 80040d2:	4820      	ldr	r0, [pc, #128]	; (8004154 <BSP_SDRAM_MspInit+0x174>)
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80040d4:	2400      	movs	r4, #0
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80040d6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80040d8:	f000 fdc8 	bl	8004c6c <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80040dc:	4b1e      	ldr	r3, [pc, #120]	; (8004158 <BSP_SDRAM_MspInit+0x178>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80040de:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80040e0:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80040e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80040e8:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80040ea:	641c      	str	r4, [r3, #64]	; 0x40
  dma_handle.Init.Mode                = DMA_NORMAL;
 80040ec:	62dc      	str	r4, [r3, #44]	; 0x2c
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80040ee:	e9c3 4205 	strd	r4, r2, [r3, #20]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80040f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040f6:	e9c3 1207 	strd	r1, r2, [r3, #28]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80040fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040fe:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004102:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004106:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800410a:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800410c:	e9c3 240e 	strd	r2, r4, [r3, #56]	; 0x38
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004110:	4a12      	ldr	r2, [pc, #72]	; (800415c <BSP_SDRAM_MspInit+0x17c>)
 8004112:	f845 2f10 	str.w	r2, [r5, #16]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004116:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004118:	6335      	str	r5, [r6, #48]	; 0x30
 800411a:	649e      	str	r6, [r3, #72]	; 0x48
  HAL_DMA_DeInit(&dma_handle);
 800411c:	f000 fad8 	bl	80046d0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004120:	4628      	mov	r0, r5
 8004122:	f000 fa57 	bl	80045d4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004126:	4622      	mov	r2, r4
 8004128:	210f      	movs	r1, #15
 800412a:	2038      	movs	r0, #56	; 0x38
 800412c:	f000 f9e6 	bl	80044fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004130:	2038      	movs	r0, #56	; 0x38
 8004132:	f000 fa15 	bl	8004560 <HAL_NVIC_EnableIRQ>
}
 8004136:	b00e      	add	sp, #56	; 0x38
 8004138:	bd70      	pop	{r4, r5, r6, pc}
 800413a:	bf00      	nop
 800413c:	40023800 	.word	0x40023800
 8004140:	40020800 	.word	0x40020800
 8004144:	40020c00 	.word	0x40020c00
 8004148:	40021000 	.word	0x40021000
 800414c:	40021400 	.word	0x40021400
 8004150:	40021800 	.word	0x40021800
 8004154:	40021c00 	.word	0x40021c00
 8004158:	20006df4 	.word	0x20006df4
 800415c:	40026410 	.word	0x40026410

08004160 <BSP_SDRAM_Init>:
{ 
 8004160:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004162:	4c1b      	ldr	r4, [pc, #108]	; (80041d0 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 8004164:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004166:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8004168:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 800416a:	4d1b      	ldr	r5, [pc, #108]	; (80041d8 <BSP_SDRAM_Init+0x78>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800416c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004170:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004172:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004174:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 8004176:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  Timing.ExitSelfRefreshDelay = 7;
 800417a:	e9c5 311c 	strd	r3, r1, [r5, #112]	; 0x70
  Timing.RowCycleDelay        = 7;
 800417e:	e9c5 211e 	strd	r2, r1, [r5, #120]	; 0x78
  Timing.RPDelay              = 2;
 8004182:	e9c5 3320 	strd	r3, r3, [r5, #128]	; 0x80
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004186:	2210      	movs	r2, #16
 8004188:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800418a:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800418c:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004190:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004194:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004196:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800419a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800419e:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80041a2:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80041a4:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80041a8:	f7ff ff1a 	bl	8003fe0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80041ac:	4620      	mov	r0, r4
 80041ae:	f105 0170 	add.w	r1, r5, #112	; 0x70
 80041b2:	4c0a      	ldr	r4, [pc, #40]	; (80041dc <BSP_SDRAM_Init+0x7c>)
 80041b4:	f002 ffe2 	bl	800717c <HAL_SDRAM_Init>
 80041b8:	b138      	cbz	r0, 80041ca <BSP_SDRAM_Init+0x6a>
    sdramstatus = SDRAM_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80041be:	f240 6003 	movw	r0, #1539	; 0x603
 80041c2:	f7ff fec3 	bl	8003f4c <BSP_SDRAM_Initialization_sequence>
}
 80041c6:	7820      	ldrb	r0, [r4, #0]
 80041c8:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 80041ca:	7020      	strb	r0, [r4, #0]
 80041cc:	e7f7      	b.n	80041be <BSP_SDRAM_Init+0x5e>
 80041ce:	bf00      	nop
 80041d0:	200080f0 	.word	0x200080f0
 80041d4:	a0000140 	.word	0xa0000140
 80041d8:	20006df4 	.word	0x20006df4
 80041dc:	200000b4 	.word	0x200000b4

080041e0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80041e0:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 80041e2:	4c0b      	ldr	r4, [pc, #44]	; (8004210 <BSP_TS_Init+0x30>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80041e4:	4d0b      	ldr	r5, [pc, #44]	; (8004214 <BSP_TS_Init+0x34>)
  tsXBoundary = ts_SizeX;
 80041e6:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80041e8:	2070      	movs	r0, #112	; 0x70
 80041ea:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
 80041ec:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80041ee:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80041f0:	686b      	ldr	r3, [r5, #4]
 80041f2:	2070      	movs	r0, #112	; 0x70
 80041f4:	4798      	blx	r3
 80041f6:	2851      	cmp	r0, #81	; 0x51
 80041f8:	d108      	bne.n	800420c <BSP_TS_Init+0x2c>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
    tsOrientation = TS_SWAP_XY;
 80041fa:	2308      	movs	r3, #8
    I2cAddress = TS_I2C_ADDRESS;
 80041fc:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 80041fe:	6065      	str	r5, [r4, #4]
    tsOrientation = TS_SWAP_XY;
 8004200:	7263      	strb	r3, [r4, #9]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004202:	68eb      	ldr	r3, [r5, #12]
    I2cAddress = TS_I2C_ADDRESS;
 8004204:	7220      	strb	r0, [r4, #8]
    tsDriver->Start(I2cAddress);
 8004206:	4798      	blx	r3
  uint8_t status = TS_OK;
 8004208:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 800420a:	bd38      	pop	{r3, r4, r5, pc}
    status = TS_DEVICE_NOT_FOUND;
 800420c:	2003      	movs	r0, #3
 800420e:	e7fc      	b.n	800420a <BSP_TS_Init+0x2a>
 8004210:	20006ee0 	.word	0x20006ee0
 8004214:	2000002c 	.word	0x2000002c

08004218 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004218:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800421a:	4b16      	ldr	r3, [pc, #88]	; (8004274 <BSP_TS_Get_GestureId+0x5c>)
  uint32_t gestureId = 0;
 800421c:	a902      	add	r1, sp, #8
 800421e:	2400      	movs	r4, #0
{
 8004220:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004222:	7a18      	ldrb	r0, [r3, #8]
  uint32_t gestureId = 0;
 8004224:	f841 4d04 	str.w	r4, [r1, #-4]!
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004228:	f7fd ffb4 	bl	8002194 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800422c:	9801      	ldr	r0, [sp, #4]
 800422e:	2818      	cmp	r0, #24
 8004230:	d017      	beq.n	8004262 <BSP_TS_Get_GestureId+0x4a>
 8004232:	d809      	bhi.n	8004248 <BSP_TS_Get_GestureId+0x30>
 8004234:	2810      	cmp	r0, #16
 8004236:	d00f      	beq.n	8004258 <BSP_TS_Get_GestureId+0x40>
 8004238:	2814      	cmp	r0, #20
 800423a:	d010      	beq.n	800425e <BSP_TS_Get_GestureId+0x46>
 800423c:	b9b8      	cbnz	r0, 800426e <BSP_TS_Get_GestureId+0x56>
  uint8_t  ts_status = TS_OK;
 800423e:	4604      	mov	r4, r0
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004240:	62a8      	str	r0, [r5, #40]	; 0x28
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 8004242:	4620      	mov	r0, r4
 8004244:	b003      	add	sp, #12
 8004246:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
 8004248:	2840      	cmp	r0, #64	; 0x40
 800424a:	d00c      	beq.n	8004266 <BSP_TS_Get_GestureId+0x4e>
 800424c:	2849      	cmp	r0, #73	; 0x49
 800424e:	d00c      	beq.n	800426a <BSP_TS_Get_GestureId+0x52>
 8004250:	281c      	cmp	r0, #28
 8004252:	d10c      	bne.n	800426e <BSP_TS_Get_GestureId+0x56>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004254:	2304      	movs	r3, #4
 8004256:	e000      	b.n	800425a <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004258:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800425a:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
 800425c:	e7f1      	b.n	8004242 <BSP_TS_Get_GestureId+0x2a>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800425e:	2302      	movs	r3, #2
 8004260:	e7fb      	b.n	800425a <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004262:	2303      	movs	r3, #3
 8004264:	e7f9      	b.n	800425a <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004266:	2305      	movs	r3, #5
 8004268:	e7f7      	b.n	800425a <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800426a:	2306      	movs	r3, #6
 800426c:	e7f5      	b.n	800425a <BSP_TS_Get_GestureId+0x42>
      ts_status = TS_ERROR;
 800426e:	2401      	movs	r4, #1
 8004270:	e7e7      	b.n	8004242 <BSP_TS_Get_GestureId+0x2a>
 8004272:	bf00      	nop
 8004274:	20006ee0 	.word	0x20006ee0

08004278 <BSP_TS_GetState>:
{
 8004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800427c:	4d55      	ldr	r5, [pc, #340]	; (80043d4 <BSP_TS_GetState+0x15c>)
{
 800427e:	b095      	sub	sp, #84	; 0x54
  uint32_t weight = 0;
 8004280:	2400      	movs	r4, #0
{
 8004282:	4680      	mov	r8, r0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004284:	686b      	ldr	r3, [r5, #4]
  uint32_t event = 0;
 8004286:	9407      	str	r4, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	7a28      	ldrb	r0, [r5, #8]
  uint32_t area = 0;
 800428c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004290:	4798      	blx	r3
 8004292:	f888 0000 	strb.w	r0, [r8]
  if(TS_State->touchDetected)
 8004296:	b170      	cbz	r0, 80042b6 <BSP_TS_GetState+0x3e>
 8004298:	f108 0616 	add.w	r6, r8, #22
 800429c:	f108 0702 	add.w	r7, r8, #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80042a0:	f105 0a0c 	add.w	sl, r5, #12
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80042a4:	f105 0b20 	add.w	fp, r5, #32
    for(index=0; index < TS_State->touchDetected; index++)
 80042a8:	f898 3000 	ldrb.w	r3, [r8]
 80042ac:	42a3      	cmp	r3, r4
 80042ae:	d805      	bhi.n	80042bc <BSP_TS_GetState+0x44>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80042b0:	4640      	mov	r0, r8
 80042b2:	f7ff ffb1 	bl	8004218 <BSP_TS_Get_GestureId>
}
 80042b6:	b015      	add	sp, #84	; 0x54
 80042b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80042bc:	686a      	ldr	r2, [r5, #4]
 80042be:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80042c2:	ab0e      	add	r3, sp, #56	; 0x38
 80042c4:	0061      	lsls	r1, r4, #1
 80042c6:	6952      	ldr	r2, [r2, #20]
 80042c8:	9303      	str	r3, [sp, #12]
 80042ca:	4694      	mov	ip, r2
 80042cc:	7a28      	ldrb	r0, [r5, #8]
 80042ce:	eb09 0201 	add.w	r2, r9, r1
 80042d2:	4419      	add	r1, r3
 80042d4:	4663      	mov	r3, ip
 80042d6:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 80042d8:	7a68      	ldrb	r0, [r5, #9]
 80042da:	9b03      	ldr	r3, [sp, #12]
 80042dc:	a908      	add	r1, sp, #32
 80042de:	2801      	cmp	r0, #1
 80042e0:	aa0b      	add	r2, sp, #44	; 0x2c
        x[index] = brute_x[index];
 80042e2:	bf01      	itttt	eq
 80042e4:	f833 c014 	ldrheq.w	ip, [r3, r4, lsl #1]
 80042e8:	f821 c014 	strheq.w	ip, [r1, r4, lsl #1]
        y[index] = brute_y[index];
 80042ec:	f839 c014 	ldrheq.w	ip, [r9, r4, lsl #1]
 80042f0:	f822 c014 	strheq.w	ip, [r2, r4, lsl #1]
      if(tsOrientation & TS_SWAP_X)
 80042f4:	f010 0f02 	tst.w	r0, #2
        x[index] = 4096 - brute_x[index];
 80042f8:	bf1e      	ittt	ne
 80042fa:	f833 c014 	ldrhne.w	ip, [r3, r4, lsl #1]
 80042fe:	f5cc 5c80 	rsbne	ip, ip, #4096	; 0x1000
 8004302:	f821 c014 	strhne.w	ip, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_Y)
 8004306:	f010 0f04 	tst.w	r0, #4
        y[index] = 4096 - brute_y[index];
 800430a:	bf1e      	ittt	ne
 800430c:	f839 c014 	ldrhne.w	ip, [r9, r4, lsl #1]
 8004310:	f5cc 5c80 	rsbne	ip, ip, #4096	; 0x1000
 8004314:	f822 c014 	strhne.w	ip, [r2, r4, lsl #1]
      if(tsOrientation & TS_SWAP_XY)
 8004318:	0700      	lsls	r0, r0, #28
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800431a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
        y[index] = brute_x[index];
 800431e:	bf42      	ittt	mi
 8004320:	f833 3014 	ldrhmi.w	r3, [r3, r4, lsl #1]
 8004324:	f822 3014 	strhmi.w	r3, [r2, r4, lsl #1]
        x[index] = brute_y[index];
 8004328:	f839 3014 	ldrhmi.w	r3, [r9, r4, lsl #1]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800432c:	f832 c014 	ldrh.w	ip, [r2, r4, lsl #1]
        x[index] = brute_y[index];
 8004330:	bf48      	it	mi
 8004332:	f821 3014 	strhmi.w	r3, [r1, r4, lsl #1]
 8004336:	b283      	uxth	r3, r0
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004338:	f831 e014 	ldrh.w	lr, [r1, r4, lsl #1]
 800433c:	00a1      	lsls	r1, r4, #2
 800433e:	4586      	cmp	lr, r0
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004340:	f851 000b 	ldr.w	r0, [r1, fp]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004344:	bf88      	it	hi
 8004346:	ebae 0303 	subhi.w	r3, lr, r3
 800434a:	b282      	uxth	r2, r0
 800434c:	bf98      	it	ls
 800434e:	eba3 030e 	subls.w	r3, r3, lr
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004352:	4584      	cmp	ip, r0
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004354:	7a28      	ldrb	r0, [r5, #8]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004356:	bf8c      	ite	hi
 8004358:	ebac 0202 	subhi.w	r2, ip, r2
 800435c:	eba2 020c 	subls.w	r2, r2, ip
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004360:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004362:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
 8004364:	4413      	add	r3, r2
 8004366:	2b05      	cmp	r3, #5
        _x[index] = x[index];
 8004368:	bfc4      	itt	gt
 800436a:	f84a e001 	strgt.w	lr, [sl, r1]
        _y[index] = y[index];
 800436e:	f84b c001 	strgt.w	ip, [fp, r1]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004372:	2870      	cmp	r0, #112	; 0x70
 8004374:	d116      	bne.n	80043a4 <BSP_TS_GetState+0x12c>
        TS_State->touchX[index] = x[index];
 8004376:	f8a7 e000 	strh.w	lr, [r7]
        TS_State->touchY[index] = y[index];
 800437a:	f8a7 c00a 	strh.w	ip, [r7, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800437e:	ab07      	add	r3, sp, #28
 8004380:	aa05      	add	r2, sp, #20
 8004382:	4621      	mov	r1, r4
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	ab06      	add	r3, sp, #24
 8004388:	f7fd ff14 	bl	80021b4 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 800438c:	9b05      	ldr	r3, [sp, #20]
 800438e:	f806 3b01 	strb.w	r3, [r6], #1
      TS_State->touchArea[index]   = area;
 8004392:	9b06      	ldr	r3, [sp, #24]
 8004394:	7273      	strb	r3, [r6, #9]
      switch(event)
 8004396:	9b07      	ldr	r3, [sp, #28]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d812      	bhi.n	80043c2 <BSP_TS_GetState+0x14a>
 800439c:	e8df f003 	tbb	[pc, r3]
 80043a0:	1816140f 	.word	0x1816140f
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80043a4:	f85a 3001 	ldr.w	r3, [sl, r1]
 80043a8:	882a      	ldrh	r2, [r5, #0]
 80043aa:	4353      	muls	r3, r2
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80043ac:	886a      	ldrh	r2, [r5, #2]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80043ae:	0b1b      	lsrs	r3, r3, #12
 80043b0:	803b      	strh	r3, [r7, #0]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80043b2:	f85b 3001 	ldr.w	r3, [fp, r1]
 80043b6:	4353      	muls	r3, r2
 80043b8:	0b1b      	lsrs	r3, r3, #12
 80043ba:	817b      	strh	r3, [r7, #10]
 80043bc:	e7df      	b.n	800437e <BSP_TS_GetState+0x106>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80043be:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80043c0:	7133      	strb	r3, [r6, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 80043c2:	3401      	adds	r4, #1
 80043c4:	3702      	adds	r7, #2
 80043c6:	e76f      	b.n	80042a8 <BSP_TS_GetState+0x30>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80043c8:	2302      	movs	r3, #2
 80043ca:	e7f9      	b.n	80043c0 <BSP_TS_GetState+0x148>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e7f7      	b.n	80043c0 <BSP_TS_GetState+0x148>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e7f5      	b.n	80043c0 <BSP_TS_GetState+0x148>
 80043d4:	20006ee0 	.word	0x20006ee0

080043d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043d8:	490f      	ldr	r1, [pc, #60]	; (8004418 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043da:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80043e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80043e8:	4b0c      	ldr	r3, [pc, #48]	; (800441c <SystemInit+0x44>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80043f2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80043fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004400:	4a07      	ldr	r2, [pc, #28]	; (8004420 <SystemInit+0x48>)
 8004402:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800440a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800440c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800440e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004412:	608b      	str	r3, [r1, #8]
#endif
}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	e000ed00 	.word	0xe000ed00
 800441c:	40023800 	.word	0x40023800
 8004420:	24003010 	.word	0x24003010

08004424 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004424:	4770      	bx	lr
	...

08004428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004428:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800442a:	4e0e      	ldr	r6, [pc, #56]	; (8004464 <HAL_InitTick+0x3c>)
{
 800442c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800442e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004432:	4a0d      	ldr	r2, [pc, #52]	; (8004468 <HAL_InitTick+0x40>)
 8004434:	7830      	ldrb	r0, [r6, #0]
 8004436:	fbb3 f3f0 	udiv	r3, r3, r0
 800443a:	6810      	ldr	r0, [r2, #0]
 800443c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004440:	f000 f89c 	bl	800457c <HAL_SYSTICK_Config>
 8004444:	4604      	mov	r4, r0
 8004446:	b950      	cbnz	r0, 800445e <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004448:	2d0f      	cmp	r5, #15
 800444a:	d808      	bhi.n	800445e <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800444c:	4602      	mov	r2, r0
 800444e:	4629      	mov	r1, r5
 8004450:	f04f 30ff 	mov.w	r0, #4294967295
 8004454:	f000 f852 	bl	80044fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004458:	4620      	mov	r0, r4
 800445a:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800445c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800445e:	2001      	movs	r0, #1
 8004460:	e7fc      	b.n	800445c <HAL_InitTick+0x34>
 8004462:	bf00      	nop
 8004464:	200000bc 	.word	0x200000bc
 8004468:	200000b8 	.word	0x200000b8

0800446c <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 800446c:	4a07      	ldr	r2, [pc, #28]	; (800448c <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800446e:	2003      	movs	r0, #3
{
 8004470:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004478:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800447a:	f000 f82d 	bl	80044d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800447e:	200f      	movs	r0, #15
 8004480:	f7ff ffd2 	bl	8004428 <HAL_InitTick>
  HAL_MspInit();
 8004484:	f7ff ffce 	bl	8004424 <HAL_MspInit>
}
 8004488:	2000      	movs	r0, #0
 800448a:	bd08      	pop	{r3, pc}
 800448c:	40023c00 	.word	0x40023c00

08004490 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004490:	4a03      	ldr	r2, [pc, #12]	; (80044a0 <HAL_IncTick+0x10>)
 8004492:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <HAL_IncTick+0x14>)
 8004494:	6811      	ldr	r1, [r2, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	440b      	add	r3, r1
 800449a:	6013      	str	r3, [r2, #0]
}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	20008124 	.word	0x20008124
 80044a4:	200000bc 	.word	0x200000bc

080044a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80044a8:	4b01      	ldr	r3, [pc, #4]	; (80044b0 <HAL_GetTick+0x8>)
 80044aa:	6818      	ldr	r0, [r3, #0]
}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20008124 	.word	0x20008124

080044b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80044b8:	f7ff fff6 	bl	80044a8 <HAL_GetTick>
 80044bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80044c0:	bf1e      	ittt	ne
 80044c2:	4b04      	ldrne	r3, [pc, #16]	; (80044d4 <HAL_Delay+0x20>)
 80044c4:	781b      	ldrbne	r3, [r3, #0]
 80044c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044c8:	f7ff ffee 	bl	80044a8 <HAL_GetTick>
 80044cc:	1b40      	subs	r0, r0, r5
 80044ce:	42a0      	cmp	r0, r4
 80044d0:	d3fa      	bcc.n	80044c8 <HAL_Delay+0x14>
  {
  }
}
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	200000bc 	.word	0x200000bc

080044d8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d8:	4a07      	ldr	r2, [pc, #28]	; (80044f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044da:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044dc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044e6:	041b      	lsls	r3, r3, #16
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80044f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80044f4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80044f6:	4770      	bx	lr
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044fc:	4b16      	ldr	r3, [pc, #88]	; (8004558 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044fe:	b570      	push	{r4, r5, r6, lr}
 8004500:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004502:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004506:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800450a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800450e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004510:	2d04      	cmp	r5, #4
 8004512:	bf28      	it	cs
 8004514:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004516:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004518:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800451c:	bf8c      	ite	hi
 800451e:	3c03      	subhi	r4, #3
 8004520:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8004522:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004524:	ea21 0303 	bic.w	r3, r1, r3
 8004528:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800452c:	fa06 f404 	lsl.w	r4, r6, r4
 8004530:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004534:	ea43 0304 	orr.w	r3, r3, r4
 8004538:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800453c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800453e:	db06      	blt.n	800454e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004544:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004548:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800454c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454e:	f000 000f 	and.w	r0, r0, #15
 8004552:	4a02      	ldr	r2, [pc, #8]	; (800455c <HAL_NVIC_SetPriority+0x60>)
 8004554:	5413      	strb	r3, [r2, r0]
 8004556:	e7f9      	b.n	800454c <HAL_NVIC_SetPriority+0x50>
 8004558:	e000ed00 	.word	0xe000ed00
 800455c:	e000ed14 	.word	0xe000ed14

08004560 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004560:	2800      	cmp	r0, #0
 8004562:	db08      	blt.n	8004576 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004564:	0942      	lsrs	r2, r0, #5
 8004566:	2301      	movs	r3, #1
 8004568:	f000 001f 	and.w	r0, r0, #31
 800456c:	fa03 f000 	lsl.w	r0, r3, r0
 8004570:	4b01      	ldr	r3, [pc, #4]	; (8004578 <HAL_NVIC_EnableIRQ+0x18>)
 8004572:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004576:	4770      	bx	lr
 8004578:	e000e100 	.word	0xe000e100

0800457c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800457c:	3801      	subs	r0, #1
 800457e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004582:	d20a      	bcs.n	800459a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004586:	21f0      	movs	r1, #240	; 0xf0
 8004588:	4a06      	ldr	r2, [pc, #24]	; (80045a4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800458a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800458c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004592:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004594:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800459a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	e000e010 	.word	0xe000e010
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045a8:	6803      	ldr	r3, [r0, #0]
 80045aa:	2118      	movs	r1, #24
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045b2:	3a10      	subs	r2, #16
 80045b4:	f023 0303 	bic.w	r3, r3, #3
 80045b8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045bc:	4904      	ldr	r1, [pc, #16]	; (80045d0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80045be:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045c0:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045c2:	bf88      	it	hi
 80045c4:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045c6:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045c8:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80045ca:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	08010db1 	.word	0x08010db1

080045d4 <HAL_DMA_Init>:
{
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80045d8:	f7ff ff66 	bl	80044a8 <HAL_GetTick>
 80045dc:	4605      	mov	r5, r0
  if(hdma == NULL)
 80045de:	2c00      	cmp	r4, #0
 80045e0:	d071      	beq.n	80046c6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80045e2:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80045e4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80045e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80045ea:	2302      	movs	r3, #2
 80045ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80045f0:	6813      	ldr	r3, [r2, #0]
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045f8:	6821      	ldr	r1, [r4, #0]
 80045fa:	680b      	ldr	r3, [r1, #0]
 80045fc:	07d8      	lsls	r0, r3, #31
 80045fe:	d43c      	bmi.n	800467a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8004600:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004602:	4d32      	ldr	r5, [pc, #200]	; (80046cc <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004604:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004606:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004608:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800460c:	4313      	orrs	r3, r2
 800460e:	68e2      	ldr	r2, [r4, #12]
 8004610:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004612:	6922      	ldr	r2, [r4, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	6962      	ldr	r2, [r4, #20]
 8004618:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800461a:	69e2      	ldr	r2, [r4, #28]
 800461c:	4303      	orrs	r3, r0
 800461e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8004620:	6a22      	ldr	r2, [r4, #32]
 8004622:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004624:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004626:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004628:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800462c:	bf02      	ittt	eq
 800462e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8004632:	4335      	orreq	r5, r6
 8004634:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004636:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8004638:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800463a:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800463c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8004640:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004644:	d10b      	bne.n	800465e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8004646:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004648:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800464a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800464c:	b13d      	cbz	r5, 800465e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800464e:	b9f8      	cbnz	r0, 8004690 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8004650:	2a01      	cmp	r2, #1
 8004652:	d02d      	beq.n	80046b0 <HAL_DMA_Init+0xdc>
 8004654:	d301      	bcc.n	800465a <HAL_DMA_Init+0x86>
 8004656:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004658:	d101      	bne.n	800465e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800465a:	01ea      	lsls	r2, r5, #7
 800465c:	d42b      	bmi.n	80046b6 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800465e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004660:	4620      	mov	r0, r4
 8004662:	f7ff ffa1 	bl	80045a8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004666:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004668:	233f      	movs	r3, #63	; 0x3f
 800466a:	4093      	lsls	r3, r2
 800466c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800466e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004670:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004672:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004674:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004678:	e009      	b.n	800468e <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800467a:	f7ff ff15 	bl	80044a8 <HAL_GetTick>
 800467e:	1b40      	subs	r0, r0, r5
 8004680:	2805      	cmp	r0, #5
 8004682:	d9b9      	bls.n	80045f8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004684:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004686:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004688:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800468a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800468e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004690:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004694:	d113      	bne.n	80046be <HAL_DMA_Init+0xea>
    switch (tmp)
 8004696:	2a03      	cmp	r2, #3
 8004698:	d8e1      	bhi.n	800465e <HAL_DMA_Init+0x8a>
 800469a:	a001      	add	r0, pc, #4	; (adr r0, 80046a0 <HAL_DMA_Init+0xcc>)
 800469c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80046a0:	080046b7 	.word	0x080046b7
 80046a4:	0800465b 	.word	0x0800465b
 80046a8:	080046b7 	.word	0x080046b7
 80046ac:	080046b1 	.word	0x080046b1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046b0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80046b4:	d1d3      	bne.n	800465e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046b6:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80046b8:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046ba:	6563      	str	r3, [r4, #84]	; 0x54
 80046bc:	e7e5      	b.n	800468a <HAL_DMA_Init+0xb6>
    switch (tmp)
 80046be:	2a02      	cmp	r2, #2
 80046c0:	d9f9      	bls.n	80046b6 <HAL_DMA_Init+0xe2>
 80046c2:	2a03      	cmp	r2, #3
 80046c4:	e7c8      	b.n	8004658 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80046c6:	2001      	movs	r0, #1
 80046c8:	e7e1      	b.n	800468e <HAL_DMA_Init+0xba>
 80046ca:	bf00      	nop
 80046cc:	f010803f 	.word	0xf010803f

080046d0 <HAL_DMA_DeInit>:
{
 80046d0:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80046d2:	4605      	mov	r5, r0
 80046d4:	b320      	cbz	r0, 8004720 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80046d6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80046da:	b2e4      	uxtb	r4, r4
 80046dc:	2c02      	cmp	r4, #2
 80046de:	d01d      	beq.n	800471c <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80046e0:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80046e2:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	f022 0201 	bic.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80046ec:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80046ee:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80046f0:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80046f2:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80046f4:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80046f6:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80046f8:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046fa:	f7ff ff55 	bl	80045a8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046fe:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004700:	233f      	movs	r3, #63	; 0x3f
 8004702:	4093      	lsls	r3, r2
 8004704:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004706:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8004708:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800470c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8004710:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8004714:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8004718:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
    return HAL_BUSY;
 800471c:	4620      	mov	r0, r4
 800471e:	e000      	b.n	8004722 <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 8004720:	2001      	movs	r0, #1
}
 8004722:	bd38      	pop	{r3, r4, r5, pc}

08004724 <HAL_DMA_Start_IT>:
{
 8004724:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8004726:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800472a:	2c01      	cmp	r4, #1
 800472c:	d035      	beq.n	800479a <HAL_DMA_Start_IT+0x76>
 800472e:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004730:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8004732:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8004734:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004738:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800473c:	2c01      	cmp	r4, #1
 800473e:	f04f 0402 	mov.w	r4, #2
 8004742:	d128      	bne.n	8004796 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004744:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004748:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800474a:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800474c:	6825      	ldr	r5, [r4, #0]
 800474e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8004752:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8004754:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004756:	6883      	ldr	r3, [r0, #8]
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d119      	bne.n	8004790 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 800475c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800475e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004760:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004762:	233f      	movs	r3, #63	; 0x3f
 8004764:	4093      	lsls	r3, r2
 8004766:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	f043 0316 	orr.w	r3, r3, #22
 800476e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004770:	6963      	ldr	r3, [r4, #20]
 8004772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004776:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8004778:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800477a:	b11b      	cbz	r3, 8004784 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	f043 0308 	orr.w	r3, r3, #8
 8004782:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004784:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004786:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	6023      	str	r3, [r4, #0]
}
 800478e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8004790:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8004792:	60e2      	str	r2, [r4, #12]
 8004794:	e7e4      	b.n	8004760 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8004796:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800479a:	2002      	movs	r0, #2
 800479c:	e7f7      	b.n	800478e <HAL_DMA_Start_IT+0x6a>

0800479e <HAL_DMA_Abort>:
{
 800479e:	b570      	push	{r4, r5, r6, lr}
 80047a0:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a2:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7ff fe80 	bl	80044a8 <HAL_GetTick>
 80047a8:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047aa:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d006      	beq.n	80047c0 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b2:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 80047b4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80047b8:	2300      	movs	r3, #0
 80047ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80047be:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	f022 0216 	bic.w	r2, r2, #22
 80047c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d0:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047d4:	b90a      	cbnz	r2, 80047da <HAL_DMA_Abort+0x3c>
 80047d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80047d8:	b11a      	cbz	r2, 80047e2 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	f022 0208 	bic.w	r2, r2, #8
 80047e0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	f022 0201 	bic.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	f010 0001 	ands.w	r0, r0, #1
 80047f2:	d109      	bne.n	8004808 <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80047f6:	233f      	movs	r3, #63	; 0x3f
 80047f8:	4093      	lsls	r3, r2
 80047fa:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80047fc:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80047fe:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004802:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004806:	e7da      	b.n	80047be <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004808:	f7ff fe4e 	bl	80044a8 <HAL_GetTick>
 800480c:	1b80      	subs	r0, r0, r6
 800480e:	2805      	cmp	r0, #5
 8004810:	d9eb      	bls.n	80047ea <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004812:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004814:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004816:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004818:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800481a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800481e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004822:	e7cc      	b.n	80047be <HAL_DMA_Abort+0x20>

08004824 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004824:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004828:	2b02      	cmp	r3, #2
 800482a:	d003      	beq.n	8004834 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004830:	2001      	movs	r0, #1
 8004832:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8004834:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8004836:	2305      	movs	r3, #5
 8004838:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 800483c:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800483e:	6813      	ldr	r3, [r2, #0]
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	6013      	str	r3, [r2, #0]
}
 8004846:	4770      	bx	lr

08004848 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8004848:	2300      	movs	r3, #0
{
 800484a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 800484c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800484e:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8004850:	4b5b      	ldr	r3, [pc, #364]	; (80049c0 <HAL_DMA_IRQHandler+0x178>)
{
 8004852:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004854:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8004856:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004858:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800485a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800485c:	409a      	lsls	r2, r3
 800485e:	4232      	tst	r2, r6
 8004860:	d00c      	beq.n	800487c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004862:	6801      	ldr	r1, [r0, #0]
 8004864:	6808      	ldr	r0, [r1, #0]
 8004866:	0740      	lsls	r0, r0, #29
 8004868:	d508      	bpl.n	800487c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800486a:	6808      	ldr	r0, [r1, #0]
 800486c:	f020 0004 	bic.w	r0, r0, #4
 8004870:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004872:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004874:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800487c:	2201      	movs	r2, #1
 800487e:	409a      	lsls	r2, r3
 8004880:	4232      	tst	r2, r6
 8004882:	d008      	beq.n	8004896 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004884:	6821      	ldr	r1, [r4, #0]
 8004886:	6949      	ldr	r1, [r1, #20]
 8004888:	0609      	lsls	r1, r1, #24
 800488a:	d504      	bpl.n	8004896 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800488c:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800488e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004890:	f042 0202 	orr.w	r2, r2, #2
 8004894:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004896:	2204      	movs	r2, #4
 8004898:	409a      	lsls	r2, r3
 800489a:	4232      	tst	r2, r6
 800489c:	d008      	beq.n	80048b0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800489e:	6821      	ldr	r1, [r4, #0]
 80048a0:	6809      	ldr	r1, [r1, #0]
 80048a2:	0788      	lsls	r0, r1, #30
 80048a4:	d504      	bpl.n	80048b0 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048a6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80048aa:	f042 0204 	orr.w	r2, r2, #4
 80048ae:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048b0:	2210      	movs	r2, #16
 80048b2:	409a      	lsls	r2, r3
 80048b4:	4232      	tst	r2, r6
 80048b6:	d010      	beq.n	80048da <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	6819      	ldr	r1, [r3, #0]
 80048bc:	0709      	lsls	r1, r1, #28
 80048be:	d50c      	bpl.n	80048da <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048c0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	0350      	lsls	r0, r2, #13
 80048c6:	d537      	bpl.n	8004938 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	0319      	lsls	r1, r3, #12
 80048cc:	d401      	bmi.n	80048d2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80048ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048d0:	e000      	b.n	80048d4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80048d4:	b10b      	cbz	r3, 80048da <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80048d6:	4620      	mov	r0, r4
 80048d8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048da:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80048dc:	2220      	movs	r2, #32
 80048de:	408a      	lsls	r2, r1
 80048e0:	4232      	tst	r2, r6
 80048e2:	d03a      	beq.n	800495a <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	06c6      	lsls	r6, r0, #27
 80048ea:	d536      	bpl.n	800495a <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048ec:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048ee:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80048f2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048f4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048f6:	d127      	bne.n	8004948 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048f8:	f022 0216 	bic.w	r2, r2, #22
 80048fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004904:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004906:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004908:	b90a      	cbnz	r2, 800490e <HAL_DMA_IRQHandler+0xc6>
 800490a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800490c:	b11a      	cbz	r2, 8004916 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	f022 0208 	bic.w	r2, r2, #8
 8004914:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004916:	233f      	movs	r3, #63	; 0x3f
 8004918:	408b      	lsls	r3, r1
 800491a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800491c:	2300      	movs	r3, #0
 800491e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8004922:	2301      	movs	r3, #1
 8004924:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8004928:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800492a:	2b00      	cmp	r3, #0
 800492c:	d045      	beq.n	80049ba <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800492e:	4620      	mov	r0, r4
}
 8004930:	b003      	add	sp, #12
 8004932:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8004936:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	05d2      	lsls	r2, r2, #23
 800493c:	d4c7      	bmi.n	80048ce <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	f022 0208 	bic.w	r2, r2, #8
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e7c2      	b.n	80048ce <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004948:	0350      	lsls	r0, r2, #13
 800494a:	d527      	bpl.n	800499c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	0319      	lsls	r1, r3, #12
 8004950:	d431      	bmi.n	80049b6 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8004952:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8004954:	b10b      	cbz	r3, 800495a <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8004956:	4620      	mov	r0, r4
 8004958:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800495a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800495c:	b36b      	cbz	r3, 80049ba <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800495e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004960:	07da      	lsls	r2, r3, #31
 8004962:	d519      	bpl.n	8004998 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004964:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8004966:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8004968:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800496c:	6813      	ldr	r3, [r2, #0]
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8004974:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004978:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800497c:	9b01      	ldr	r3, [sp, #4]
 800497e:	3301      	adds	r3, #1
 8004980:	42bb      	cmp	r3, r7
 8004982:	9301      	str	r3, [sp, #4]
 8004984:	d802      	bhi.n	800498c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004986:	6813      	ldr	r3, [r2, #0]
 8004988:	07db      	lsls	r3, r3, #31
 800498a:	d4f7      	bmi.n	800497c <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 800498c:	2300      	movs	r3, #0
 800498e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004992:	2301      	movs	r3, #1
 8004994:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8004998:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800499a:	e7c6      	b.n	800492a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80049a2:	d108      	bne.n	80049b6 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049a4:	6819      	ldr	r1, [r3, #0]
 80049a6:	f021 0110 	bic.w	r1, r1, #16
 80049aa:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80049ac:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80049ae:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80049b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80049b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80049b8:	e7cc      	b.n	8004954 <HAL_DMA_IRQHandler+0x10c>
}
 80049ba:	b003      	add	sp, #12
 80049bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049be:	bf00      	nop
 80049c0:	200000b8 	.word	0x200000b8

080049c4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80049c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80049c6:	6804      	ldr	r4, [r0, #0]
 80049c8:	9d04      	ldr	r5, [sp, #16]
 80049ca:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80049cc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80049d0:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 80049d4:	4333      	orrs	r3, r6
 80049d6:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80049d8:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80049da:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80049dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049e0:	d130      	bne.n	8004a44 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80049e2:	6886      	ldr	r6, [r0, #8]
 80049e4:	b11e      	cbz	r6, 80049ee <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80049e6:	2e01      	cmp	r6, #1
 80049e8:	d103      	bne.n	80049f2 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80049ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80049ee:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80049f0:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80049f2:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80049f4:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80049f8:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80049fc:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80049fe:	d107      	bne.n	8004a10 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8004a00:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8004a02:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004a04:	02c9      	lsls	r1, r1, #11
 8004a06:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8004a0a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8004a0e:	e7ee      	b.n	80049ee <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004a10:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004a12:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004a16:	d10a      	bne.n	8004a2e <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8004a18:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8004a1a:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004a1c:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8004a1e:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004a20:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8004a24:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8004a28:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8004a2c:	e7df      	b.n	80049ee <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8004a2e:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8004a30:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004a32:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8004a34:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004a36:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8004a3a:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8004a3e:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8004a42:	e7d4      	b.n	80049ee <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004a44:	60e1      	str	r1, [r4, #12]
}
 8004a46:	e7d3      	b.n	80049f0 <DMA2D_SetConfig+0x2c>

08004a48 <HAL_DMA2D_MspInit>:
}
 8004a48:	4770      	bx	lr

08004a4a <HAL_DMA2D_Init>:
{
 8004a4a:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	b330      	cbz	r0, 8004a9e <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004a50:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004a54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a58:	b91b      	cbnz	r3, 8004a62 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8004a5a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8004a5e:	f7ff fff3 	bl	8004a48 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a62:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a64:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a66:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004a68:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a74:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004a76:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a78:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004a7a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004a7c:	f023 0307 	bic.w	r3, r3, #7
 8004a80:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004a82:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004a84:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004a86:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004a88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a94:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004a96:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8004a9c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	e7fc      	b.n	8004a9c <HAL_DMA2D_Init+0x52>

08004aa2 <HAL_DMA2D_Start>:
{
 8004aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8004aa4:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
{
 8004aa8:	4605      	mov	r5, r0
  __HAL_LOCK(hdma2d);
 8004aaa:	2c01      	cmp	r4, #1
 8004aac:	f04f 0402 	mov.w	r4, #2
 8004ab0:	d00f      	beq.n	8004ad2 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ab2:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004ab6:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004ab8:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8004aba:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004abe:	9400      	str	r4, [sp, #0]
 8004ac0:	f7ff ff80 	bl	80049c4 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8004ac4:	682a      	ldr	r2, [r5, #0]
  return HAL_OK;
 8004ac6:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8004ac8:	6813      	ldr	r3, [r2, #0]
 8004aca:	4333      	orrs	r3, r6
 8004acc:	6013      	str	r3, [r2, #0]
}
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	e7fb      	b.n	8004ace <HAL_DMA2D_Start+0x2c>

08004ad6 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8004ad6:	2300      	movs	r3, #0
{
 8004ad8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8004ada:	9301      	str	r3, [sp, #4]
{
 8004adc:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004ade:	6803      	ldr	r3, [r0, #0]
{
 8004ae0:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	07db      	lsls	r3, r3, #31
 8004ae6:	d417      	bmi.n	8004b18 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004aec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aee:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8004af0:	069e      	lsls	r6, r3, #26
 8004af2:	d506      	bpl.n	8004b02 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8004af4:	f7ff fcd8 	bl	80044a8 <HAL_GetTick>
 8004af8:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	06d2      	lsls	r2, r2, #27
 8004b00:	d543      	bpl.n	8004b8a <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8004b06:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004b08:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b0a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8004b0c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8004b14:	b002      	add	sp, #8
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8004b18:	f7ff fcc6 	bl	80044a8 <HAL_GetTick>
 8004b1c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	0792      	lsls	r2, r2, #30
 8004b24:	d4e0      	bmi.n	8004ae8 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004b2a:	9a01      	ldr	r2, [sp, #4]
 8004b2c:	f012 0f21 	tst.w	r2, #33	; 0x21
 8004b30:	d017      	beq.n	8004b62 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b32:	9a01      	ldr	r2, [sp, #4]
 8004b34:	0695      	lsls	r5, r2, #26
 8004b36:	d503      	bpl.n	8004b40 <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b38:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b3a:	f042 0202 	orr.w	r2, r2, #2
 8004b3e:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b40:	9a01      	ldr	r2, [sp, #4]
 8004b42:	07d0      	lsls	r0, r2, #31
 8004b44:	d503      	bpl.n	8004b4e <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b4e:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b50:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004b52:	2304      	movs	r3, #4
        return HAL_ERROR;
 8004b54:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004b56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8004b60:	e7d8      	b.n	8004b14 <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 8004b62:	1c69      	adds	r1, r5, #1
 8004b64:	d0dc      	beq.n	8004b20 <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004b66:	f7ff fc9f 	bl	80044a8 <HAL_GetTick>
 8004b6a:	1b80      	subs	r0, r0, r6
 8004b6c:	42a8      	cmp	r0, r5
 8004b6e:	d801      	bhi.n	8004b74 <HAL_DMA2D_PollForTransfer+0x9e>
 8004b70:	2d00      	cmp	r5, #0
 8004b72:	d1d4      	bne.n	8004b1e <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004b76:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b78:	f043 0320 	orr.w	r3, r3, #32
 8004b7c:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 8004b7e:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004b80:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8004b84:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8004b88:	e7c4      	b.n	8004b14 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004b8e:	9a01      	ldr	r2, [sp, #4]
 8004b90:	f012 0f29 	tst.w	r2, #41	; 0x29
 8004b94:	d016      	beq.n	8004bc4 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004b96:	9a01      	ldr	r2, [sp, #4]
 8004b98:	0716      	lsls	r6, r2, #28
 8004b9a:	d503      	bpl.n	8004ba4 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004b9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b9e:	f042 0204 	orr.w	r2, r2, #4
 8004ba2:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004ba4:	9a01      	ldr	r2, [sp, #4]
 8004ba6:	0695      	lsls	r5, r2, #26
 8004ba8:	d503      	bpl.n	8004bb2 <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004baa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004bac:	f042 0202 	orr.w	r2, r2, #2
 8004bb0:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004bb2:	9a01      	ldr	r2, [sp, #4]
 8004bb4:	07d0      	lsls	r0, r2, #31
 8004bb6:	d503      	bpl.n	8004bc0 <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004bb8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004bc0:	2229      	movs	r2, #41	; 0x29
 8004bc2:	e7c5      	b.n	8004b50 <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 8004bc4:	1c69      	adds	r1, r5, #1
 8004bc6:	d099      	beq.n	8004afc <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004bc8:	f7ff fc6e 	bl	80044a8 <HAL_GetTick>
 8004bcc:	1b80      	subs	r0, r0, r6
 8004bce:	42a8      	cmp	r0, r5
 8004bd0:	d8d0      	bhi.n	8004b74 <HAL_DMA2D_PollForTransfer+0x9e>
 8004bd2:	2d00      	cmp	r5, #0
 8004bd4:	d191      	bne.n	8004afa <HAL_DMA2D_PollForTransfer+0x24>
 8004bd6:	e7cd      	b.n	8004b74 <HAL_DMA2D_PollForTransfer+0x9e>

08004bd8 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8004bd8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	f04f 0302 	mov.w	r3, #2
{
 8004be2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8004be4:	d037      	beq.n	8004c56 <HAL_DMA2D_ConfigLayer+0x7e>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004be6:	010e      	lsls	r6, r1, #4
  __HAL_LOCK(hdma2d);
 8004be8:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004bea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004bee:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 8004bf0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8004bf4:	4f1c      	ldr	r7, [pc, #112]	; (8004c68 <HAL_DMA2D_ConfigLayer+0x90>)
 8004bf6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004bf8:	e9d3 5207 	ldrd	r5, r2, [r3, #28]
 8004bfc:	6803      	ldr	r3, [r0, #0]
 8004bfe:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c02:	3d09      	subs	r5, #9
 8004c04:	2d01      	cmp	r5, #1
 8004c06:	d80f      	bhi.n	8004c28 <HAL_DMA2D_ConfigLayer+0x50>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004c08:	f004 4c7f 	and.w	ip, r4, #4278190080	; 0xff000000
 8004c0c:	ea4c 0202 	orr.w	r2, ip, r2
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004c10:	b969      	cbnz	r1, 8004c2e <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c12:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c14:	4039      	ands	r1, r7
 8004c16:	430a      	orrs	r2, r1
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004c1a:	6982      	ldr	r2, [r0, #24]
 8004c1c:	619a      	str	r2, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004c1e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004c20:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c24:	629a      	str	r2, [r3, #40]	; 0x28
 8004c26:	e010      	b.n	8004c4a <HAL_DMA2D_ConfigLayer+0x72>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004c28:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004c2c:	b1a9      	cbz	r1, 8004c5a <HAL_DMA2D_ConfigLayer+0x82>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c2e:	69d9      	ldr	r1, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c30:	4406      	add	r6, r0
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c32:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c34:	ea01 0107 	and.w	r1, r1, r7
 8004c38:	ea42 0201 	orr.w	r2, r2, r1
 8004c3c:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c3e:	69b2      	ldr	r2, [r6, #24]
 8004c40:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c42:	d802      	bhi.n	8004c4a <HAL_DMA2D_ConfigLayer+0x72>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004c44:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8004c48:	621c      	str	r4, [r3, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8004c50:	2300      	movs	r3, #0
 8004c52:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8004c56:	4618      	mov	r0, r3
}
 8004c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c5c:	4039      	ands	r1, r7
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004c62:	6982      	ldr	r2, [r0, #24]
 8004c64:	619a      	str	r2, [r3, #24]
 8004c66:	e7f0      	b.n	8004c4a <HAL_DMA2D_ConfigLayer+0x72>
 8004c68:	00fcfff0 	.word	0x00fcfff0

08004c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c70:	680b      	ldr	r3, [r1, #0]
{
 8004c72:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004e34 <HAL_GPIO_Init+0x1c8>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c78:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c7a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c7c:	4a6b      	ldr	r2, [pc, #428]	; (8004e2c <HAL_GPIO_Init+0x1c0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c7e:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8004e38 <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 8004c82:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c84:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8004c86:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c88:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8004c8a:	42ac      	cmp	r4, r5
 8004c8c:	f040 80b4 	bne.w	8004df8 <HAL_GPIO_Init+0x18c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c90:	684c      	ldr	r4, [r1, #4]
 8004c92:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004c96:	2603      	movs	r6, #3
 8004c98:	f024 0c10 	bic.w	ip, r4, #16
 8004c9c:	fa06 f60e 	lsl.w	r6, r6, lr
 8004ca0:	f10c 37ff 	add.w	r7, ip, #4294967295
 8004ca4:	43f6      	mvns	r6, r6
 8004ca6:	2f01      	cmp	r7, #1
 8004ca8:	d811      	bhi.n	8004cce <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 8004caa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004cac:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8004cb0:	68cf      	ldr	r7, [r1, #12]
 8004cb2:	fa07 f70e 	lsl.w	r7, r7, lr
 8004cb6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8004cba:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004cbc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cbe:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004cc2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8004cc6:	409f      	lsls	r7, r3
 8004cc8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8004ccc:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8004cce:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cd0:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004cd4:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004cd8:	688f      	ldr	r7, [r1, #8]
 8004cda:	fa07 f70e 	lsl.w	r7, r7, lr
 8004cde:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8004ce2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ce4:	d116      	bne.n	8004d14 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 8004ce6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004cea:	f003 0b07 	and.w	fp, r3, #7
 8004cee:	f04f 0c0f 	mov.w	ip, #15
 8004cf2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004cf6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004cfa:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004cfe:	fa0c fc0b 	lsl.w	ip, ip, fp
 8004d02:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004d06:	690f      	ldr	r7, [r1, #16]
 8004d08:	fa07 f70b 	lsl.w	r7, r7, fp
 8004d0c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8004d10:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8004d14:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004d16:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d18:	f004 0703 	and.w	r7, r4, #3
 8004d1c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8004d20:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8004d24:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d26:	00e6      	lsls	r6, r4, #3
 8004d28:	d566      	bpl.n	8004df8 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d2a:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8004d2e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d32:	f003 0c03 	and.w	ip, r3, #3
 8004d36:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d3a:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8004d3e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d42:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d46:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8004d4a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8004d4e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8004d52:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8004d56:	9603      	str	r6, [sp, #12]
 8004d58:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d5a:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 8004d5e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d62:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d66:	4e32      	ldr	r6, [pc, #200]	; (8004e30 <HAL_GPIO_Init+0x1c4>)
 8004d68:	42b0      	cmp	r0, r6
 8004d6a:	d04c      	beq.n	8004e06 <HAL_GPIO_Init+0x19a>
 8004d6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d70:	42b0      	cmp	r0, r6
 8004d72:	d04a      	beq.n	8004e0a <HAL_GPIO_Init+0x19e>
 8004d74:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d78:	42b0      	cmp	r0, r6
 8004d7a:	d048      	beq.n	8004e0e <HAL_GPIO_Init+0x1a2>
 8004d7c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d80:	42b0      	cmp	r0, r6
 8004d82:	d046      	beq.n	8004e12 <HAL_GPIO_Init+0x1a6>
 8004d84:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d88:	42b0      	cmp	r0, r6
 8004d8a:	d044      	beq.n	8004e16 <HAL_GPIO_Init+0x1aa>
 8004d8c:	4548      	cmp	r0, r9
 8004d8e:	d044      	beq.n	8004e1a <HAL_GPIO_Init+0x1ae>
 8004d90:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004d94:	42b0      	cmp	r0, r6
 8004d96:	d042      	beq.n	8004e1e <HAL_GPIO_Init+0x1b2>
 8004d98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d9c:	42b0      	cmp	r0, r6
 8004d9e:	d040      	beq.n	8004e22 <HAL_GPIO_Init+0x1b6>
 8004da0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004da4:	42b0      	cmp	r0, r6
 8004da6:	d03e      	beq.n	8004e26 <HAL_GPIO_Init+0x1ba>
 8004da8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004dac:	42b0      	cmp	r0, r6
 8004dae:	bf14      	ite	ne
 8004db0:	260a      	movne	r6, #10
 8004db2:	2609      	moveq	r6, #9
 8004db4:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004db8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004dbc:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8004dc0:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8004dc2:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8004dc6:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004dc8:	bf0c      	ite	eq
 8004dca:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004dcc:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004dce:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8004dd2:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8004dd4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004dd6:	bf0c      	ite	eq
 8004dd8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004dda:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ddc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8004de0:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8004de2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004de4:	bf0c      	ite	eq
 8004de6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004de8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004dea:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8004dec:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8004dee:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8004df0:	bf54      	ite	pl
 8004df2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8004df4:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8004df6:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004df8:	3301      	adds	r3, #1
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	f47f af41 	bne.w	8004c82 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8004e00:	b005      	add	sp, #20
 8004e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e06:	2600      	movs	r6, #0
 8004e08:	e7d4      	b.n	8004db4 <HAL_GPIO_Init+0x148>
 8004e0a:	2601      	movs	r6, #1
 8004e0c:	e7d2      	b.n	8004db4 <HAL_GPIO_Init+0x148>
 8004e0e:	2602      	movs	r6, #2
 8004e10:	e7d0      	b.n	8004db4 <HAL_GPIO_Init+0x148>
 8004e12:	2603      	movs	r6, #3
 8004e14:	e7ce      	b.n	8004db4 <HAL_GPIO_Init+0x148>
 8004e16:	2604      	movs	r6, #4
 8004e18:	e7cc      	b.n	8004db4 <HAL_GPIO_Init+0x148>
 8004e1a:	2605      	movs	r6, #5
 8004e1c:	e7ca      	b.n	8004db4 <HAL_GPIO_Init+0x148>
 8004e1e:	2606      	movs	r6, #6
 8004e20:	e7c8      	b.n	8004db4 <HAL_GPIO_Init+0x148>
 8004e22:	2607      	movs	r6, #7
 8004e24:	e7c6      	b.n	8004db4 <HAL_GPIO_Init+0x148>
 8004e26:	2608      	movs	r6, #8
 8004e28:	e7c4      	b.n	8004db4 <HAL_GPIO_Init+0x148>
 8004e2a:	bf00      	nop
 8004e2c:	40013c00 	.word	0x40013c00
 8004e30:	40020000 	.word	0x40020000
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40021400 	.word	0x40021400

08004e3c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e3c:	6903      	ldr	r3, [r0, #16]
 8004e3e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004e40:	bf14      	ite	ne
 8004e42:	2001      	movne	r0, #1
 8004e44:	2000      	moveq	r0, #0
 8004e46:	4770      	bx	lr

08004e48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e48:	b10a      	cbz	r2, 8004e4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004e4a:	6181      	str	r1, [r0, #24]
  }
}
 8004e4c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004e4e:	0409      	lsls	r1, r1, #16
 8004e50:	e7fb      	b.n	8004e4a <HAL_GPIO_WritePin+0x2>

08004e52 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004e52:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e56:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004e58:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8004e5c:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8004e60:	2801      	cmp	r0, #1
{
 8004e62:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8004e66:	f8bd e038 	ldrh.w	lr, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8004e6a:	d028      	beq.n	8004ebe <HAL_HCD_HC_Init+0x6c>
 8004e6c:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8004e6e:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004e70:	f012 0f80 	tst.w	r2, #128	; 0x80
  hhcd->hc[ch_num].do_ping = 0U;
 8004e74:	f04f 0028 	mov.w	r0, #40	; 0x28
  __HAL_LOCK(hhcd);
 8004e78:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004e7c:	f002 097f 	and.w	r9, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 8004e80:	fb00 4001 	mla	r0, r0, r1, r4
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004e84:	bf08      	it	eq
 8004e86:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8004e88:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004e8c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8004e90:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8004e94:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8004e98:	f880 c03f 	strb.w	ip, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004e9c:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004ea0:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8004ea4:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance,
 8004ea8:	9700      	str	r7, [sp, #0]
 8004eaa:	6820      	ldr	r0, [r4, #0]
 8004eac:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8004eb0:	f002 ff1e 	bl	8007cf0 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004eb4:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8004eb8:	b004      	add	sp, #16
 8004eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8004ebe:	2002      	movs	r0, #2
 8004ec0:	e7fa      	b.n	8004eb8 <HAL_HCD_HC_Init+0x66>

08004ec2 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8004ec2:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8004ec6:	2b01      	cmp	r3, #1
{
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8004ecc:	d009      	beq.n	8004ee2 <HAL_HCD_HC_Halt+0x20>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ed4:	6800      	ldr	r0, [r0, #0]
 8004ed6:	f002 ff97 	bl	8007e08 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004eda:	2000      	movs	r0, #0
 8004edc:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 8004ee0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8004ee2:	2002      	movs	r0, #2
 8004ee4:	e7fc      	b.n	8004ee0 <HAL_HCD_HC_Halt+0x1e>

08004ee6 <HAL_HCD_Init>:
{
 8004ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8004eea:	4607      	mov	r7, r0
{
 8004eec:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d041      	beq.n	8004f76 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004ef2:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8004ef6:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004ef8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004efc:	b91b      	cbnz	r3, 8004f06 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8004efe:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8004f02:	f7fb ffdb 	bl	8000ebc <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8004f06:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004f08:	466d      	mov	r5, sp
 8004f0a:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004f0e:	463e      	mov	r6, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 8004f10:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8004f16:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f18:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8004f1c:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8004f20:	bf08      	it	eq
 8004f22:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8004f24:	f002 fda7 	bl	8007a76 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f34:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f38:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004f3c:	6838      	ldr	r0, [r7, #0]
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004f3e:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004f40:	f002 fd58 	bl	80079f4 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004f44:	f856 0b10 	ldr.w	r0, [r6], #16
 8004f48:	2101      	movs	r1, #1
 8004f4a:	f002 fd9a 	bl	8007a82 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004f4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f5e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004f62:	6838      	ldr	r0, [r7, #0]
 8004f64:	f002 fe4c 	bl	8007c00 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8004f68:	2301      	movs	r3, #1
  return HAL_OK;
 8004f6a:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8004f6c:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 8004f70:	b00a      	add	sp, #40	; 0x28
 8004f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004f76:	2001      	movs	r0, #1
 8004f78:	e7fa      	b.n	8004f70 <HAL_HCD_Init+0x8a>
	...

08004f7c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004f7c:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
 8004f7e:	2428      	movs	r4, #40	; 0x28
{
 8004f80:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8004f84:	9e05      	ldr	r6, [sp, #20]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004f86:	fb04 0401 	mla	r4, r4, r1, r0
{
 8004f8a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8004f8e:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004f92:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004f96:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8004f9a:	b97f      	cbnz	r7, 8004fbc <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004f9c:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004f9e:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].do_ping = do_ping;
 8004fa0:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8004fa8:	d02b      	beq.n	8005002 <HAL_HCD_HC_SubmitRequest+0x86>
 8004faa:	42bb      	cmp	r3, r7
 8004fac:	d029      	beq.n	8005002 <HAL_HCD_HC_SubmitRequest+0x86>
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d131      	bne.n	8005016 <HAL_HCD_HC_SubmitRequest+0x9a>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004fb2:	2328      	movs	r3, #40	; 0x28
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	fb03 0301 	mla	r3, r3, r1, r0
 8004fba:	e02a      	b.n	8005012 <HAL_HCD_HC_SubmitRequest+0x96>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004fbc:	f04f 0c02 	mov.w	ip, #2
 8004fc0:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  switch (ep_type)
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d826      	bhi.n	8005016 <HAL_HCD_HC_SubmitRequest+0x9a>
 8004fc8:	a401      	add	r4, pc, #4	; (adr r4, 8004fd0 <HAL_HCD_HC_SubmitRequest+0x54>)
 8004fca:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	08004fe1 	.word	0x08004fe1
 8004fd4:	08004fb3 	.word	0x08004fb3
 8004fd8:	08005003 	.word	0x08005003
 8004fdc:	08005003 	.word	0x08005003
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004fe0:	2f01      	cmp	r7, #1
 8004fe2:	d118      	bne.n	8005016 <HAL_HCD_HC_SubmitRequest+0x9a>
 8004fe4:	b9ba      	cbnz	r2, 8005016 <HAL_HCD_HC_SubmitRequest+0x9a>
        if (length == 0U)
 8004fe6:	b925      	cbnz	r5, 8004ff2 <HAL_HCD_HC_SubmitRequest+0x76>
          hhcd->hc[ch_num].toggle_out = 1U;
 8004fe8:	2328      	movs	r3, #40	; 0x28
 8004fea:	fb03 0301 	mla	r3, r3, r1, r0
 8004fee:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004ff2:	2328      	movs	r3, #40	; 0x28
 8004ff4:	fb03 0301 	mla	r3, r3, r1, r0
 8004ff8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ffc:	b14a      	cbz	r2, 8005012 <HAL_HCD_HC_SubmitRequest+0x96>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ffe:	2202      	movs	r2, #2
 8005000:	e007      	b.n	8005012 <HAL_HCD_HC_SubmitRequest+0x96>
 8005002:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005004:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8005008:	b9ca      	cbnz	r2, 800503e <HAL_HCD_HC_SubmitRequest+0xc2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800500a:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 800500e:	2c00      	cmp	r4, #0
 8005010:	d1f5      	bne.n	8004ffe <HAL_HCD_HC_SubmitRequest+0x82>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005016:	2428      	movs	r4, #40	; 0x28
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005018:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 800501a:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 800501e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005022:	4619      	mov	r1, r3
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005024:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8005028:	64da      	str	r2, [r3, #76]	; 0x4c
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800502a:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].state = HC_IDLE;
 800502c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005030:	7c02      	ldrb	r2, [r0, #16]
 8005032:	6800      	ldr	r0, [r0, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005034:	e9c3 6511 	strd	r6, r5, [r3, #68]	; 0x44
}
 8005038:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800503a:	f002 bf49 	b.w	8007ed0 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800503e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8005042:	e7db      	b.n	8004ffc <HAL_HCD_HC_SubmitRequest+0x80>

08005044 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005048:	6806      	ldr	r6, [r0, #0]
{
 800504a:	b085      	sub	sp, #20
 800504c:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800504e:	4630      	mov	r0, r6
 8005050:	f002 fd76 	bl	8007b40 <USB_GetMode>
 8005054:	2801      	cmp	r0, #1
 8005056:	f040 80e0 	bne.w	800521a <HAL_HCD_IRQHandler+0x1d6>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800505a:	6828      	ldr	r0, [r5, #0]
 800505c:	f002 fd6c 	bl	8007b38 <USB_ReadInterrupts>
 8005060:	2800      	cmp	r0, #0
 8005062:	f000 80da 	beq.w	800521a <HAL_HCD_IRQHandler+0x1d6>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005066:	6828      	ldr	r0, [r5, #0]
 8005068:	f002 fd66 	bl	8007b38 <USB_ReadInterrupts>
 800506c:	0284      	lsls	r4, r0, #10
 800506e:	d503      	bpl.n	8005078 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005076:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005078:	6828      	ldr	r0, [r5, #0]
 800507a:	f002 fd5d 	bl	8007b38 <USB_ReadInterrupts>
 800507e:	02c0      	lsls	r0, r0, #11
 8005080:	d503      	bpl.n	800508a <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005082:	682b      	ldr	r3, [r5, #0]
 8005084:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005088:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800508a:	6828      	ldr	r0, [r5, #0]
 800508c:	f002 fd54 	bl	8007b38 <USB_ReadInterrupts>
 8005090:	0141      	lsls	r1, r0, #5
 8005092:	d503      	bpl.n	800509c <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800509a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800509c:	6828      	ldr	r0, [r5, #0]
 800509e:	f002 fd4b 	bl	8007b38 <USB_ReadInterrupts>
 80050a2:	0782      	lsls	r2, r0, #30
 80050a4:	d502      	bpl.n	80050ac <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80050a6:	682b      	ldr	r3, [r5, #0]
 80050a8:	2202      	movs	r2, #2
 80050aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80050ac:	6828      	ldr	r0, [r5, #0]
 80050ae:	f002 fd43 	bl	8007b38 <USB_ReadInterrupts>
 80050b2:	0083      	lsls	r3, r0, #2
 80050b4:	d50e      	bpl.n	80050d4 <HAL_HCD_IRQHandler+0x90>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80050b6:	682b      	ldr	r3, [r5, #0]
 80050b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80050bc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80050be:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80050c2:	07df      	lsls	r7, r3, #31
 80050c4:	d406      	bmi.n	80050d4 <HAL_HCD_IRQHandler+0x90>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80050c6:	4628      	mov	r0, r5
 80050c8:	f7fb ffdc 	bl	8001084 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80050cc:	2101      	movs	r1, #1
 80050ce:	6828      	ldr	r0, [r5, #0]
 80050d0:	f002 fd3a 	bl	8007b48 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80050d4:	6828      	ldr	r0, [r5, #0]
 80050d6:	f002 fd2f 	bl	8007b38 <USB_ReadInterrupts>
 80050da:	01c4      	lsls	r4, r0, #7
 80050dc:	d53c      	bpl.n	8005158 <HAL_HCD_IRQHandler+0x114>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80050e0:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80050e4:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80050e6:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80050ea:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80050ec:	9b03      	ldr	r3, [sp, #12]
 80050ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050f2:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80050f4:	9b02      	ldr	r3, [sp, #8]
 80050f6:	0798      	lsls	r0, r3, #30
 80050f8:	d509      	bpl.n	800510e <HAL_HCD_IRQHandler+0xca>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80050fa:	9b02      	ldr	r3, [sp, #8]
 80050fc:	07d9      	lsls	r1, r3, #31
 80050fe:	d502      	bpl.n	8005106 <HAL_HCD_IRQHandler+0xc2>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005100:	4628      	mov	r0, r5
 8005102:	f7fb ffbb 	bl	800107c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005106:	9b03      	ldr	r3, [sp, #12]
 8005108:	f043 0302 	orr.w	r3, r3, #2
 800510c:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800510e:	9b02      	ldr	r3, [sp, #8]
 8005110:	071a      	lsls	r2, r3, #28
 8005112:	d517      	bpl.n	8005144 <HAL_HCD_IRQHandler+0x100>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005114:	9b03      	ldr	r3, [sp, #12]
 8005116:	f043 0308 	orr.w	r3, r3, #8
 800511a:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800511c:	9b02      	ldr	r3, [sp, #8]
 800511e:	075b      	lsls	r3, r3, #29
 8005120:	f140 8086 	bpl.w	8005230 <HAL_HCD_IRQHandler+0x1ec>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005124:	69a9      	ldr	r1, [r5, #24]
 8005126:	2902      	cmp	r1, #2
 8005128:	d17a      	bne.n	8005220 <HAL_HCD_IRQHandler+0x1dc>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800512a:	9b02      	ldr	r3, [sp, #8]
 800512c:	6828      	ldr	r0, [r5, #0]
 800512e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005132:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005136:	bf18      	it	ne
 8005138:	2101      	movne	r1, #1
 800513a:	f002 fd05 	bl	8007b48 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800513e:	4628      	mov	r0, r5
 8005140:	f7fb ffa4 	bl	800108c <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005144:	9b02      	ldr	r3, [sp, #8]
 8005146:	069f      	lsls	r7, r3, #26
 8005148:	d503      	bpl.n	8005152 <HAL_HCD_IRQHandler+0x10e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800514a:	9b03      	ldr	r3, [sp, #12]
 800514c:	f043 0320 	orr.w	r3, r3, #32
 8005150:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005152:	9b03      	ldr	r3, [sp, #12]
 8005154:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005158:	6828      	ldr	r0, [r5, #0]
 800515a:	f002 fced 	bl	8007b38 <USB_ReadInterrupts>
 800515e:	0704      	lsls	r4, r0, #28
 8005160:	d505      	bpl.n	800516e <HAL_HCD_IRQHandler+0x12a>
      HAL_HCD_SOF_Callback(hhcd);
 8005162:	4628      	mov	r0, r5
 8005164:	f7fb ff86 	bl	8001074 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	2208      	movs	r2, #8
 800516c:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800516e:	6828      	ldr	r0, [r5, #0]
 8005170:	f002 fce2 	bl	8007b38 <USB_ReadInterrupts>
 8005174:	0180      	lsls	r0, r0, #6
 8005176:	d512      	bpl.n	800519e <HAL_HCD_IRQHandler+0x15a>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005178:	6828      	ldr	r0, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800517a:	f04f 0900 	mov.w	r9, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800517e:	f002 fe3e 	bl	8007dfe <USB_HC_ReadInterrupt>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005182:	2728      	movs	r7, #40	; 0x28
 8005184:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005188:	f04f 0802 	mov.w	r8, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800518c:	9000      	str	r0, [sp, #0]
 800518e:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005190:	68ab      	ldr	r3, [r5, #8]
 8005192:	6828      	ldr	r0, [r5, #0]
 8005194:	454b      	cmp	r3, r9
 8005196:	d84f      	bhi.n	8005238 <HAL_HCD_IRQHandler+0x1f4>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800519c:	6143      	str	r3, [r0, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800519e:	6828      	ldr	r0, [r5, #0]
 80051a0:	f002 fcca 	bl	8007b38 <USB_ReadInterrupts>
 80051a4:	06c3      	lsls	r3, r0, #27
 80051a6:	d538      	bpl.n	800521a <HAL_HCD_IRQHandler+0x1d6>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051a8:	682c      	ldr	r4, [r5, #0]
 80051aa:	69a3      	ldr	r3, [r4, #24]
 80051ac:	f023 0310 	bic.w	r3, r3, #16
 80051b0:	61a3      	str	r3, [r4, #24]
  temp = hhcd->Instance->GRXSTSP;
 80051b2:	6a26      	ldr	r6, [r4, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80051b4:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 80051b8:	2a02      	cmp	r2, #2
 80051ba:	d129      	bne.n	8005210 <HAL_HCD_IRQHandler+0x1cc>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051bc:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80051c0:	f1b8 0f00 	cmp.w	r8, #0
 80051c4:	d024      	beq.n	8005210 <HAL_HCD_IRQHandler+0x1cc>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80051c6:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80051ca:	2728      	movs	r7, #40	; 0x28
 80051cc:	fb07 5706 	mla	r7, r7, r6, r5
 80051d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051d2:	b1e9      	cbz	r1, 8005210 <HAL_HCD_IRQHandler+0x1cc>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80051d4:	4642      	mov	r2, r8
 80051d6:	4620      	mov	r0, r4
 80051d8:	f002 fca0 	bl	8007b1c <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80051dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80051de:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80051e2:	4443      	add	r3, r8
 80051e4:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80051e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e8:	4443      	add	r3, r8
 80051ea:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80051ec:	0173      	lsls	r3, r6, #5
 80051ee:	18e2      	adds	r2, r4, r3
 80051f0:	6911      	ldr	r1, [r2, #16]
 80051f2:	4ab1      	ldr	r2, [pc, #708]	; (80054b8 <HAL_HCD_IRQHandler+0x474>)
 80051f4:	400a      	ands	r2, r1
 80051f6:	b15a      	cbz	r2, 8005210 <HAL_HCD_IRQHandler+0x1cc>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051f8:	58e2      	ldr	r2, [r4, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051fa:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005202:	50e2      	str	r2, [r4, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005204:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005208:	f083 0301 	eor.w	r3, r3, #1
 800520c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005210:	682a      	ldr	r2, [r5, #0]
 8005212:	6993      	ldr	r3, [r2, #24]
 8005214:	f043 0310 	orr.w	r3, r3, #16
 8005218:	6193      	str	r3, [r2, #24]
}
 800521a:	b005      	add	sp, #20
 800521c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005220:	68eb      	ldr	r3, [r5, #12]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d18b      	bne.n	800513e <HAL_HCD_IRQHandler+0xfa>
          USBx_HOST->HFIR = 60000U;
 8005226:	f64e 2260 	movw	r2, #60000	; 0xea60
 800522a:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
 800522e:	e786      	b.n	800513e <HAL_HCD_IRQHandler+0xfa>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005230:	4628      	mov	r0, r5
 8005232:	f7fb ff2f 	bl	8001094 <HAL_HCD_PortDisabled_Callback>
 8005236:	e785      	b.n	8005144 <HAL_HCD_IRQHandler+0x100>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005238:	f009 030f 	and.w	r3, r9, #15
 800523c:	9a00      	ldr	r2, [sp, #0]
 800523e:	fa22 f303 	lsr.w	r3, r2, r3
 8005242:	07d9      	lsls	r1, r3, #31
 8005244:	f140 8095 	bpl.w	8005372 <HAL_HCD_IRQHandler+0x32e>
 8005248:	ea4f 1349 	mov.w	r3, r9, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800524c:	9a01      	ldr	r2, [sp, #4]
 800524e:	fa5f f689 	uxtb.w	r6, r9
 8005252:	f500 6ba0 	add.w	fp, r0, #1280	; 0x500
 8005256:	58d1      	ldr	r1, [r2, r3]
 8005258:	ea4f 1a46 	mov.w	sl, r6, lsl #5
 800525c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8005260:	eb0b 040a 	add.w	r4, fp, sl
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005264:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005266:	f000 811d 	beq.w	80054a4 <HAL_HCD_IRQHandler+0x460>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800526a:	074a      	lsls	r2, r1, #29
 800526c:	d513      	bpl.n	8005296 <HAL_HCD_IRQHandler+0x252>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800526e:	2104      	movs	r1, #4
 8005270:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005272:	68e1      	ldr	r1, [r4, #12]
 8005274:	f041 0102 	orr.w	r1, r1, #2
 8005278:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800527a:	68a1      	ldr	r1, [r4, #8]
 800527c:	0588      	lsls	r0, r1, #22
 800527e:	d54a      	bpl.n	8005316 <HAL_HCD_IRQHandler+0x2d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005280:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005282:	4631      	mov	r1, r6
 8005284:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005286:	f043 0302 	orr.w	r3, r3, #2
 800528a:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800528c:	f002 fdbc 	bl	8007e08 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005294:	e0e6      	b.n	8005464 <HAL_HCD_IRQHandler+0x420>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005296:	68a1      	ldr	r1, [r4, #8]
 8005298:	05cb      	lsls	r3, r1, #23
 800529a:	d510      	bpl.n	80052be <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800529c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hhcd->hc[ch_num].state = HC_BBLERR;
 80052a0:	f04f 0c07 	mov.w	ip, #7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80052a4:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80052a6:	fb07 5106 	mla	r1, r7, r6, r5
 80052aa:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052ae:	68e1      	ldr	r1, [r4, #12]
 80052b0:	f041 0102 	orr.w	r1, r1, #2
 80052b4:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052b6:	4631      	mov	r1, r6
 80052b8:	f002 fda6 	bl	8007e08 <USB_HC_Halt>
 80052bc:	e7dd      	b.n	800527a <HAL_HCD_IRQHandler+0x236>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80052be:	68a1      	ldr	r1, [r4, #8]
 80052c0:	0689      	lsls	r1, r1, #26
 80052c2:	d502      	bpl.n	80052ca <HAL_HCD_IRQHandler+0x286>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80052c4:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80052c6:	60a1      	str	r1, [r4, #8]
 80052c8:	e7d7      	b.n	800527a <HAL_HCD_IRQHandler+0x236>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80052ca:	68a1      	ldr	r1, [r4, #8]
 80052cc:	070a      	lsls	r2, r1, #28
 80052ce:	d50e      	bpl.n	80052ee <HAL_HCD_IRQHandler+0x2aa>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052d0:	68e1      	ldr	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80052d2:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052d6:	f041 0102 	orr.w	r1, r1, #2
 80052da:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80052dc:	fb07 5106 	mla	r1, r7, r6, r5
 80052e0:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80052e4:	2110      	movs	r1, #16
 80052e6:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80052e8:	2108      	movs	r1, #8
 80052ea:	60a1      	str	r1, [r4, #8]
 80052ec:	e7e3      	b.n	80052b6 <HAL_HCD_IRQHandler+0x272>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80052ee:	68a1      	ldr	r1, [r4, #8]
 80052f0:	054b      	lsls	r3, r1, #21
 80052f2:	d5c2      	bpl.n	800527a <HAL_HCD_IRQHandler+0x236>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052f4:	68e1      	ldr	r1, [r4, #12]
 80052f6:	f041 0102 	orr.w	r1, r1, #2
 80052fa:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052fc:	4631      	mov	r1, r6
 80052fe:	f002 fd83 	bl	8007e08 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005302:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005304:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005306:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005308:	fb07 5106 	mla	r1, r7, r6, r5
 800530c:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005314:	e7d7      	b.n	80052c6 <HAL_HCD_IRQHandler+0x282>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005316:	68a1      	ldr	r1, [r4, #8]
 8005318:	07c9      	lsls	r1, r1, #31
 800531a:	d548      	bpl.n	80053ae <HAL_HCD_IRQHandler+0x36a>
    if (hhcd->Init.dma_enable != 0U)
 800531c:	6929      	ldr	r1, [r5, #16]
 800531e:	b149      	cbz	r1, 8005334 <HAL_HCD_IRQHandler+0x2f0>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005320:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005322:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005326:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800532a:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 800532e:	1a09      	subs	r1, r1, r0
 8005330:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8005334:	fb07 5106 	mla	r1, r7, r6, r5
 8005338:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 800533a:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 800533c:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005340:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005342:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005344:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8005348:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 800534c:	d114      	bne.n	8005378 <HAL_HCD_IRQHandler+0x334>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800534e:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005350:	4631      	mov	r1, r6
 8005352:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005354:	f043 0302 	orr.w	r3, r3, #2
 8005358:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800535a:	f002 fd55 	bl	8007e08 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800535e:	2310      	movs	r3, #16
 8005360:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005362:	fb07 5606 	mla	r6, r7, r6, r5
 8005366:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 800536a:	f083 0301 	eor.w	r3, r3, #1
 800536e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005372:	f109 0901 	add.w	r9, r9, #1
 8005376:	e70b      	b.n	8005190 <HAL_HCD_IRQHandler+0x14c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005378:	2a03      	cmp	r2, #3
 800537a:	d10d      	bne.n	8005398 <HAL_HCD_IRQHandler+0x354>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800537c:	f85b 000a 	ldr.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005380:	461a      	mov	r2, r3
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005382:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8005386:	f84b 000a 	str.w	r0, [fp, sl]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800538a:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800538e:	4631      	mov	r1, r6
 8005390:	4628      	mov	r0, r5
 8005392:	f7fb fe83 	bl	800109c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005396:	e7e4      	b.n	8005362 <HAL_HCD_IRQHandler+0x31e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005398:	2a01      	cmp	r2, #1
 800539a:	d1e2      	bne.n	8005362 <HAL_HCD_IRQHandler+0x31e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800539c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80053a0:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80053a4:	f083 0301 	eor.w	r3, r3, #1
 80053a8:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
 80053ac:	e7ef      	b.n	800538e <HAL_HCD_IRQHandler+0x34a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80053ae:	68a1      	ldr	r1, [r4, #8]
 80053b0:	078a      	lsls	r2, r1, #30
 80053b2:	d542      	bpl.n	800543a <HAL_HCD_IRQHandler+0x3f6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80053b4:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80053b6:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80053ba:	f021 0102 	bic.w	r1, r1, #2
 80053be:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80053c0:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80053c4:	2901      	cmp	r1, #1
 80053c6:	d102      	bne.n	80053ce <HAL_HCD_IRQHandler+0x38a>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80053c8:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 80053cc:	e02a      	b.n	8005424 <HAL_HCD_IRQHandler+0x3e0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80053ce:	2905      	cmp	r1, #5
 80053d0:	d0fa      	beq.n	80053c8 <HAL_HCD_IRQHandler+0x384>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80053d2:	2906      	cmp	r1, #6
 80053d4:	d001      	beq.n	80053da <HAL_HCD_IRQHandler+0x396>
 80053d6:	2908      	cmp	r1, #8
 80053d8:	d10f      	bne.n	80053fa <HAL_HCD_IRQHandler+0x3b6>
      hhcd->hc[ch_num].ErrCnt++;
 80053da:	fb07 5106 	mla	r1, r7, r6, r5
 80053de:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80053e0:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80053e2:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 80053e4:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].ErrCnt = 0U;
 80053e6:	bf89      	itett	hi
 80053e8:	2000      	movhi	r0, #0
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053ea:	f881 805c 	strbls.w	r8, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].ErrCnt = 0U;
 80053ee:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053f0:	2004      	movhi	r0, #4
 80053f2:	bf88      	it	hi
 80053f4:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
 80053f8:	e003      	b.n	8005402 <HAL_HCD_IRQHandler+0x3be>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80053fa:	2903      	cmp	r1, #3
 80053fc:	d10a      	bne.n	8005414 <HAL_HCD_IRQHandler+0x3d0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80053fe:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005402:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005406:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800540a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800540e:	f84b 100a 	str.w	r1, [fp, sl]
 8005412:	e007      	b.n	8005424 <HAL_HCD_IRQHandler+0x3e0>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005414:	2907      	cmp	r1, #7
 8005416:	d105      	bne.n	8005424 <HAL_HCD_IRQHandler+0x3e0>
      hhcd->hc[ch_num].ErrCnt++;
 8005418:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800541a:	3301      	adds	r3, #1
 800541c:	6583      	str	r3, [r0, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800541e:	2304      	movs	r3, #4
 8005420:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005424:	fb07 5306 	mla	r3, r7, r6, r5
 8005428:	4631      	mov	r1, r6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800542a:	f8c4 8008 	str.w	r8, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800542e:	4628      	mov	r0, r5
 8005430:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8005434:	f7fb fe32 	bl	800109c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005438:	e79b      	b.n	8005372 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800543a:	68a1      	ldr	r1, [r4, #8]
 800543c:	6828      	ldr	r0, [r5, #0]
 800543e:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8005442:	d011      	beq.n	8005468 <HAL_HCD_IRQHandler+0x424>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005444:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005446:	fb07 5206 	mla	r2, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800544a:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800544c:	f043 0302 	orr.w	r3, r3, #2
 8005450:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005452:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005454:	3301      	adds	r3, #1
 8005456:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005458:	2306      	movs	r3, #6
 800545a:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800545e:	f002 fcd3 	bl	8007e08 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	60a3      	str	r3, [r4, #8]
 8005466:	e784      	b.n	8005372 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005468:	68a3      	ldr	r3, [r4, #8]
 800546a:	06db      	lsls	r3, r3, #27
 800546c:	d581      	bpl.n	8005372 <HAL_HCD_IRQHandler+0x32e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800546e:	fb07 5206 	mla	r2, r7, r6, r5
 8005472:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8005476:	2b03      	cmp	r3, #3
 8005478:	d109      	bne.n	800548e <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800547a:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800547c:	68e3      	ldr	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800547e:	4631      	mov	r1, r6
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005480:	f043 0302 	orr.w	r3, r3, #2
 8005484:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005486:	f002 fcbf 	bl	8007e08 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800548a:	2310      	movs	r3, #16
 800548c:	e7ea      	b.n	8005464 <HAL_HCD_IRQHandler+0x420>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800548e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8005492:	d1fa      	bne.n	800548a <HAL_HCD_IRQHandler+0x446>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005494:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8005496:	692b      	ldr	r3, [r5, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1f6      	bne.n	800548a <HAL_HCD_IRQHandler+0x446>
        hhcd->hc[ch_num].state = HC_NAK;
 800549c:	2303      	movs	r3, #3
 800549e:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 80054a2:	e7eb      	b.n	800547c <HAL_HCD_IRQHandler+0x438>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80054a4:	f011 0c04 	ands.w	ip, r1, #4
 80054a8:	d008      	beq.n	80054bc <HAL_HCD_IRQHandler+0x478>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80054aa:	2304      	movs	r3, #4
 80054ac:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054ae:	68e3      	ldr	r3, [r4, #12]
 80054b0:	f043 0302 	orr.w	r3, r3, #2
 80054b4:	60e3      	str	r3, [r4, #12]
 80054b6:	e75c      	b.n	8005372 <HAL_HCD_IRQHandler+0x32e>
 80054b8:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80054bc:	68a1      	ldr	r1, [r4, #8]
 80054be:	f011 0120 	ands.w	r1, r1, #32
 80054c2:	d014      	beq.n	80054ee <HAL_HCD_IRQHandler+0x4aa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80054c4:	2320      	movs	r3, #32
 80054c6:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80054c8:	fb07 5306 	mla	r3, r7, r6, r5
 80054cc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80054d0:	2a01      	cmp	r2, #1
 80054d2:	f47f af4e 	bne.w	8005372 <HAL_HCD_IRQHandler+0x32e>
      hhcd->hc[ch_num].do_ping = 0U;
 80054d6:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054da:	4631      	mov	r1, r6
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80054dc:	f883 805c 	strb.w	r8, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054e0:	68e3      	ldr	r3, [r4, #12]
 80054e2:	f043 0302 	orr.w	r3, r3, #2
 80054e6:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054e8:	f002 fc8e 	bl	8007e08 <USB_HC_Halt>
 80054ec:	e741      	b.n	8005372 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80054ee:	68a3      	ldr	r3, [r4, #8]
 80054f0:	065a      	lsls	r2, r3, #25
 80054f2:	d511      	bpl.n	8005518 <HAL_HCD_IRQHandler+0x4d4>
    hhcd->hc[ch_num].state = HC_NYET;
 80054f4:	fb07 5306 	mla	r3, r7, r6, r5
 80054f8:	2204      	movs	r2, #4
 80054fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 80054fe:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005500:	6599      	str	r1, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005502:	4631      	mov	r1, r6
    hhcd->hc[ch_num].do_ping = 1U;
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005508:	68e3      	ldr	r3, [r4, #12]
 800550a:	f043 0302 	orr.w	r3, r3, #2
 800550e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005510:	f002 fc7a 	bl	8007e08 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005514:	2340      	movs	r3, #64	; 0x40
 8005516:	e7a5      	b.n	8005464 <HAL_HCD_IRQHandler+0x420>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005518:	68a1      	ldr	r1, [r4, #8]
 800551a:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 800551e:	d005      	beq.n	800552c <HAL_HCD_IRQHandler+0x4e8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005520:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005522:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005524:	f043 0302 	orr.w	r3, r3, #2
 8005528:	60e3      	str	r3, [r4, #12]
 800552a:	e6af      	b.n	800528c <HAL_HCD_IRQHandler+0x248>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800552c:	68a3      	ldr	r3, [r4, #8]
 800552e:	07db      	lsls	r3, r3, #31
 8005530:	d50f      	bpl.n	8005552 <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005532:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005534:	fb07 5a06 	mla	sl, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005538:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 800553c:	f8ca 1058 	str.w	r1, [sl, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005540:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005542:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005544:	f002 fc60 	bl	8007e08 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005548:	2201      	movs	r2, #1
 800554a:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800554c:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 8005550:	e70f      	b.n	8005372 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005552:	68a1      	ldr	r1, [r4, #8]
 8005554:	0709      	lsls	r1, r1, #28
 8005556:	d50e      	bpl.n	8005576 <HAL_HCD_IRQHandler+0x532>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005558:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800555a:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_STALL;
 800555c:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005560:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005562:	68e3      	ldr	r3, [r4, #12]
 8005564:	f043 0302 	orr.w	r3, r3, #2
 8005568:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800556a:	f002 fc4d 	bl	8007e08 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800556e:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005570:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8005574:	e6fd      	b.n	8005372 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005576:	68a1      	ldr	r1, [r4, #8]
 8005578:	06ca      	lsls	r2, r1, #27
 800557a:	d514      	bpl.n	80055a6 <HAL_HCD_IRQHandler+0x562>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800557c:	fb07 5306 	mla	r3, r7, r6, r5
 8005580:	2200      	movs	r2, #0
 8005582:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 8005584:	2203      	movs	r2, #3
 8005586:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 800558a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800558e:	2a00      	cmp	r2, #0
 8005590:	f47f af74 	bne.w	800547c <HAL_HCD_IRQHandler+0x438>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005594:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8005598:	2a00      	cmp	r2, #0
 800559a:	f47f af6f 	bne.w	800547c <HAL_HCD_IRQHandler+0x438>
        hhcd->hc[ch_num].do_ping = 1U;
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055a4:	e76a      	b.n	800547c <HAL_HCD_IRQHandler+0x438>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80055a6:	68a1      	ldr	r1, [r4, #8]
 80055a8:	060b      	lsls	r3, r1, #24
 80055aa:	d50c      	bpl.n	80055c6 <HAL_HCD_IRQHandler+0x582>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055ac:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055ae:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
 80055b0:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055b4:	f043 0302 	orr.w	r3, r3, #2
 80055b8:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055ba:	f002 fc25 	bl	8007e08 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80055be:	2306      	movs	r3, #6
 80055c0:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 80055c4:	e74d      	b.n	8005462 <HAL_HCD_IRQHandler+0x41e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80055c6:	68a1      	ldr	r1, [r4, #8]
 80055c8:	0549      	lsls	r1, r1, #21
 80055ca:	d50f      	bpl.n	80055ec <HAL_HCD_IRQHandler+0x5a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055cc:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055ce:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80055d0:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055d4:	f043 0302 	orr.w	r3, r3, #2
 80055d8:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055da:	f002 fc15 	bl	8007e08 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80055de:	2310      	movs	r3, #16
 80055e0:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80055e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055e6:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80055e8:	2308      	movs	r3, #8
 80055ea:	e7c1      	b.n	8005570 <HAL_HCD_IRQHandler+0x52c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80055ec:	68a1      	ldr	r1, [r4, #8]
 80055ee:	078a      	lsls	r2, r1, #30
 80055f0:	f57f aebf 	bpl.w	8005372 <HAL_HCD_IRQHandler+0x32e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80055f4:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80055f6:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80055fa:	f021 0102 	bic.w	r1, r1, #2
 80055fe:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005600:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8005604:	2901      	cmp	r1, #1
 8005606:	d10e      	bne.n	8005626 <HAL_HCD_IRQHandler+0x5e2>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005608:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800560c:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005610:	3b02      	subs	r3, #2
 8005612:	2b01      	cmp	r3, #1
 8005614:	f63f af06 	bhi.w	8005424 <HAL_HCD_IRQHandler+0x3e0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005618:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800561c:	f083 0301 	eor.w	r3, r3, #1
 8005620:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8005624:	e6fe      	b.n	8005424 <HAL_HCD_IRQHandler+0x3e0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005626:	2903      	cmp	r1, #3
 8005628:	d102      	bne.n	8005630 <HAL_HCD_IRQHandler+0x5ec>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800562a:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 800562e:	e6f9      	b.n	8005424 <HAL_HCD_IRQHandler+0x3e0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005630:	2904      	cmp	r1, #4
 8005632:	d0fa      	beq.n	800562a <HAL_HCD_IRQHandler+0x5e6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005634:	2905      	cmp	r1, #5
 8005636:	f43f aec7 	beq.w	80053c8 <HAL_HCD_IRQHandler+0x384>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800563a:	2906      	cmp	r1, #6
 800563c:	f43f aecd 	beq.w	80053da <HAL_HCD_IRQHandler+0x396>
 8005640:	2908      	cmp	r1, #8
 8005642:	f47f aeef 	bne.w	8005424 <HAL_HCD_IRQHandler+0x3e0>
 8005646:	e6c8      	b.n	80053da <HAL_HCD_IRQHandler+0x396>

08005648 <HAL_HCD_Start>:
{
 8005648:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 800564a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
 800564e:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8005650:	2b01      	cmp	r3, #1
 8005652:	d00d      	beq.n	8005670 <HAL_HCD_Start+0x28>
 8005654:	2501      	movs	r5, #1
 8005656:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	f002 fa05 	bl	8007a6a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005660:	4629      	mov	r1, r5
 8005662:	6820      	ldr	r0, [r4, #0]
 8005664:	f002 faab 	bl	8007bbe <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005668:	2000      	movs	r0, #0
 800566a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 800566e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8005670:	2002      	movs	r0, #2
 8005672:	e7fc      	b.n	800566e <HAL_HCD_Start+0x26>

08005674 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8005674:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8005678:	2b01      	cmp	r3, #1
{
 800567a:	b510      	push	{r4, lr}
 800567c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800567e:	d009      	beq.n	8005694 <HAL_HCD_Stop+0x20>
 8005680:	2301      	movs	r3, #1
 8005682:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005686:	6800      	ldr	r0, [r0, #0]
 8005688:	f002 fcce 	bl	8008028 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800568c:	2000      	movs	r0, #0
 800568e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8005692:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8005694:	2002      	movs	r0, #2
 8005696:	e7fc      	b.n	8005692 <HAL_HCD_Stop+0x1e>

08005698 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8005698:	6800      	ldr	r0, [r0, #0]
 800569a:	f002 ba72 	b.w	8007b82 <USB_ResetPort>

0800569e <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800569e:	2328      	movs	r3, #40	; 0x28
 80056a0:	fb03 0101 	mla	r1, r3, r1, r0
}
 80056a4:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80056a8:	4770      	bx	lr

080056aa <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 80056aa:	2328      	movs	r3, #40	; 0x28
 80056ac:	fb03 0101 	mla	r1, r3, r1, r0
}
 80056b0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80056b2:	4770      	bx	lr

080056b4 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80056b4:	6800      	ldr	r0, [r0, #0]
 80056b6:	f002 bb16 	b.w	8007ce6 <USB_GetCurrentFrame>

080056ba <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	f002 bb08 	b.w	8007cd0 <USB_GetHostSpeed>

080056c0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056c0:	6803      	ldr	r3, [r0, #0]
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	0791      	lsls	r1, r2, #30
 80056c6:	d501      	bpl.n	80056cc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056c8:	2200      	movs	r2, #0
 80056ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	07d2      	lsls	r2, r2, #31
 80056d0:	d403      	bmi.n	80056da <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056d2:	699a      	ldr	r2, [r3, #24]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	619a      	str	r2, [r3, #24]
  }
}
 80056da:	4770      	bx	lr

080056dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80056dc:	b530      	push	{r4, r5, lr}
 80056de:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80056e0:	6804      	ldr	r4, [r0, #0]
 80056e2:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80056e6:	6860      	ldr	r0, [r4, #4]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f3c1 0209 	ubfx	r2, r1, #0, #10
 80056ee:	431a      	orrs	r2, r3
 80056f0:	4b03      	ldr	r3, [pc, #12]	; (8005700 <I2C_TransferConfig+0x24>)
 80056f2:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 80056f6:	ea20 0003 	bic.w	r0, r0, r3
 80056fa:	4302      	orrs	r2, r0
 80056fc:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80056fe:	bd30      	pop	{r4, r5, pc}
 8005700:	03ff63ff 	.word	0x03ff63ff

08005704 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005704:	6803      	ldr	r3, [r0, #0]
{
 8005706:	b570      	push	{r4, r5, r6, lr}
 8005708:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800570a:	6998      	ldr	r0, [r3, #24]
{
 800570c:	460d      	mov	r5, r1
 800570e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005710:	f010 0010 	ands.w	r0, r0, #16
 8005714:	d116      	bne.n	8005744 <I2C_IsAcknowledgeFailed+0x40>
}
 8005716:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8005718:	1c69      	adds	r1, r5, #1
 800571a:	d014      	beq.n	8005746 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571c:	f7fe fec4 	bl	80044a8 <HAL_GetTick>
 8005720:	1b80      	subs	r0, r0, r6
 8005722:	42a8      	cmp	r0, r5
 8005724:	d800      	bhi.n	8005728 <I2C_IsAcknowledgeFailed+0x24>
 8005726:	b96d      	cbnz	r5, 8005744 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005728:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800572a:	f043 0320 	orr.w	r3, r3, #32
 800572e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005730:	2320      	movs	r3, #32
 8005732:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005736:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005738:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800573a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800573e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8005742:	e7e8      	b.n	8005716 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	6999      	ldr	r1, [r3, #24]
 8005748:	068a      	lsls	r2, r1, #26
 800574a:	d5e5      	bpl.n	8005718 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800574c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800574e:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8005750:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005752:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005754:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8005756:	f7ff ffb3 	bl	80056c0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	6853      	ldr	r3, [r2, #4]
 800575e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005762:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005766:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800576a:	f023 0301 	bic.w	r3, r3, #1
 800576e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005770:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005772:	f043 0304 	orr.w	r3, r3, #4
 8005776:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005778:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 800577c:	e7db      	b.n	8005736 <I2C_IsAcknowledgeFailed+0x32>

0800577e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800577e:	b570      	push	{r4, r5, r6, lr}
 8005780:	4604      	mov	r4, r0
 8005782:	460d      	mov	r5, r1
 8005784:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	069b      	lsls	r3, r3, #26
 800578c:	d501      	bpl.n	8005792 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800578e:	2000      	movs	r0, #0
}
 8005790:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005792:	4632      	mov	r2, r6
 8005794:	4629      	mov	r1, r5
 8005796:	4620      	mov	r0, r4
 8005798:	f7ff ffb4 	bl	8005704 <I2C_IsAcknowledgeFailed>
 800579c:	b990      	cbnz	r0, 80057c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579e:	f7fe fe83 	bl	80044a8 <HAL_GetTick>
 80057a2:	1b80      	subs	r0, r0, r6
 80057a4:	42a8      	cmp	r0, r5
 80057a6:	d801      	bhi.n	80057ac <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80057a8:	2d00      	cmp	r5, #0
 80057aa:	d1ec      	bne.n	8005786 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80057ae:	f043 0320 	orr.w	r3, r3, #32
 80057b2:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057b4:	2320      	movs	r3, #32
 80057b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80057c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80057c4:	2001      	movs	r0, #1
 80057c6:	e7e3      	b.n	8005790 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080057c8 <I2C_WaitOnFlagUntilTimeout>:
{
 80057c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057cc:	9f06      	ldr	r7, [sp, #24]
 80057ce:	4604      	mov	r4, r0
 80057d0:	4688      	mov	r8, r1
 80057d2:	4616      	mov	r6, r2
 80057d4:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	6993      	ldr	r3, [r2, #24]
 80057da:	ea38 0303 	bics.w	r3, r8, r3
 80057de:	bf0c      	ite	eq
 80057e0:	2301      	moveq	r3, #1
 80057e2:	2300      	movne	r3, #0
 80057e4:	42b3      	cmp	r3, r6
 80057e6:	d001      	beq.n	80057ec <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80057e8:	2000      	movs	r0, #0
 80057ea:	e015      	b.n	8005818 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80057ec:	1c6b      	adds	r3, r5, #1
 80057ee:	d0f3      	beq.n	80057d8 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f0:	f7fe fe5a 	bl	80044a8 <HAL_GetTick>
 80057f4:	1bc0      	subs	r0, r0, r7
 80057f6:	42a8      	cmp	r0, r5
 80057f8:	d801      	bhi.n	80057fe <I2C_WaitOnFlagUntilTimeout+0x36>
 80057fa:	2d00      	cmp	r5, #0
 80057fc:	d1eb      	bne.n	80057d6 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8005800:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005802:	f043 0320 	orr.w	r3, r3, #32
 8005806:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005808:	2320      	movs	r3, #32
 800580a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800580e:	2300      	movs	r3, #0
 8005810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8005814:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800581c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	4604      	mov	r4, r0
 8005820:	460d      	mov	r5, r1
 8005822:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	079b      	lsls	r3, r3, #30
 800582a:	d501      	bpl.n	8005830 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800582c:	2000      	movs	r0, #0
}
 800582e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005830:	4632      	mov	r2, r6
 8005832:	4629      	mov	r1, r5
 8005834:	4620      	mov	r0, r4
 8005836:	f7ff ff65 	bl	8005704 <I2C_IsAcknowledgeFailed>
 800583a:	b9a0      	cbnz	r0, 8005866 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800583c:	1c6a      	adds	r2, r5, #1
 800583e:	d0f1      	beq.n	8005824 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005840:	f7fe fe32 	bl	80044a8 <HAL_GetTick>
 8005844:	1b80      	subs	r0, r0, r6
 8005846:	42a8      	cmp	r0, r5
 8005848:	d801      	bhi.n	800584e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800584a:	2d00      	cmp	r5, #0
 800584c:	d1ea      	bne.n	8005824 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800584e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005850:	f043 0320 	orr.w	r3, r3, #32
 8005854:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005856:	2320      	movs	r3, #32
 8005858:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800585c:	2300      	movs	r3, #0
 800585e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8005862:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005866:	2001      	movs	r0, #1
 8005868:	e7e1      	b.n	800582e <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

0800586c <I2C_RequestMemoryWrite>:
{
 800586c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800586e:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005870:	4b16      	ldr	r3, [pc, #88]	; (80058cc <I2C_RequestMemoryWrite+0x60>)
{
 8005872:	4605      	mov	r5, r0
 8005874:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005876:	9300      	str	r3, [sp, #0]
{
 8005878:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800587a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800587e:	b2fa      	uxtb	r2, r7
 8005880:	f7ff ff2c 	bl	80056dc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005884:	4632      	mov	r2, r6
 8005886:	9908      	ldr	r1, [sp, #32]
 8005888:	4628      	mov	r0, r5
 800588a:	f7ff ffc7 	bl	800581c <I2C_WaitOnTXISFlagUntilTimeout>
 800588e:	b110      	cbz	r0, 8005896 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8005890:	2001      	movs	r0, #1
}
 8005892:	b003      	add	sp, #12
 8005894:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005896:	2f01      	cmp	r7, #1
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	d10c      	bne.n	80058b6 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800589c:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800589e:	2200      	movs	r2, #0
 80058a0:	2180      	movs	r1, #128	; 0x80
 80058a2:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058a4:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058a6:	9b08      	ldr	r3, [sp, #32]
 80058a8:	9600      	str	r6, [sp, #0]
 80058aa:	f7ff ff8d 	bl	80057c8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80058ae:	3000      	adds	r0, #0
 80058b0:	bf18      	it	ne
 80058b2:	2001      	movne	r0, #1
 80058b4:	e7ed      	b.n	8005892 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058b6:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058b8:	9908      	ldr	r1, [sp, #32]
 80058ba:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058be:	4632      	mov	r2, r6
 80058c0:	f7ff ffac 	bl	800581c <I2C_WaitOnTXISFlagUntilTimeout>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d1e3      	bne.n	8005890 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	e7e7      	b.n	800589c <I2C_RequestMemoryWrite+0x30>
 80058cc:	80002000 	.word	0x80002000

080058d0 <I2C_RequestMemoryRead>:
{
 80058d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058d2:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80058d4:	4b16      	ldr	r3, [pc, #88]	; (8005930 <I2C_RequestMemoryRead+0x60>)
{
 80058d6:	4605      	mov	r5, r0
 80058d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80058da:	9300      	str	r3, [sp, #0]
{
 80058dc:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80058de:	2300      	movs	r3, #0
 80058e0:	b2fa      	uxtb	r2, r7
 80058e2:	f7ff fefb 	bl	80056dc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e6:	4632      	mov	r2, r6
 80058e8:	9908      	ldr	r1, [sp, #32]
 80058ea:	4628      	mov	r0, r5
 80058ec:	f7ff ff96 	bl	800581c <I2C_WaitOnTXISFlagUntilTimeout>
 80058f0:	b110      	cbz	r0, 80058f8 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80058f2:	2001      	movs	r0, #1
}
 80058f4:	b003      	add	sp, #12
 80058f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058f8:	2f01      	cmp	r7, #1
 80058fa:	682b      	ldr	r3, [r5, #0]
 80058fc:	d10c      	bne.n	8005918 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058fe:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005900:	2200      	movs	r2, #0
 8005902:	2140      	movs	r1, #64	; 0x40
 8005904:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005906:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005908:	9b08      	ldr	r3, [sp, #32]
 800590a:	9600      	str	r6, [sp, #0]
 800590c:	f7ff ff5c 	bl	80057c8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005910:	3000      	adds	r0, #0
 8005912:	bf18      	it	ne
 8005914:	2001      	movne	r0, #1
 8005916:	e7ed      	b.n	80058f4 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005918:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800591a:	9908      	ldr	r1, [sp, #32]
 800591c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800591e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005920:	4632      	mov	r2, r6
 8005922:	f7ff ff7b 	bl	800581c <I2C_WaitOnTXISFlagUntilTimeout>
 8005926:	2800      	cmp	r0, #0
 8005928:	d1e3      	bne.n	80058f2 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800592a:	682b      	ldr	r3, [r5, #0]
 800592c:	e7e7      	b.n	80058fe <I2C_RequestMemoryRead+0x2e>
 800592e:	bf00      	nop
 8005930:	80002000 	.word	0x80002000

08005934 <HAL_I2C_MspInit>:
}
 8005934:	4770      	bx	lr

08005936 <HAL_I2C_Init>:
{
 8005936:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005938:	4604      	mov	r4, r0
 800593a:	2800      	cmp	r0, #0
 800593c:	d04a      	beq.n	80059d4 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800593e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005942:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005946:	b91b      	cbnz	r3, 8005950 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8005948:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800594c:	f7ff fff2 	bl	8005934 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005950:	2324      	movs	r3, #36	; 0x24
 8005952:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005960:	6862      	ldr	r2, [r4, #4]
 8005962:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005966:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800596e:	609a      	str	r2, [r3, #8]
 8005970:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005974:	2901      	cmp	r1, #1
 8005976:	d124      	bne.n	80059c2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005978:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800597c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800597e:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005980:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005982:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800598a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005992:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005994:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8005998:	430a      	orrs	r2, r1
 800599a:	69a1      	ldr	r1, [r4, #24]
 800599c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80059a0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059a2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80059b2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059b4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059ba:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80059c0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059c6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059c8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059ca:	d1d8      	bne.n	800597e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	e7d4      	b.n	800597e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80059d4:	2001      	movs	r0, #1
 80059d6:	e7f3      	b.n	80059c0 <HAL_I2C_Init+0x8a>

080059d8 <HAL_I2C_MspDeInit>:
 80059d8:	4770      	bx	lr

080059da <HAL_I2C_DeInit>:
{
 80059da:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80059dc:	4604      	mov	r4, r0
 80059de:	b198      	cbz	r0, 8005a08 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80059e0:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80059e2:	2324      	movs	r3, #36	; 0x24
 80059e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80059e8:	6813      	ldr	r3, [r2, #0]
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80059f0:	f7ff fff2 	bl	80059d8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f4:	2000      	movs	r0, #0
 80059f6:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80059f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80059fc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a00:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a02:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005a06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005a08:	2001      	movs	r0, #1
 8005a0a:	e7fc      	b.n	8005a06 <HAL_I2C_DeInit+0x2c>

08005a0c <HAL_I2C_Mem_Write>:
{
 8005a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a10:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a12:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8005a16:	b085      	sub	sp, #20
 8005a18:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a1a:	2b20      	cmp	r3, #32
{
 8005a1c:	460f      	mov	r7, r1
 8005a1e:	9203      	str	r2, [sp, #12]
 8005a20:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8005a24:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a28:	f040 80a2 	bne.w	8005b70 <HAL_I2C_Mem_Write+0x164>
    if ((pData == NULL) || (Size == 0U))
 8005a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a2e:	b113      	cbz	r3, 8005a36 <HAL_I2C_Mem_Write+0x2a>
 8005a30:	f1ba 0f00 	cmp.w	sl, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a3a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005a3c:	2001      	movs	r0, #1
}
 8005a3e:	b005      	add	sp, #20
 8005a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005a44:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	f000 8091 	beq.w	8005b70 <HAL_I2C_Mem_Write+0x164>
 8005a4e:	2501      	movs	r5, #1
 8005a50:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005a54:	f7fe fd28 	bl	80044a8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a58:	2319      	movs	r3, #25
 8005a5a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005a5c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a5e:	462a      	mov	r2, r5
 8005a60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7ff feaf 	bl	80057c8 <I2C_WaitOnFlagUntilTimeout>
 8005a6a:	4681      	mov	r9, r0
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d1e5      	bne.n	8005a3c <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a70:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8005a72:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a74:	9a03      	ldr	r2, [sp, #12]
 8005a76:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a7c:	2340      	movs	r3, #64	; 0x40
 8005a7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a84:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a86:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005a88:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a8a:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8005a8c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a90:	e9cd 8600 	strd	r8, r6, [sp]
 8005a94:	f7ff feea 	bl	800586c <I2C_RequestMemoryWrite>
 8005a98:	b110      	cbz	r0, 8005aa0 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8005a9a:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8005a9e:	e7cd      	b.n	8005a3c <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aa0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005aa2:	2bff      	cmp	r3, #255	; 0xff
 8005aa4:	d954      	bls.n	8005b50 <HAL_I2C_Mem_Write+0x144>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aa6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005aa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aac:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aae:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ab0:	4639      	mov	r1, r7
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f7ff fe12 	bl	80056dc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab8:	4632      	mov	r2, r6
 8005aba:	4641      	mov	r1, r8
 8005abc:	4620      	mov	r0, r4
 8005abe:	f7ff fead 	bl	800581c <I2C_WaitOnTXISFlagUntilTimeout>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d1ba      	bne.n	8005a3c <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ac8:	6822      	ldr	r2, [r4, #0]
 8005aca:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005ace:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005ad0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005ad2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005ad4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005ad6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005ad8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005ada:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005adc:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005ade:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ae0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005ae2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	b1a3      	cbz	r3, 8005b12 <HAL_I2C_Mem_Write+0x106>
 8005ae8:	b99a      	cbnz	r2, 8005b12 <HAL_I2C_Mem_Write+0x106>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005aea:	9600      	str	r6, [sp, #0]
 8005aec:	4643      	mov	r3, r8
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	4620      	mov	r0, r4
 8005af2:	f7ff fe69 	bl	80057c8 <I2C_WaitOnFlagUntilTimeout>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d1a0      	bne.n	8005a3c <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005afa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005afc:	2bff      	cmp	r3, #255	; 0xff
 8005afe:	d92f      	bls.n	8005b60 <HAL_I2C_Mem_Write+0x154>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b00:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b06:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b08:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f7ff fde5 	bl	80056dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8005b12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1ce      	bne.n	8005ab8 <HAL_I2C_Mem_Write+0xac>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b1a:	4632      	mov	r2, r6
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f7ff fe2d 	bl	800577e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d189      	bne.n	8005a3c <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	2120      	movs	r1, #32
 8005b2c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005b34:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005b38:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005b3c:	f022 0201 	bic.w	r2, r2, #1
 8005b40:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b42:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005b46:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b4a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005b4e:	e776      	b.n	8005a3e <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005b50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b56:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8005b58:	b292      	uxth	r2, r2
 8005b5a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	e7a7      	b.n	8005ab0 <HAL_I2C_Mem_Write+0xa4>
          hi2c->XferSize = hi2c->XferCount;
 8005b60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b66:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005b68:	b292      	uxth	r2, r2
 8005b6a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	e7cc      	b.n	8005b0a <HAL_I2C_Mem_Write+0xfe>
    return HAL_BUSY;
 8005b70:	2002      	movs	r0, #2
 8005b72:	e764      	b.n	8005a3e <HAL_I2C_Mem_Write+0x32>

08005b74 <HAL_I2C_Mem_Read>:
{
 8005b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b78:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b7a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8005b7e:	b085      	sub	sp, #20
 8005b80:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b82:	2b20      	cmp	r3, #32
{
 8005b84:	460f      	mov	r7, r1
 8005b86:	9203      	str	r2, [sp, #12]
 8005b88:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8005b8c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b90:	f040 80a6 	bne.w	8005ce0 <HAL_I2C_Mem_Read+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8005b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b96:	b113      	cbz	r3, 8005b9e <HAL_I2C_Mem_Read+0x2a>
 8005b98:	f1ba 0f00 	cmp.w	sl, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ba2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005ba4:	2001      	movs	r0, #1
}
 8005ba6:	b005      	add	sp, #20
 8005ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005bac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	f000 8095 	beq.w	8005ce0 <HAL_I2C_Mem_Read+0x16c>
 8005bb6:	2501      	movs	r5, #1
 8005bb8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005bbc:	f7fe fc74 	bl	80044a8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bc0:	2319      	movs	r3, #25
 8005bc2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005bc4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bc6:	462a      	mov	r2, r5
 8005bc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f7ff fdfb 	bl	80057c8 <I2C_WaitOnFlagUntilTimeout>
 8005bd2:	4681      	mov	r9, r0
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d1e5      	bne.n	8005ba4 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bd8:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8005bda:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bdc:	9a03      	ldr	r2, [sp, #12]
 8005bde:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005be0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005be4:	2340      	movs	r3, #64	; 0x40
 8005be6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005bea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bec:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bee:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005bf0:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bf2:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8005bf4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bf8:	e9cd 8600 	strd	r8, r6, [sp]
 8005bfc:	f7ff fe68 	bl	80058d0 <I2C_RequestMemoryRead>
 8005c00:	b110      	cbz	r0, 8005c08 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8005c02:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8005c06:	e7cd      	b.n	8005ba4 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c0a:	2bff      	cmp	r3, #255	; 0xff
 8005c0c:	4b35      	ldr	r3, [pc, #212]	; (8005ce4 <HAL_I2C_Mem_Read+0x170>)
 8005c0e:	d957      	bls.n	8005cc0 <HAL_I2C_Mem_Read+0x14c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c10:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c18:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f7ff fd5d 	bl	80056dc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005c22:	9600      	str	r6, [sp, #0]
 8005c24:	4643      	mov	r3, r8
 8005c26:	2200      	movs	r2, #0
 8005c28:	2104      	movs	r1, #4
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f7ff fdcc 	bl	80057c8 <I2C_WaitOnFlagUntilTimeout>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d1b7      	bne.n	8005ba4 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c3a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005c3e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005c40:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8005c42:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8005c44:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005c46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005c48:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005c4a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005c4c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	b1a3      	cbz	r3, 8005c82 <HAL_I2C_Mem_Read+0x10e>
 8005c58:	b99a      	cbnz	r2, 8005c82 <HAL_I2C_Mem_Read+0x10e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c5a:	9600      	str	r6, [sp, #0]
 8005c5c:	4643      	mov	r3, r8
 8005c5e:	2180      	movs	r1, #128	; 0x80
 8005c60:	4620      	mov	r0, r4
 8005c62:	f7ff fdb1 	bl	80057c8 <I2C_WaitOnFlagUntilTimeout>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d19c      	bne.n	8005ba4 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c6c:	2bff      	cmp	r3, #255	; 0xff
 8005c6e:	d92f      	bls.n	8005cd0 <HAL_I2C_Mem_Read+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c70:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c76:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c78:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c7a:	4639      	mov	r1, r7
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f7ff fd2d 	bl	80056dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8005c82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1cb      	bne.n	8005c22 <HAL_I2C_Mem_Read+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c8a:	4632      	mov	r2, r6
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f7ff fd75 	bl	800577e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d185      	bne.n	8005ba4 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	2120      	movs	r1, #32
 8005c9c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005ca4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005ca8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005cb2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005cb6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cba:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005cbe:	e772      	b.n	8005ba6 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005cc0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8005cc8:	b292      	uxth	r2, r2
 8005cca:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	e7a4      	b.n	8005c1a <HAL_I2C_Mem_Read+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8005cd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cd6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005cd8:	b292      	uxth	r2, r2
 8005cda:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	e7cc      	b.n	8005c7a <HAL_I2C_Mem_Read+0x106>
    return HAL_BUSY;
 8005ce0:	2002      	movs	r0, #2
 8005ce2:	e760      	b.n	8005ba6 <HAL_I2C_Mem_Read+0x32>
 8005ce4:	80002400 	.word	0x80002400

08005ce8 <HAL_I2C_GetState>:
  return hi2c->State;
 8005ce8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005cec:	4770      	bx	lr

08005cee <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005cee:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005cf0:	f8d1 c000 	ldr.w	ip, [r1]
{
 8005cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005cf8:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005cfa:	6804      	ldr	r4, [r0, #0]
 8005cfc:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005cfe:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d02:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d04:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005d06:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005d0a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d0e:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d10:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d14:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d18:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d1a:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d1c:	68e0      	ldr	r0, [r4, #12]
 8005d1e:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8005d22:	4430      	add	r0, r6
 8005d24:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005d28:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d2a:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005d2c:	68e0      	ldr	r0, [r4, #12]
 8005d2e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005d32:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005d34:	6898      	ldr	r0, [r3, #8]
 8005d36:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8005d3a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005d3c:	6888      	ldr	r0, [r1, #8]
 8005d3e:	68e6      	ldr	r6, [r4, #12]
 8005d40:	3001      	adds	r0, #1
 8005d42:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8005d46:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d48:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005d4e:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005d50:	6918      	ldr	r0, [r3, #16]
 8005d52:	f020 0007 	bic.w	r0, r0, #7
 8005d56:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d58:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005d5a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005d5c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005d60:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005d64:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005d68:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8005d6c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005d70:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005d74:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8005d78:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005d7a:	6958      	ldr	r0, [r3, #20]
 8005d7c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8005d80:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005d82:	6948      	ldr	r0, [r1, #20]
 8005d84:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005d86:	69d8      	ldr	r0, [r3, #28]
 8005d88:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8005d8c:	f020 0007 	bic.w	r0, r0, #7
 8005d90:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005d92:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8005d96:	4305      	orrs	r5, r0
 8005d98:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005d9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005d9c:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005d9e:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005da2:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005da4:	b31e      	cbz	r6, 8005dee <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005da6:	2e01      	cmp	r6, #1
 8005da8:	d023      	beq.n	8005df2 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005daa:	1eb0      	subs	r0, r6, #2
 8005dac:	2802      	cmp	r0, #2
 8005dae:	d922      	bls.n	8005df6 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005db0:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005db2:	bf0c      	ite	eq
 8005db4:	2002      	moveq	r0, #2
 8005db6:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005db8:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005dba:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005dbe:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8005dc2:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005dc4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005dc6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005dc8:	4345      	muls	r5, r0
 8005dca:	4378      	muls	r0, r7
 8005dcc:	3003      	adds	r0, #3
 8005dce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005dd2:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005dd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005dd6:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8005dda:	f020 0007 	bic.w	r0, r0, #7
 8005dde:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005de0:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005de2:	58a3      	ldr	r3, [r4, r2]
 8005de4:	f043 0301 	orr.w	r3, r3, #1
 8005de8:	50a3      	str	r3, [r4, r2]
}
 8005dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8005dee:	2004      	movs	r0, #4
 8005df0:	e7e2      	b.n	8005db8 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8005df2:	2003      	movs	r0, #3
 8005df4:	e7e0      	b.n	8005db8 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8005df6:	2002      	movs	r0, #2
 8005df8:	e7de      	b.n	8005db8 <LTDC_SetConfig+0xca>

08005dfa <HAL_LTDC_MspInit>:
}
 8005dfa:	4770      	bx	lr

08005dfc <HAL_LTDC_Init>:
{
 8005dfc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005dfe:	4604      	mov	r4, r0
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d063      	beq.n	8005ecc <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005e04:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005e08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e0c:	b91b      	cbnz	r3, 8005e16 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005e0e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005e12:	f7ff fff2 	bl	8005dfa <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e16:	2302      	movs	r3, #2
 8005e18:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	699a      	ldr	r2, [r3, #24]
 8005e20:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005e24:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e26:	6999      	ldr	r1, [r3, #24]
 8005e28:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005e2c:	4302      	orrs	r2, r0
 8005e2e:	68e0      	ldr	r0, [r4, #12]
 8005e30:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e32:	6920      	ldr	r0, [r4, #16]
 8005e34:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005e36:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e38:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e3a:	4925      	ldr	r1, [pc, #148]	; (8005ed0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e3c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	400a      	ands	r2, r1
 8005e42:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005e4a:	69a0      	ldr	r0, [r4, #24]
 8005e4c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e4e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005e50:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	400a      	ands	r2, r1
 8005e56:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005e5e:	6a20      	ldr	r0, [r4, #32]
 8005e60:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e62:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e64:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	400a      	ands	r2, r1
 8005e6a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005e72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005e74:	4302      	orrs	r2, r0
 8005e76:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e78:	695a      	ldr	r2, [r3, #20]
 8005e7a:	4011      	ands	r1, r2
 8005e7c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005e86:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e8e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e92:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e96:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e9a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e9e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005ea8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005eac:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005eae:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb2:	f042 0206 	orr.w	r2, r2, #6
 8005eb6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ec0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ec2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ec6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005ecc:	2001      	movs	r0, #1
 8005ece:	e7fc      	b.n	8005eca <HAL_LTDC_Init+0xce>
 8005ed0:	f000f800 	.word	0xf000f800

08005ed4 <HAL_LTDC_ConfigLayer>:
{
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8005ed6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8005eda:	4606      	mov	r6, r0
 8005edc:	468c      	mov	ip, r1
 8005ede:	4696      	mov	lr, r2
  __HAL_LOCK(hltdc);
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	f04f 0002 	mov.w	r0, #2
 8005ee6:	d01d      	beq.n	8005f24 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ee8:	2434      	movs	r4, #52	; 0x34
 8005eea:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005eec:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8005ef0:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ef2:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005ef6:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005efa:	3438      	adds	r4, #56	; 0x38
 8005efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f08:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	4672      	mov	r2, lr
 8005f0e:	4661      	mov	r1, ip
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f10:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f12:	f7ff feec 	bl	8005cee <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f16:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005f18:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f1a:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005f1c:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005f20:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f26 <HAL_LTDC_GetState>:
  return hltdc->State;
 8005f26:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8005f2a:	4770      	bx	lr

08005f2c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8005f2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f32:	4c19      	ldr	r4, [pc, #100]	; (8005f98 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005f38:	641a      	str	r2, [r3, #64]	; 0x40
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f4a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f4c:	f7fe faac 	bl	80044a8 <HAL_GetTick>
 8005f50:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f52:	6863      	ldr	r3, [r4, #4]
 8005f54:	03da      	lsls	r2, r3, #15
 8005f56:	d50c      	bpl.n	8005f72 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f5e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f60:	f7fe faa2 	bl	80044a8 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f64:	4c0c      	ldr	r4, [pc, #48]	; (8005f98 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8005f66:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	039b      	lsls	r3, r3, #14
 8005f6c:	d50a      	bpl.n	8005f84 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005f6e:	2000      	movs	r0, #0
 8005f70:	e006      	b.n	8005f80 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f72:	f7fe fa99 	bl	80044a8 <HAL_GetTick>
 8005f76:	1b40      	subs	r0, r0, r5
 8005f78:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005f7c:	d9e9      	bls.n	8005f52 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8005f7e:	2003      	movs	r0, #3
}
 8005f80:	b003      	add	sp, #12
 8005f82:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f84:	f7fe fa90 	bl	80044a8 <HAL_GetTick>
 8005f88:	1b40      	subs	r0, r0, r5
 8005f8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005f8e:	d9eb      	bls.n	8005f68 <HAL_PWREx_EnableOverDrive+0x3c>
 8005f90:	e7f5      	b.n	8005f7e <HAL_PWREx_EnableOverDrive+0x52>
 8005f92:	bf00      	nop
 8005f94:	40023800 	.word	0x40023800
 8005f98:	40007000 	.word	0x40007000

08005f9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	b908      	cbnz	r0, 8005fa8 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	e03f      	b.n	8006028 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fa8:	6803      	ldr	r3, [r0, #0]
 8005faa:	07d8      	lsls	r0, r3, #31
 8005fac:	d410      	bmi.n	8005fd0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	0799      	lsls	r1, r3, #30
 8005fb2:	d460      	bmi.n	8006076 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	0719      	lsls	r1, r3, #28
 8005fb8:	f100 80a5 	bmi.w	8006106 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	075a      	lsls	r2, r3, #29
 8005fc0:	f100 80c6 	bmi.w	8006150 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fc4:	69a0      	ldr	r0, [r4, #24]
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f040 8130 	bne.w	800622c <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 8005fcc:	2000      	movs	r0, #0
 8005fce:	e02b      	b.n	8006028 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fd0:	4b94      	ldr	r3, [pc, #592]	; (8006224 <HAL_RCC_OscConfig+0x288>)
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	f002 020c 	and.w	r2, r2, #12
 8005fd8:	2a04      	cmp	r2, #4
 8005fda:	d007      	beq.n	8005fec <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fdc:	689a      	ldr	r2, [r3, #8]
 8005fde:	f002 020c 	and.w	r2, r2, #12
 8005fe2:	2a08      	cmp	r2, #8
 8005fe4:	d10a      	bne.n	8005ffc <HAL_RCC_OscConfig+0x60>
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	025a      	lsls	r2, r3, #9
 8005fea:	d507      	bpl.n	8005ffc <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fec:	4b8d      	ldr	r3, [pc, #564]	; (8006224 <HAL_RCC_OscConfig+0x288>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	039b      	lsls	r3, r3, #14
 8005ff2:	d5dc      	bpl.n	8005fae <HAL_RCC_OscConfig+0x12>
 8005ff4:	6863      	ldr	r3, [r4, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1d9      	bne.n	8005fae <HAL_RCC_OscConfig+0x12>
 8005ffa:	e7d3      	b.n	8005fa4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ffc:	6863      	ldr	r3, [r4, #4]
 8005ffe:	4d89      	ldr	r5, [pc, #548]	; (8006224 <HAL_RCC_OscConfig+0x288>)
 8006000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006004:	d113      	bne.n	800602e <HAL_RCC_OscConfig+0x92>
 8006006:	682b      	ldr	r3, [r5, #0]
 8006008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800600c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800600e:	f7fe fa4b 	bl	80044a8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006012:	4d84      	ldr	r5, [pc, #528]	; (8006224 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8006014:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006016:	682b      	ldr	r3, [r5, #0]
 8006018:	039f      	lsls	r7, r3, #14
 800601a:	d4c8      	bmi.n	8005fae <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800601c:	f7fe fa44 	bl	80044a8 <HAL_GetTick>
 8006020:	1b80      	subs	r0, r0, r6
 8006022:	2864      	cmp	r0, #100	; 0x64
 8006024:	d9f7      	bls.n	8006016 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8006026:	2003      	movs	r0, #3
}
 8006028:	b002      	add	sp, #8
 800602a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800602e:	b99b      	cbnz	r3, 8006058 <HAL_RCC_OscConfig+0xbc>
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006036:	602b      	str	r3, [r5, #0]
 8006038:	682b      	ldr	r3, [r5, #0]
 800603a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800603e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006040:	f7fe fa32 	bl	80044a8 <HAL_GetTick>
 8006044:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006046:	682b      	ldr	r3, [r5, #0]
 8006048:	0398      	lsls	r0, r3, #14
 800604a:	d5b0      	bpl.n	8005fae <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800604c:	f7fe fa2c 	bl	80044a8 <HAL_GetTick>
 8006050:	1b80      	subs	r0, r0, r6
 8006052:	2864      	cmp	r0, #100	; 0x64
 8006054:	d9f7      	bls.n	8006046 <HAL_RCC_OscConfig+0xaa>
 8006056:	e7e6      	b.n	8006026 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	d103      	bne.n	8006068 <HAL_RCC_OscConfig+0xcc>
 8006060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006064:	602b      	str	r3, [r5, #0]
 8006066:	e7ce      	b.n	8006006 <HAL_RCC_OscConfig+0x6a>
 8006068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800606c:	602b      	str	r3, [r5, #0]
 800606e:	682b      	ldr	r3, [r5, #0]
 8006070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006074:	e7ca      	b.n	800600c <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006076:	4b6b      	ldr	r3, [pc, #428]	; (8006224 <HAL_RCC_OscConfig+0x288>)
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	f012 0f0c 	tst.w	r2, #12
 800607e:	d007      	beq.n	8006090 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	f002 020c 	and.w	r2, r2, #12
 8006086:	2a08      	cmp	r2, #8
 8006088:	d111      	bne.n	80060ae <HAL_RCC_OscConfig+0x112>
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	0259      	lsls	r1, r3, #9
 800608e:	d40e      	bmi.n	80060ae <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006090:	4b64      	ldr	r3, [pc, #400]	; (8006224 <HAL_RCC_OscConfig+0x288>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	0792      	lsls	r2, r2, #30
 8006096:	d502      	bpl.n	800609e <HAL_RCC_OscConfig+0x102>
 8006098:	68e2      	ldr	r2, [r4, #12]
 800609a:	2a01      	cmp	r2, #1
 800609c:	d182      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	6921      	ldr	r1, [r4, #16]
 80060a2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80060a6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80060aa:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ac:	e782      	b.n	8005fb4 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060ae:	68e3      	ldr	r3, [r4, #12]
 80060b0:	4d5c      	ldr	r5, [pc, #368]	; (8006224 <HAL_RCC_OscConfig+0x288>)
 80060b2:	b1bb      	cbz	r3, 80060e4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	f043 0301 	orr.w	r3, r3, #1
 80060ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80060bc:	f7fe f9f4 	bl	80044a8 <HAL_GetTick>
 80060c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c2:	682b      	ldr	r3, [r5, #0]
 80060c4:	079f      	lsls	r7, r3, #30
 80060c6:	d507      	bpl.n	80060d8 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	6922      	ldr	r2, [r4, #16]
 80060cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80060d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80060d4:	602b      	str	r3, [r5, #0]
 80060d6:	e76d      	b.n	8005fb4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060d8:	f7fe f9e6 	bl	80044a8 <HAL_GetTick>
 80060dc:	1b80      	subs	r0, r0, r6
 80060de:	2802      	cmp	r0, #2
 80060e0:	d9ef      	bls.n	80060c2 <HAL_RCC_OscConfig+0x126>
 80060e2:	e7a0      	b.n	8006026 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	f023 0301 	bic.w	r3, r3, #1
 80060ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80060ec:	f7fe f9dc 	bl	80044a8 <HAL_GetTick>
 80060f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060f2:	682b      	ldr	r3, [r5, #0]
 80060f4:	0798      	lsls	r0, r3, #30
 80060f6:	f57f af5d 	bpl.w	8005fb4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060fa:	f7fe f9d5 	bl	80044a8 <HAL_GetTick>
 80060fe:	1b80      	subs	r0, r0, r6
 8006100:	2802      	cmp	r0, #2
 8006102:	d9f6      	bls.n	80060f2 <HAL_RCC_OscConfig+0x156>
 8006104:	e78f      	b.n	8006026 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006106:	6963      	ldr	r3, [r4, #20]
 8006108:	4d46      	ldr	r5, [pc, #280]	; (8006224 <HAL_RCC_OscConfig+0x288>)
 800610a:	b183      	cbz	r3, 800612e <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 800610c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006114:	f7fe f9c8 	bl	80044a8 <HAL_GetTick>
 8006118:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800611a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800611c:	079b      	lsls	r3, r3, #30
 800611e:	f53f af4d 	bmi.w	8005fbc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006122:	f7fe f9c1 	bl	80044a8 <HAL_GetTick>
 8006126:	1b80      	subs	r0, r0, r6
 8006128:	2802      	cmp	r0, #2
 800612a:	d9f6      	bls.n	800611a <HAL_RCC_OscConfig+0x17e>
 800612c:	e77b      	b.n	8006026 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800612e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006136:	f7fe f9b7 	bl	80044a8 <HAL_GetTick>
 800613a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800613c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800613e:	079f      	lsls	r7, r3, #30
 8006140:	f57f af3c 	bpl.w	8005fbc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006144:	f7fe f9b0 	bl	80044a8 <HAL_GetTick>
 8006148:	1b80      	subs	r0, r0, r6
 800614a:	2802      	cmp	r0, #2
 800614c:	d9f6      	bls.n	800613c <HAL_RCC_OscConfig+0x1a0>
 800614e:	e76a      	b.n	8006026 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006150:	4b34      	ldr	r3, [pc, #208]	; (8006224 <HAL_RCC_OscConfig+0x288>)
 8006152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006154:	00d0      	lsls	r0, r2, #3
 8006156:	d427      	bmi.n	80061a8 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800615a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800615c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006160:	641a      	str	r2, [r3, #64]	; 0x40
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800616c:	4d2e      	ldr	r5, [pc, #184]	; (8006228 <HAL_RCC_OscConfig+0x28c>)
 800616e:	682b      	ldr	r3, [r5, #0]
 8006170:	05d9      	lsls	r1, r3, #23
 8006172:	d51b      	bpl.n	80061ac <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006174:	68a3      	ldr	r3, [r4, #8]
 8006176:	4d2b      	ldr	r5, [pc, #172]	; (8006224 <HAL_RCC_OscConfig+0x288>)
 8006178:	2b01      	cmp	r3, #1
 800617a:	d127      	bne.n	80061cc <HAL_RCC_OscConfig+0x230>
 800617c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006184:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006188:	f7fe f98e 	bl	80044a8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618c:	4f25      	ldr	r7, [pc, #148]	; (8006224 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800618e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006192:	079b      	lsls	r3, r3, #30
 8006194:	d53f      	bpl.n	8006216 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8006196:	2e00      	cmp	r6, #0
 8006198:	f43f af14 	beq.w	8005fc4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800619c:	4a21      	ldr	r2, [pc, #132]	; (8006224 <HAL_RCC_OscConfig+0x288>)
 800619e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80061a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a4:	6413      	str	r3, [r2, #64]	; 0x40
 80061a6:	e70d      	b.n	8005fc4 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 80061a8:	2600      	movs	r6, #0
 80061aa:	e7df      	b.n	800616c <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80061b4:	f7fe f978 	bl	80044a8 <HAL_GetTick>
 80061b8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	05da      	lsls	r2, r3, #23
 80061be:	d4d9      	bmi.n	8006174 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c0:	f7fe f972 	bl	80044a8 <HAL_GetTick>
 80061c4:	1bc0      	subs	r0, r0, r7
 80061c6:	2864      	cmp	r0, #100	; 0x64
 80061c8:	d9f7      	bls.n	80061ba <HAL_RCC_OscConfig+0x21e>
 80061ca:	e72c      	b.n	8006026 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061cc:	b9ab      	cbnz	r3, 80061fa <HAL_RCC_OscConfig+0x25e>
 80061ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d4:	f023 0301 	bic.w	r3, r3, #1
 80061d8:	672b      	str	r3, [r5, #112]	; 0x70
 80061da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80061dc:	f023 0304 	bic.w	r3, r3, #4
 80061e0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80061e2:	f7fe f961 	bl	80044a8 <HAL_GetTick>
 80061e6:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80061ea:	0798      	lsls	r0, r3, #30
 80061ec:	d5d3      	bpl.n	8006196 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ee:	f7fe f95b 	bl	80044a8 <HAL_GetTick>
 80061f2:	1bc0      	subs	r0, r0, r7
 80061f4:	4540      	cmp	r0, r8
 80061f6:	d9f7      	bls.n	80061e8 <HAL_RCC_OscConfig+0x24c>
 80061f8:	e715      	b.n	8006026 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061fa:	2b05      	cmp	r3, #5
 80061fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80061fe:	d103      	bne.n	8006208 <HAL_RCC_OscConfig+0x26c>
 8006200:	f043 0304 	orr.w	r3, r3, #4
 8006204:	672b      	str	r3, [r5, #112]	; 0x70
 8006206:	e7b9      	b.n	800617c <HAL_RCC_OscConfig+0x1e0>
 8006208:	f023 0301 	bic.w	r3, r3, #1
 800620c:	672b      	str	r3, [r5, #112]	; 0x70
 800620e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006210:	f023 0304 	bic.w	r3, r3, #4
 8006214:	e7b5      	b.n	8006182 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006216:	f7fe f947 	bl	80044a8 <HAL_GetTick>
 800621a:	eba0 0008 	sub.w	r0, r0, r8
 800621e:	42a8      	cmp	r0, r5
 8006220:	d9b6      	bls.n	8006190 <HAL_RCC_OscConfig+0x1f4>
 8006222:	e700      	b.n	8006026 <HAL_RCC_OscConfig+0x8a>
 8006224:	40023800 	.word	0x40023800
 8006228:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800622c:	4d38      	ldr	r5, [pc, #224]	; (8006310 <HAL_RCC_OscConfig+0x374>)
 800622e:	68ab      	ldr	r3, [r5, #8]
 8006230:	f003 030c 	and.w	r3, r3, #12
 8006234:	2b08      	cmp	r3, #8
 8006236:	d041      	beq.n	80062bc <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 8006238:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800623a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800623c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006240:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006242:	d12e      	bne.n	80062a2 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8006244:	f7fe f930 	bl	80044a8 <HAL_GetTick>
 8006248:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624a:	682b      	ldr	r3, [r5, #0]
 800624c:	0199      	lsls	r1, r3, #6
 800624e:	d422      	bmi.n	8006296 <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006250:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8006254:	4313      	orrs	r3, r2
 8006256:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006258:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800625c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006260:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006262:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006266:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006268:	4c29      	ldr	r4, [pc, #164]	; (8006310 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800626a:	0852      	lsrs	r2, r2, #1
 800626c:	3a01      	subs	r2, #1
 800626e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006272:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800627a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800627c:	f7fe f914 	bl	80044a8 <HAL_GetTick>
 8006280:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	019a      	lsls	r2, r3, #6
 8006286:	f53f aea1 	bmi.w	8005fcc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800628a:	f7fe f90d 	bl	80044a8 <HAL_GetTick>
 800628e:	1b40      	subs	r0, r0, r5
 8006290:	2802      	cmp	r0, #2
 8006292:	d9f6      	bls.n	8006282 <HAL_RCC_OscConfig+0x2e6>
 8006294:	e6c7      	b.n	8006026 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006296:	f7fe f907 	bl	80044a8 <HAL_GetTick>
 800629a:	1b80      	subs	r0, r0, r6
 800629c:	2802      	cmp	r0, #2
 800629e:	d9d4      	bls.n	800624a <HAL_RCC_OscConfig+0x2ae>
 80062a0:	e6c1      	b.n	8006026 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80062a2:	f7fe f901 	bl	80044a8 <HAL_GetTick>
 80062a6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	019b      	lsls	r3, r3, #6
 80062ac:	f57f ae8e 	bpl.w	8005fcc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b0:	f7fe f8fa 	bl	80044a8 <HAL_GetTick>
 80062b4:	1b00      	subs	r0, r0, r4
 80062b6:	2802      	cmp	r0, #2
 80062b8:	d9f6      	bls.n	80062a8 <HAL_RCC_OscConfig+0x30c>
 80062ba:	e6b4      	b.n	8006026 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062bc:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 80062be:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c0:	f43f aeb2 	beq.w	8006028 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c8:	69e1      	ldr	r1, [r4, #28]
 80062ca:	428a      	cmp	r2, r1
 80062cc:	f47f ae6a 	bne.w	8005fa4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d4:	6a21      	ldr	r1, [r4, #32]
 80062d6:	428a      	cmp	r2, r1
 80062d8:	f47f ae64 	bne.w	8005fa4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062dc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062e2:	401a      	ands	r2, r3
 80062e4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80062e8:	f47f ae5c 	bne.w	8005fa4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80062ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80062ee:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80062f2:	0852      	lsrs	r2, r2, #1
 80062f4:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062f6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80062fa:	f47f ae53 	bne.w	8005fa4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006300:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006304:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8006308:	bf14      	ite	ne
 800630a:	2001      	movne	r0, #1
 800630c:	2000      	moveq	r0, #0
 800630e:	e68b      	b.n	8006028 <HAL_RCC_OscConfig+0x8c>
 8006310:	40023800 	.word	0x40023800

08006314 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006314:	4913      	ldr	r1, [pc, #76]	; (8006364 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8006316:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006318:	688b      	ldr	r3, [r1, #8]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b04      	cmp	r3, #4
 8006320:	d003      	beq.n	800632a <HAL_RCC_GetSysClockFreq+0x16>
 8006322:	2b08      	cmp	r3, #8
 8006324:	d003      	beq.n	800632e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006326:	4810      	ldr	r0, [pc, #64]	; (8006368 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8006328:	e000      	b.n	800632c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800632a:	4810      	ldr	r0, [pc, #64]	; (800636c <HAL_RCC_GetSysClockFreq+0x58>)
}
 800632c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800632e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006330:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006332:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006334:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006338:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800633c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006340:	bf1a      	itte	ne
 8006342:	480a      	ldrne	r0, [pc, #40]	; (800636c <HAL_RCC_GetSysClockFreq+0x58>)
 8006344:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006346:	4808      	ldreq	r0, [pc, #32]	; (8006368 <HAL_RCC_GetSysClockFreq+0x54>)
 8006348:	fba1 0100 	umull	r0, r1, r1, r0
 800634c:	f7f9 ffb8 	bl	80002c0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006350:	4b04      	ldr	r3, [pc, #16]	; (8006364 <HAL_RCC_GetSysClockFreq+0x50>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006358:	3301      	adds	r3, #1
 800635a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800635c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006360:	e7e4      	b.n	800632c <HAL_RCC_GetSysClockFreq+0x18>
 8006362:	bf00      	nop
 8006364:	40023800 	.word	0x40023800
 8006368:	00f42400 	.word	0x00f42400
 800636c:	017d7840 	.word	0x017d7840

08006370 <HAL_RCC_ClockConfig>:
{
 8006370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006374:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006376:	4604      	mov	r4, r0
 8006378:	b910      	cbnz	r0, 8006380 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800637a:	2001      	movs	r0, #1
}
 800637c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006380:	4a45      	ldr	r2, [pc, #276]	; (8006498 <HAL_RCC_ClockConfig+0x128>)
 8006382:	6813      	ldr	r3, [r2, #0]
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	428b      	cmp	r3, r1
 800638a:	d328      	bcc.n	80063de <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800638c:	6821      	ldr	r1, [r4, #0]
 800638e:	078f      	lsls	r7, r1, #30
 8006390:	d430      	bmi.n	80063f4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006392:	07c8      	lsls	r0, r1, #31
 8006394:	d443      	bmi.n	800641e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006396:	4a40      	ldr	r2, [pc, #256]	; (8006498 <HAL_RCC_ClockConfig+0x128>)
 8006398:	6813      	ldr	r3, [r2, #0]
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	42ab      	cmp	r3, r5
 80063a0:	d866      	bhi.n	8006470 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a2:	6822      	ldr	r2, [r4, #0]
 80063a4:	0751      	lsls	r1, r2, #29
 80063a6:	d46f      	bmi.n	8006488 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063a8:	0713      	lsls	r3, r2, #28
 80063aa:	d507      	bpl.n	80063bc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063ac:	4a3b      	ldr	r2, [pc, #236]	; (800649c <HAL_RCC_ClockConfig+0x12c>)
 80063ae:	6921      	ldr	r1, [r4, #16]
 80063b0:	6893      	ldr	r3, [r2, #8]
 80063b2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80063b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80063ba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063bc:	f7ff ffaa 	bl	8006314 <HAL_RCC_GetSysClockFreq>
 80063c0:	4b36      	ldr	r3, [pc, #216]	; (800649c <HAL_RCC_ClockConfig+0x12c>)
 80063c2:	4a37      	ldr	r2, [pc, #220]	; (80064a0 <HAL_RCC_ClockConfig+0x130>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80063ca:	5cd3      	ldrb	r3, [r2, r3]
 80063cc:	40d8      	lsrs	r0, r3
 80063ce:	4b35      	ldr	r3, [pc, #212]	; (80064a4 <HAL_RCC_ClockConfig+0x134>)
 80063d0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80063d2:	4b35      	ldr	r3, [pc, #212]	; (80064a8 <HAL_RCC_ClockConfig+0x138>)
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	f7fe f827 	bl	8004428 <HAL_InitTick>
  return HAL_OK;
 80063da:	2000      	movs	r0, #0
 80063dc:	e7ce      	b.n	800637c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063de:	6813      	ldr	r3, [r2, #0]
 80063e0:	f023 030f 	bic.w	r3, r3, #15
 80063e4:	430b      	orrs	r3, r1
 80063e6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e8:	6813      	ldr	r3, [r2, #0]
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	428b      	cmp	r3, r1
 80063f0:	d1c3      	bne.n	800637a <HAL_RCC_ClockConfig+0xa>
 80063f2:	e7cb      	b.n	800638c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f4:	f011 0f04 	tst.w	r1, #4
 80063f8:	4b28      	ldr	r3, [pc, #160]	; (800649c <HAL_RCC_ClockConfig+0x12c>)
 80063fa:	d003      	beq.n	8006404 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8006402:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006404:	070e      	lsls	r6, r1, #28
 8006406:	d503      	bpl.n	8006410 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800640e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	68a0      	ldr	r0, [r4, #8]
 8006414:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006418:	4302      	orrs	r2, r0
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	e7b9      	b.n	8006392 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800641e:	6861      	ldr	r1, [r4, #4]
 8006420:	4b1e      	ldr	r3, [pc, #120]	; (800649c <HAL_RCC_ClockConfig+0x12c>)
 8006422:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006424:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006426:	d11b      	bne.n	8006460 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006428:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642c:	d0a5      	beq.n	800637a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800642e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006430:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006434:	4e19      	ldr	r6, [pc, #100]	; (800649c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006436:	f022 0203 	bic.w	r2, r2, #3
 800643a:	430a      	orrs	r2, r1
 800643c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800643e:	f7fe f833 	bl	80044a8 <HAL_GetTick>
 8006442:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006444:	68b3      	ldr	r3, [r6, #8]
 8006446:	6862      	ldr	r2, [r4, #4]
 8006448:	f003 030c 	and.w	r3, r3, #12
 800644c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006450:	d0a1      	beq.n	8006396 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006452:	f7fe f829 	bl	80044a8 <HAL_GetTick>
 8006456:	1bc0      	subs	r0, r0, r7
 8006458:	4540      	cmp	r0, r8
 800645a:	d9f3      	bls.n	8006444 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800645c:	2003      	movs	r0, #3
 800645e:	e78d      	b.n	800637c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006460:	2902      	cmp	r1, #2
 8006462:	d102      	bne.n	800646a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006464:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006468:	e7e0      	b.n	800642c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800646a:	f012 0f02 	tst.w	r2, #2
 800646e:	e7dd      	b.n	800642c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006470:	6813      	ldr	r3, [r2, #0]
 8006472:	f023 030f 	bic.w	r3, r3, #15
 8006476:	432b      	orrs	r3, r5
 8006478:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800647a:	6813      	ldr	r3, [r2, #0]
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	42ab      	cmp	r3, r5
 8006482:	f47f af7a 	bne.w	800637a <HAL_RCC_ClockConfig+0xa>
 8006486:	e78c      	b.n	80063a2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006488:	4904      	ldr	r1, [pc, #16]	; (800649c <HAL_RCC_ClockConfig+0x12c>)
 800648a:	68e0      	ldr	r0, [r4, #12]
 800648c:	688b      	ldr	r3, [r1, #8]
 800648e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006492:	4303      	orrs	r3, r0
 8006494:	608b      	str	r3, [r1, #8]
 8006496:	e787      	b.n	80063a8 <HAL_RCC_ClockConfig+0x38>
 8006498:	40023c00 	.word	0x40023c00
 800649c:	40023800 	.word	0x40023800
 80064a0:	08010d99 	.word	0x08010d99
 80064a4:	200000b8 	.word	0x200000b8
 80064a8:	200000c0 	.word	0x200000c0

080064ac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064ac:	4b04      	ldr	r3, [pc, #16]	; (80064c0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80064ae:	4a05      	ldr	r2, [pc, #20]	; (80064c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80064b6:	5cd3      	ldrb	r3, [r2, r3]
 80064b8:	4a03      	ldr	r2, [pc, #12]	; (80064c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80064ba:	6810      	ldr	r0, [r2, #0]
}
 80064bc:	40d8      	lsrs	r0, r3
 80064be:	4770      	bx	lr
 80064c0:	40023800 	.word	0x40023800
 80064c4:	08010da9 	.word	0x08010da9
 80064c8:	200000b8 	.word	0x200000b8

080064cc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80064ce:	4a05      	ldr	r2, [pc, #20]	; (80064e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80064d6:	5cd3      	ldrb	r3, [r2, r3]
 80064d8:	4a03      	ldr	r2, [pc, #12]	; (80064e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80064da:	6810      	ldr	r0, [r2, #0]
}
 80064dc:	40d8      	lsrs	r0, r3
 80064de:	4770      	bx	lr
 80064e0:	40023800 	.word	0x40023800
 80064e4:	08010da9 	.word	0x08010da9
 80064e8:	200000b8 	.word	0x200000b8

080064ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064f0:	6802      	ldr	r2, [r0, #0]
{
 80064f2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064f4:	f012 0601 	ands.w	r6, r2, #1
 80064f8:	d00b      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064fa:	4bb8      	ldr	r3, [pc, #736]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80064fc:	6899      	ldr	r1, [r3, #8]
 80064fe:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8006502:	6099      	str	r1, [r3, #8]
 8006504:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8006506:	6899      	ldr	r1, [r3, #8]
 8006508:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800650a:	fab6 f686 	clz	r6, r6
 800650e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006510:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006512:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8006516:	d012      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006518:	49b0      	ldr	r1, [pc, #704]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800651a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800651c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006520:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006524:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8006528:	bf08      	it	eq
 800652a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800652c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006530:	bf16      	itet	ne
 8006532:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8006536:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006538:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800653a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800653e:	02d1      	lsls	r1, r2, #11
 8006540:	d510      	bpl.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006542:	48a6      	ldr	r0, [pc, #664]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006544:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006546:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800654a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800654e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006552:	ea43 0301 	orr.w	r3, r3, r1
 8006556:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800655a:	f000 8185 	beq.w	8006868 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800655e:	2900      	cmp	r1, #0
 8006560:	bf08      	it	eq
 8006562:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8006564:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8006568:	bf18      	it	ne
 800656a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800656c:	0692      	lsls	r2, r2, #26
 800656e:	d531      	bpl.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006570:	4b9a      	ldr	r3, [pc, #616]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006572:	4f9b      	ldr	r7, [pc, #620]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006576:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800657a:	641a      	str	r2, [r3, #64]	; 0x40
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800658e:	f7fd ff8b 	bl	80044a8 <HAL_GetTick>
 8006592:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	05db      	lsls	r3, r3, #23
 8006598:	f140 8168 	bpl.w	800686c <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800659c:	4f8f      	ldr	r7, [pc, #572]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800659e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80065a4:	f040 816d 	bne.w	8006882 <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065aa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80065ae:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80065b2:	4a8a      	ldr	r2, [pc, #552]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065b4:	f040 818b 	bne.w	80068ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80065b8:	6891      	ldr	r1, [r2, #8]
 80065ba:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80065be:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80065c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80065c6:	4301      	orrs	r1, r0
 80065c8:	6091      	str	r1, [r2, #8]
 80065ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ce:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	06da      	lsls	r2, r3, #27
 80065d8:	d50c      	bpl.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065da:	4a80      	ldr	r2, [pc, #512]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065dc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80065e0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80065e4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80065e8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80065ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80065ee:	4301      	orrs	r1, r0
 80065f0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065f4:	045f      	lsls	r7, r3, #17
 80065f6:	d508      	bpl.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065f8:	4978      	ldr	r1, [pc, #480]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065fa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80065fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006600:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006604:	4302      	orrs	r2, r0
 8006606:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800660a:	0418      	lsls	r0, r3, #16
 800660c:	d508      	bpl.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800660e:	4973      	ldr	r1, [pc, #460]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006610:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006612:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006616:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800661a:	4302      	orrs	r2, r0
 800661c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006620:	03d9      	lsls	r1, r3, #15
 8006622:	d508      	bpl.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006624:	496d      	ldr	r1, [pc, #436]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006626:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006628:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800662c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006630:	4302      	orrs	r2, r0
 8006632:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006636:	039a      	lsls	r2, r3, #14
 8006638:	d508      	bpl.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800663a:	4968      	ldr	r1, [pc, #416]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800663c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800663e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006642:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006646:	4302      	orrs	r2, r0
 8006648:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800664c:	065f      	lsls	r7, r3, #25
 800664e:	d508      	bpl.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006650:	4962      	ldr	r1, [pc, #392]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006652:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006654:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006658:	f022 0203 	bic.w	r2, r2, #3
 800665c:	4302      	orrs	r2, r0
 800665e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006662:	0618      	lsls	r0, r3, #24
 8006664:	d508      	bpl.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006666:	495d      	ldr	r1, [pc, #372]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006668:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800666a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800666e:	f022 020c 	bic.w	r2, r2, #12
 8006672:	4302      	orrs	r2, r0
 8006674:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006678:	05d9      	lsls	r1, r3, #23
 800667a:	d508      	bpl.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800667c:	4957      	ldr	r1, [pc, #348]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800667e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006680:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006684:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006688:	4302      	orrs	r2, r0
 800668a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800668e:	059a      	lsls	r2, r3, #22
 8006690:	d508      	bpl.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006692:	4952      	ldr	r1, [pc, #328]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006694:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006696:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800669a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800669e:	4302      	orrs	r2, r0
 80066a0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066a4:	055f      	lsls	r7, r3, #21
 80066a6:	d508      	bpl.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066a8:	494c      	ldr	r1, [pc, #304]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80066b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80066b4:	4302      	orrs	r2, r0
 80066b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80066ba:	0518      	lsls	r0, r3, #20
 80066bc:	d508      	bpl.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80066be:	4947      	ldr	r1, [pc, #284]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80066c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066ca:	4302      	orrs	r2, r0
 80066cc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80066d0:	04d9      	lsls	r1, r3, #19
 80066d2:	d508      	bpl.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80066d4:	4941      	ldr	r1, [pc, #260]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066d6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80066d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80066dc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80066e0:	4302      	orrs	r2, r0
 80066e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80066e6:	049a      	lsls	r2, r3, #18
 80066e8:	d508      	bpl.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80066ea:	493c      	ldr	r1, [pc, #240]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066ec:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80066ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80066f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80066f6:	4302      	orrs	r2, r0
 80066f8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066fc:	025f      	lsls	r7, r3, #9
 80066fe:	d508      	bpl.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006700:	4936      	ldr	r1, [pc, #216]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006702:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006704:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006708:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800670c:	4302      	orrs	r2, r0
 800670e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006712:	0298      	lsls	r0, r3, #10
 8006714:	d50c      	bpl.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006716:	4831      	ldr	r0, [pc, #196]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006718:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800671a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800671e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006722:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8006726:	bf08      	it	eq
 8006728:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800672a:	430a      	orrs	r2, r1
 800672c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8006730:	f013 0f08 	tst.w	r3, #8
 8006734:	bf18      	it	ne
 8006736:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006738:	0359      	lsls	r1, r3, #13
 800673a:	d508      	bpl.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800673c:	4927      	ldr	r1, [pc, #156]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800673e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006740:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006744:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006748:	4302      	orrs	r2, r0
 800674a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800674e:	021a      	lsls	r2, r3, #8
 8006750:	d509      	bpl.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006752:	4922      	ldr	r1, [pc, #136]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006754:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006758:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800675c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006760:	4302      	orrs	r2, r0
 8006762:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006766:	2e01      	cmp	r6, #1
 8006768:	f000 80b5 	beq.w	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800676c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006770:	f000 80b1 	beq.w	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006774:	2d01      	cmp	r5, #1
 8006776:	d175      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006778:	4d18      	ldr	r5, [pc, #96]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800677a:	682b      	ldr	r3, [r5, #0]
 800677c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006780:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006782:	f7fd fe91 	bl	80044a8 <HAL_GetTick>
 8006786:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	009f      	lsls	r7, r3, #2
 800678c:	f100 8127 	bmi.w	80069de <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006790:	6821      	ldr	r1, [r4, #0]
 8006792:	030e      	lsls	r6, r1, #12
 8006794:	d501      	bpl.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8006796:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006798:	b11b      	cbz	r3, 80067a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800679a:	02cd      	lsls	r5, r1, #11
 800679c:	d522      	bpl.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800679e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067a0:	bb03      	cbnz	r3, 80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067a2:	4a0e      	ldr	r2, [pc, #56]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067a8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067b0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80067b4:	4303      	orrs	r3, r0
 80067b6:	6960      	ldr	r0, [r4, #20]
 80067b8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80067bc:	69a0      	ldr	r0, [r4, #24]
 80067be:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80067c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067c6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80067ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80067cc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80067d0:	3801      	subs	r0, #1
 80067d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80067d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80067da:	e003      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80067dc:	40023800 	.word	0x40023800
 80067e0:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067e4:	0288      	lsls	r0, r1, #10
 80067e6:	d515      	bpl.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80067e8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80067ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ee:	d111      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067f0:	4a82      	ldr	r2, [pc, #520]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80067f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067f6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067fa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80067fe:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006802:	4303      	orrs	r3, r0
 8006804:	6960      	ldr	r0, [r4, #20]
 8006806:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800680a:	6a20      	ldr	r0, [r4, #32]
 800680c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006814:	070a      	lsls	r2, r1, #28
 8006816:	d519      	bpl.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006818:	4978      	ldr	r1, [pc, #480]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800681a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800681e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006822:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8006826:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800682a:	4313      	orrs	r3, r2
 800682c:	6962      	ldr	r2, [r4, #20]
 800682e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006832:	69e2      	ldr	r2, [r4, #28]
 8006834:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800683c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8006840:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006842:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800684c:	4c6b      	ldr	r4, [pc, #428]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006854:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006856:	f7fd fe27 	bl	80044a8 <HAL_GetTick>
 800685a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	f140 80c4 	bpl.w	80069ec <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006864:	2000      	movs	r0, #0
 8006866:	e009      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 8006868:	2601      	movs	r6, #1
 800686a:	e67b      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686c:	f7fd fe1c 	bl	80044a8 <HAL_GetTick>
 8006870:	eba0 0008 	sub.w	r0, r0, r8
 8006874:	2864      	cmp	r0, #100	; 0x64
 8006876:	f67f ae8d 	bls.w	8006594 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800687a:	2003      	movs	r0, #3
}
 800687c:	b003      	add	sp, #12
 800687e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006882:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006884:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006888:	429a      	cmp	r2, r3
 800688a:	f43f ae8d 	beq.w	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800688e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006890:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006896:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800689a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800689c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800689e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80068a2:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80068a4:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068a8:	07d8      	lsls	r0, r3, #31
 80068aa:	f57f ae7d 	bpl.w	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80068ae:	f7fd fdfb 	bl	80044a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068b2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80068b6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068ba:	0799      	lsls	r1, r3, #30
 80068bc:	f53f ae74 	bmi.w	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068c0:	f7fd fdf2 	bl	80044a8 <HAL_GetTick>
 80068c4:	eba0 0008 	sub.w	r0, r0, r8
 80068c8:	4548      	cmp	r0, r9
 80068ca:	d9f5      	bls.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80068cc:	e7d5      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068ce:	6891      	ldr	r1, [r2, #8]
 80068d0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80068d4:	e678      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80068d6:	4e49      	ldr	r6, [pc, #292]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80068d8:	6833      	ldr	r3, [r6, #0]
 80068da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068de:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80068e0:	f7fd fde2 	bl	80044a8 <HAL_GetTick>
 80068e4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068e6:	6833      	ldr	r3, [r6, #0]
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	d472      	bmi.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80068ec:	6822      	ldr	r2, [r4, #0]
 80068ee:	07d7      	lsls	r7, r2, #31
 80068f0:	d512      	bpl.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80068f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068f4:	b983      	cbnz	r3, 8006918 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80068f6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80068fa:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80068fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006902:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006906:	430b      	orrs	r3, r1
 8006908:	6861      	ldr	r1, [r4, #4]
 800690a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800690e:	68a1      	ldr	r1, [r4, #8]
 8006910:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006914:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006918:	0316      	lsls	r6, r2, #12
 800691a:	d503      	bpl.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800691c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800691e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006922:	d005      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8006924:	02d0      	lsls	r0, r2, #11
 8006926:	d51e      	bpl.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800692a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800692e:	d11a      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006930:	4932      	ldr	r1, [pc, #200]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006932:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006936:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800693a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800693e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006942:	4303      	orrs	r3, r0
 8006944:	6860      	ldr	r0, [r4, #4]
 8006946:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800694a:	68e0      	ldr	r0, [r4, #12]
 800694c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006950:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006954:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8006958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800695a:	f020 001f 	bic.w	r0, r0, #31
 800695e:	3b01      	subs	r3, #1
 8006960:	4303      	orrs	r3, r0
 8006962:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006966:	01d1      	lsls	r1, r2, #7
 8006968:	d511      	bpl.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800696a:	4924      	ldr	r1, [pc, #144]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800696c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006970:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006974:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006978:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800697c:	4303      	orrs	r3, r0
 800697e:	6860      	ldr	r0, [r4, #4]
 8006980:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006984:	6920      	ldr	r0, [r4, #16]
 8006986:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800698a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800698e:	0192      	lsls	r2, r2, #6
 8006990:	d50d      	bpl.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006992:	6923      	ldr	r3, [r4, #16]
 8006994:	6862      	ldr	r2, [r4, #4]
 8006996:	041b      	lsls	r3, r3, #16
 8006998:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800699c:	68e2      	ldr	r2, [r4, #12]
 800699e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80069a2:	68a2      	ldr	r2, [r4, #8]
 80069a4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80069a8:	4a14      	ldr	r2, [pc, #80]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80069aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80069ae:	4e13      	ldr	r6, [pc, #76]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80069b0:	6833      	ldr	r3, [r6, #0]
 80069b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069b6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80069b8:	f7fd fd76 	bl	80044a8 <HAL_GetTick>
 80069bc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069be:	6833      	ldr	r3, [r6, #0]
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	f53f aed7 	bmi.w	8006774 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069c6:	f7fd fd6f 	bl	80044a8 <HAL_GetTick>
 80069ca:	1bc0      	subs	r0, r0, r7
 80069cc:	2864      	cmp	r0, #100	; 0x64
 80069ce:	d9f6      	bls.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80069d0:	e753      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069d2:	f7fd fd69 	bl	80044a8 <HAL_GetTick>
 80069d6:	1bc0      	subs	r0, r0, r7
 80069d8:	2864      	cmp	r0, #100	; 0x64
 80069da:	d984      	bls.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80069dc:	e74d      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80069de:	f7fd fd63 	bl	80044a8 <HAL_GetTick>
 80069e2:	1b80      	subs	r0, r0, r6
 80069e4:	2864      	cmp	r0, #100	; 0x64
 80069e6:	f67f aecf 	bls.w	8006788 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80069ea:	e746      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80069ec:	f7fd fd5c 	bl	80044a8 <HAL_GetTick>
 80069f0:	1b40      	subs	r0, r0, r5
 80069f2:	2864      	cmp	r0, #100	; 0x64
 80069f4:	f67f af32 	bls.w	800685c <HAL_RCCEx_PeriphCLKConfig+0x370>
 80069f8:	e73f      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80069fa:	bf00      	nop
 80069fc:	40023800 	.word	0x40023800

08006a00 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8006a00:	4b54      	ldr	r3, [pc, #336]	; (8006b54 <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
 8006a02:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006a04:	4b54      	ldr	r3, [pc, #336]	; (8006b58 <HAL_RCCEx_GetPeriphCLKConfig+0x158>)
 8006a06:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006a0a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8006a0e:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a10:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006a14:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8006a18:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006a1e:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8006a22:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a24:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006a28:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8006a2c:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8006a2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a32:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8006a36:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006a38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a3c:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8006a40:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006a42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a46:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8006a4a:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a50:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8006a54:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8006a56:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a5a:	f002 021f 	and.w	r2, r2, #31
 8006a5e:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8006a60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a64:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8006a68:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8006a6a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a6e:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8006a72:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8006a74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a78:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8006a7c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8006a7e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a82:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8006a86:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8006a8e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8006a90:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a94:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8006a98:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8006a9a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a9e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8006aa2:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8006aa4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006aa8:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8006aac:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8006aae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006ab2:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8006ab6:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8006ab8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006abc:	f002 0203 	and.w	r2, r2, #3
 8006ac0:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8006ac2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006ac6:	f002 020c 	and.w	r2, r2, #12
 8006aca:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8006acc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006ad0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006ad4:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8006ad6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006ada:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8006ade:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8006ae0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006ae4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006ae8:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8006aea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006aee:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006af2:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8006af4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006af8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8006afc:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8006afe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006b02:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8006b06:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006b08:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006b0c:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8006b10:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8006b12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006b16:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8006b1a:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8006b1c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006b20:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006b24:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006b26:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006b2a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006b2e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006b32:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006b34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006b36:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006b3a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8006b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b46:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8006b4a:	bf18      	it	ne
 8006b4c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8006b50:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 8006b52:	4770      	bx	lr
 8006b54:	00fffff1 	.word	0x00fffff1
 8006b58:	40023800 	.word	0x40023800

08006b5c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006b5c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8006b60:	d124      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006b62:	4b2c      	ldr	r3, [pc, #176]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006b64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006b68:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8006b6c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006b70:	d045      	beq.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8006b72:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8006b76:	d04a      	beq.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
 8006b78:	b332      	cbz	r2, 8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
    default :
      {
        break;
      }
    }
  }
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006b7e:	4b26      	ldr	r3, [pc, #152]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006b80:	4a24      	ldr	r2, [pc, #144]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006b82:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006b86:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006b8a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8006b8e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8006b92:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006b94:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006b98:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006b9c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8006ba6:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8006baa:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006bac:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8006bb0:	d1e3      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
    saiclocksource = RCC->DCKCFGR1;
 8006bb2:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006bb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006bb8:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8006bbc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8006bc0:	d01d      	beq.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8006bc2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006bc6:	e7d6      	b.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006bc8:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006bca:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006bcc:	0252      	lsls	r2, r2, #9
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006bce:	4a11      	ldr	r2, [pc, #68]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006bd0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006bd4:	bf54      	ite	pl
 8006bd6:	4b11      	ldrpl	r3, [pc, #68]	; (8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006bd8:	4b0f      	ldrmi	r3, [pc, #60]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006bda:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006bde:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006be2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8006be6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8006bea:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006bec:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006bf0:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006bf4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006bf8:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8006bfc:	e7d2      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006bfe:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c00:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006c02:	0253      	lsls	r3, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c04:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006c08:	d4b9      	bmi.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c0a:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8006c0c:	e7b8      	b.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c0e:	4804      	ldr	r0, [pc, #16]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)

  return frequency;
}
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40023800 	.word	0x40023800
 8006c18:	017d7840 	.word	0x017d7840
 8006c1c:	00f42400 	.word	0x00f42400
 8006c20:	00bb8000 	.word	0x00bb8000

08006c24 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
 8006c24:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006c26:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006c28:	6842      	ldr	r2, [r0, #4]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006c2a:	bf0c      	ite	eq
 8006c2c:	2309      	moveq	r3, #9
 8006c2e:	2301      	movne	r3, #1
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006c30:	2908      	cmp	r1, #8
 8006c32:	d105      	bne.n	8006c40 <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006c34:	f022 0102 	bic.w	r1, r2, #2
 8006c38:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
 8006c3a:	bf08      	it	eq
 8006c3c:	f043 0310 	orreq.w	r3, r3, #16
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006c40:	3a02      	subs	r2, #2
 8006c42:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006c44:	bf94      	ite	ls
 8006c46:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8006c4a:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 8006c4e:	4770      	bx	lr

08006c50 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006c50:	4b0e      	ldr	r3, [pc, #56]	; (8006c8c <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006c52:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	f641 3358 	movw	r3, #7000	; 0x1b58
 8006c5a:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8006c5e:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006c60:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8006c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c66:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006c68:	f112 32ff 	adds.w	r2, r2, #4294967295
 8006c6c:	d207      	bcs.n	8006c7e <SAI_Disable+0x2e>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006c6e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8006c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c76:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006c7a:	2003      	movs	r0, #3
      break;
 8006c7c:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006c7e:	680b      	ldr	r3, [r1, #0]
 8006c80:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8006c84:	d1f0      	bne.n	8006c68 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006c86:	4618      	mov	r0, r3

  return status;
}
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	200000b8 	.word	0x200000b8

08006c90 <HAL_SAI_MspInit>:
}
 8006c90:	4770      	bx	lr
	...

08006c94 <HAL_SAI_Init>:
{
 8006c94:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 8006c96:	4604      	mov	r4, r0
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	f000 80c4 	beq.w	8006e26 <HAL_SAI_Init+0x192>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8006c9e:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8006ca2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006ca6:	b91b      	cbnz	r3, 8006cb0 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8006ca8:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8006cac:	f7ff fff0 	bl	8006c90 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8006cb0:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8006cb2:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8006cb4:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8006cb8:	f7ff ffca 	bl	8006c50 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8006cbc:	68e3      	ldr	r3, [r4, #12]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	f000 80a0 	beq.w	8006e04 <HAL_SAI_Init+0x170>
  uint32_t tmpregisterGCR = 0;
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	bf0c      	ite	eq
 8006cc8:	2320      	moveq	r3, #32
 8006cca:	2300      	movne	r3, #0
  switch(hsai->Init.Synchro)
 8006ccc:	68a2      	ldr	r2, [r4, #8]
 8006cce:	2a02      	cmp	r2, #2
 8006cd0:	f000 809c 	beq.w	8006e0c <HAL_SAI_Init+0x178>
 8006cd4:	2a03      	cmp	r2, #3
 8006cd6:	f000 8097 	beq.w	8006e08 <HAL_SAI_Init+0x174>
  uint32_t syncen_bits = 0;
 8006cda:	2a01      	cmp	r2, #1
 8006cdc:	bf0c      	ite	eq
 8006cde:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 8006ce2:	2500      	movne	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006ce4:	6822      	ldr	r2, [r4, #0]
 8006ce6:	4951      	ldr	r1, [pc, #324]	; (8006e2c <HAL_SAI_Init+0x198>)
 8006ce8:	428a      	cmp	r2, r1
 8006cea:	d003      	beq.n	8006cf4 <HAL_SAI_Init+0x60>
 8006cec:	4850      	ldr	r0, [pc, #320]	; (8006e30 <HAL_SAI_Init+0x19c>)
 8006cee:	4282      	cmp	r2, r0
 8006cf0:	f040 808f 	bne.w	8006e12 <HAL_SAI_Init+0x17e>
    SAI1->GCR = tmpregisterGCR;
 8006cf4:	484f      	ldr	r0, [pc, #316]	; (8006e34 <HAL_SAI_Init+0x1a0>)
    SAI2->GCR = tmpregisterGCR;
 8006cf6:	6003      	str	r3, [r0, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006cf8:	69e3      	ldr	r3, [r4, #28]
 8006cfa:	b313      	cbz	r3, 8006d42 <HAL_SAI_Init+0xae>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8006cfc:	428a      	cmp	r2, r1
 8006cfe:	d003      	beq.n	8006d08 <HAL_SAI_Init+0x74>
 8006d00:	4b4b      	ldr	r3, [pc, #300]	; (8006e30 <HAL_SAI_Init+0x19c>)
 8006d02:	429a      	cmp	r2, r3
 8006d04:	f040 8087 	bne.w	8006e16 <HAL_SAI_Init+0x182>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006d08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006d0c:	f7ff ff26 	bl	8006b5c <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	4a49      	ldr	r2, [pc, #292]	; (8006e38 <HAL_SAI_Init+0x1a4>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d002      	beq.n	8006d1e <HAL_SAI_Init+0x8a>
 8006d18:	3220      	adds	r2, #32
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d103      	bne.n	8006d26 <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006d1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006d22:	f7ff ff1b 	bl	8006b5c <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006d26:	220a      	movs	r2, #10
 8006d28:	69e3      	ldr	r3, [r4, #28]
 8006d2a:	4350      	muls	r0, r2
 8006d2c:	025b      	lsls	r3, r3, #9
 8006d2e:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8006d32:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 8006d36:	fb02 0013 	mls	r0, r2, r3, r0
 8006d3a:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 8006d3c:	bf08      	it	eq
 8006d3e:	3301      	addeq	r3, #1
 8006d40:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006d42:	6863      	ldr	r3, [r4, #4]
 8006d44:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006d46:	f033 0102 	bics.w	r1, r3, #2
 8006d4a:	d166      	bne.n	8006e1a <HAL_SAI_Init+0x186>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006d4c:	2a01      	cmp	r2, #1
 8006d4e:	bf18      	it	ne
 8006d50:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006d54:	6822      	ldr	r2, [r4, #0]
 8006d56:	4839      	ldr	r0, [pc, #228]	; (8006e3c <HAL_SAI_Init+0x1a8>)
 8006d58:	6816      	ldr	r6, [r2, #0]
 8006d5a:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d5c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8006d5e:	4333      	orrs	r3, r6
 8006d60:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006d62:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d64:	4333      	orrs	r3, r6
 8006d66:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006d68:	6810      	ldr	r0, [r2, #0]
 8006d6a:	4333      	orrs	r3, r6
 8006d6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d6e:	4333      	orrs	r3, r6
 8006d70:	6926      	ldr	r6, [r4, #16]
 8006d72:	4333      	orrs	r3, r6
 8006d74:	6966      	ldr	r6, [r4, #20]
 8006d76:	4333      	orrs	r3, r6
 8006d78:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006d7a:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d7c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006d80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d82:	432b      	orrs	r3, r5
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006d88:	6853      	ldr	r3, [r2, #4]
 8006d8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006d8e:	f023 030f 	bic.w	r3, r3, #15
 8006d92:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006d94:	69a3      	ldr	r3, [r4, #24]
 8006d96:	6851      	ldr	r1, [r2, #4]
 8006d98:	4303      	orrs	r3, r0
 8006d9a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006d9c:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006d9e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006da0:	430b      	orrs	r3, r1
 8006da2:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006da4:	4b26      	ldr	r3, [pc, #152]	; (8006e40 <HAL_SAI_Init+0x1ac>)
 8006da6:	6891      	ldr	r1, [r2, #8]
 8006da8:	400b      	ands	r3, r1
 8006daa:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006dac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006dae:	6891      	ldr	r1, [r2, #8]
 8006db0:	4303      	orrs	r3, r0
 8006db2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006db4:	4303      	orrs	r3, r0
 8006db6:	430b      	orrs	r3, r1
 8006db8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006dba:	3901      	subs	r1, #1
 8006dbc:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006dbe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006dc0:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006dc2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006dc6:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006dc8:	68d3      	ldr	r3, [r2, #12]
 8006dca:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8006dce:	f023 030f 	bic.w	r3, r3, #15
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	0c1b      	lsrs	r3, r3, #16
 8006dd6:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006dd8:	68d1      	ldr	r1, [r2, #12]
 8006dda:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 8006dde:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006de0:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006de2:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006de4:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006dea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006dec:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006dee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006df2:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8006df4:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006df6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8006dfa:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8006dfe:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 8006e02:	bd70      	pop	{r4, r5, r6, pc}
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006e04:	2310      	movs	r3, #16
 8006e06:	e761      	b.n	8006ccc <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006e08:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006e0c:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8006e10:	e768      	b.n	8006ce4 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 8006e12:	480c      	ldr	r0, [pc, #48]	; (8006e44 <HAL_SAI_Init+0x1b0>)
 8006e14:	e76f      	b.n	8006cf6 <HAL_SAI_Init+0x62>
    uint32_t freq = 0;
 8006e16:	2000      	movs	r0, #0
 8006e18:	e77a      	b.n	8006d10 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006e1a:	2a01      	cmp	r2, #1
 8006e1c:	bf14      	ite	ne
 8006e1e:	2100      	movne	r1, #0
 8006e20:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8006e24:	e796      	b.n	8006d54 <HAL_SAI_Init+0xc0>
    return HAL_ERROR;
 8006e26:	2001      	movs	r0, #1
 8006e28:	e7eb      	b.n	8006e02 <HAL_SAI_Init+0x16e>
 8006e2a:	bf00      	nop
 8006e2c:	40015804 	.word	0x40015804
 8006e30:	40015824 	.word	0x40015824
 8006e34:	40015800 	.word	0x40015800
 8006e38:	40015c04 	.word	0x40015c04
 8006e3c:	ff05c010 	.word	0xff05c010
 8006e40:	fff88000 	.word	0xfff88000
 8006e44:	40015c00 	.word	0x40015c00

08006e48 <HAL_SAI_MspDeInit>:
 8006e48:	4770      	bx	lr

08006e4a <HAL_SAI_DeInit>:
{
 8006e4a:	b538      	push	{r3, r4, r5, lr}
  if(hsai == NULL)
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	b1d0      	cbz	r0, 8006e86 <HAL_SAI_DeInit+0x3c>
  hsai->State = HAL_SAI_STATE_BUSY;
 8006e50:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
 8006e52:	2400      	movs	r4, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006e54:	f04f 32ff 	mov.w	r2, #4294967295
  hsai->State = HAL_SAI_STATE_BUSY;
 8006e58:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 8006e5c:	6803      	ldr	r3, [r0, #0]
 8006e5e:	611c      	str	r4, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006e60:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 8006e62:	f7ff fef5 	bl	8006c50 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006e66:	682a      	ldr	r2, [r5, #0]
  HAL_SAI_MspDeInit(hsai);
 8006e68:	4628      	mov	r0, r5
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006e6a:	6853      	ldr	r3, [r2, #4]
 8006e6c:	f043 0308 	orr.w	r3, r3, #8
 8006e70:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 8006e72:	f7ff ffe9 	bl	8006e48 <HAL_SAI_MspDeInit>
  return HAL_OK;
 8006e76:	4620      	mov	r0, r4
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006e78:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8006e7c:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
 8006e80:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d
}
 8006e84:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006e86:	2001      	movs	r0, #1
 8006e88:	e7fc      	b.n	8006e84 <HAL_SAI_DeInit+0x3a>

08006e8a <HAL_SAI_DMAPause>:
  __HAL_LOCK(hsai);
 8006e8a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d009      	beq.n	8006ea6 <HAL_SAI_DMAPause+0x1c>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006e92:	6802      	ldr	r2, [r0, #0]
 8006e94:	6813      	ldr	r3, [r2, #0]
 8006e96:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e9a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hsai);
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	4770      	bx	lr
  __HAL_LOCK(hsai);
 8006ea6:	2002      	movs	r0, #2
}
 8006ea8:	4770      	bx	lr

08006eaa <HAL_SAI_DMAResume>:
  __HAL_LOCK(hsai);
 8006eaa:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d013      	beq.n	8006eda <HAL_SAI_DMAResume+0x30>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006eb8:	6803      	ldr	r3, [r0, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006ec0:	601a      	str	r2, [r3, #0]
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	03d2      	lsls	r2, r2, #15
 8006ec6:	d403      	bmi.n	8006ed0 <HAL_SAI_DMAResume+0x26>
    __HAL_SAI_ENABLE(hsai);
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006ece:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hsai);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	4770      	bx	lr
  __HAL_LOCK(hsai);
 8006eda:	2002      	movs	r0, #2
}
 8006edc:	4770      	bx	lr

08006ede <HAL_SAI_DMAStop>:
{
 8006ede:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 8006ee0:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 8006ee4:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d041      	beq.n	8006f6e <HAL_SAI_DMAStop+0x90>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006eea:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
 8006eec:	2501      	movs	r5, #1
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006eee:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hsai);
 8006ef0:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006ef4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8006ef8:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006efa:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8006efc:	bb20      	cbnz	r0, 8006f48 <HAL_SAI_DMAStop+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8006efe:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8006f00:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006f02:	b188      	cbz	r0, 8006f28 <HAL_SAI_DMAStop+0x4a>
 8006f04:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8006f08:	2b22      	cmp	r3, #34	; 0x22
 8006f0a:	d10d      	bne.n	8006f28 <HAL_SAI_DMAStop+0x4a>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8006f0c:	f7fd fc47 	bl	800479e <HAL_DMA_Abort>
 8006f10:	b150      	cbz	r0, 8006f28 <HAL_SAI_DMAStop+0x4a>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8006f12:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f16:	2b80      	cmp	r3, #128	; 0x80
 8006f18:	d006      	beq.n	8006f28 <HAL_SAI_DMAStop+0x4a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006f1a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 8006f1e:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f24:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  SAI_Disable(hsai);
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f7ff fe91 	bl	8006c50 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006f2e:	6822      	ldr	r2, [r4, #0]
 8006f30:	6853      	ldr	r3, [r2, #4]
 8006f32:	f043 0308 	orr.w	r3, r3, #8
 8006f36:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8006f44:	4628      	mov	r0, r5
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8006f48:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8006f4c:	2b12      	cmp	r3, #18
 8006f4e:	d1d6      	bne.n	8006efe <HAL_SAI_DMAStop+0x20>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8006f50:	f7fd fc25 	bl	800479e <HAL_DMA_Abort>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d0d2      	beq.n	8006efe <HAL_SAI_DMAStop+0x20>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8006f58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5c:	2b80      	cmp	r3, #128	; 0x80
 8006f5e:	d0ce      	beq.n	8006efe <HAL_SAI_DMAStop+0x20>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006f60:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f68:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8006f6c:	e7c8      	b.n	8006f00 <HAL_SAI_DMAStop+0x22>
  __HAL_LOCK(hsai);
 8006f6e:	2502      	movs	r5, #2
 8006f70:	e7e8      	b.n	8006f44 <HAL_SAI_DMAStop+0x66>
	...

08006f74 <HAL_SAI_Transmit_DMA>:
{
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f76:	4604      	mov	r4, r0
 8006f78:	4613      	mov	r3, r2
  if((pData == NULL) || (Size == 0))
 8006f7a:	b331      	cbz	r1, 8006fca <HAL_SAI_Transmit_DMA+0x56>
 8006f7c:	b32b      	cbz	r3, 8006fca <HAL_SAI_Transmit_DMA+0x56>
  if(hsai->State == HAL_SAI_STATE_READY)
 8006f7e:	f890 607d 	ldrb.w	r6, [r0, #125]	; 0x7d
 8006f82:	b2f6      	uxtb	r6, r6
 8006f84:	2e01      	cmp	r6, #1
 8006f86:	d13a      	bne.n	8006ffe <HAL_SAI_Transmit_DMA+0x8a>
    __HAL_LOCK(hsai);
 8006f88:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
 8006f8c:	2801      	cmp	r0, #1
 8006f8e:	d036      	beq.n	8006ffe <HAL_SAI_Transmit_DMA+0x8a>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006f90:	2700      	movs	r7, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006f92:	2212      	movs	r2, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8006f94:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006f96:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006f9a:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8006f9e:	4a19      	ldr	r2, [pc, #100]	; (8007004 <HAL_SAI_Transmit_DMA+0x90>)
    __HAL_LOCK(hsai);
 8006fa0:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8006fa4:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8006fa6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8006faa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8006fae:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8006fb0:	4a15      	ldr	r2, [pc, #84]	; (8007008 <HAL_SAI_Transmit_DMA+0x94>)
 8006fb2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8006fb4:	4a15      	ldr	r2, [pc, #84]	; (800700c <HAL_SAI_Transmit_DMA+0x98>)
    hsai->hdmatx->XferAbortCallback = NULL;
 8006fb6:	e9c0 2713 	strd	r2, r7, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006fba:	6822      	ldr	r2, [r4, #0]
 8006fbc:	321c      	adds	r2, #28
 8006fbe:	f7fd fbb1 	bl	8004724 <HAL_DMA_Start_IT>
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	b118      	cbz	r0, 8006fce <HAL_SAI_Transmit_DMA+0x5a>
      __HAL_UNLOCK(hsai);
 8006fc6:	f884 707c 	strb.w	r7, [r4, #124]	; 0x7c
    return  HAL_ERROR;
 8006fca:	2501      	movs	r5, #1
 8006fcc:	e015      	b.n	8006ffa <HAL_SAI_Transmit_DMA+0x86>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8006fce:	6826      	ldr	r6, [r4, #0]
 8006fd0:	6833      	ldr	r3, [r6, #0]
 8006fd2:	03db      	lsls	r3, r3, #15
 8006fd4:	d403      	bmi.n	8006fde <HAL_SAI_Transmit_DMA+0x6a>
      __HAL_SAI_ENABLE(hsai);
 8006fd6:	6833      	ldr	r3, [r6, #0]
 8006fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fdc:	6033      	str	r3, [r6, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f7ff fe1f 	bl	8006c24 <SAI_InterruptFlag>
 8006fe6:	6933      	ldr	r3, [r6, #16]
 8006fe8:	4318      	orrs	r0, r3
 8006fea:	6130      	str	r0, [r6, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006fec:	6833      	ldr	r3, [r6, #0]
 8006fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ff2:	6033      	str	r3, [r6, #0]
    __HAL_UNLOCK(hsai);
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006ffe:	2502      	movs	r5, #2
 8007000:	e7fb      	b.n	8006ffa <HAL_SAI_Transmit_DMA+0x86>
 8007002:	bf00      	nop
 8007004:	080070e5 	.word	0x080070e5
 8007008:	080070ad 	.word	0x080070ad
 800700c:	08007131 	.word	0x08007131

08007010 <HAL_SAI_Receive_DMA>:
{
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	4613      	mov	r3, r2
 8007014:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
 8007016:	460a      	mov	r2, r1
 8007018:	b331      	cbz	r1, 8007068 <HAL_SAI_Receive_DMA+0x58>
 800701a:	b32b      	cbz	r3, 8007068 <HAL_SAI_Receive_DMA+0x58>
  if(hsai->State == HAL_SAI_STATE_READY)
 800701c:	f890 607d 	ldrb.w	r6, [r0, #125]	; 0x7d
 8007020:	b2f6      	uxtb	r6, r6
 8007022:	2e01      	cmp	r6, #1
 8007024:	d13a      	bne.n	800709c <HAL_SAI_Receive_DMA+0x8c>
    __HAL_LOCK(hsai);
 8007026:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
 800702a:	2901      	cmp	r1, #1
 800702c:	d036      	beq.n	800709c <HAL_SAI_Receive_DMA+0x8c>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800702e:	2700      	movs	r7, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007030:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
 8007032:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007036:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    hsai->pBuffPtr = pData;
 800703a:	6642      	str	r2, [r0, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800703c:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    hsai->XferSize = Size;
 8007040:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->XferCount = Size;
 8007044:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007048:	4915      	ldr	r1, [pc, #84]	; (80070a0 <HAL_SAI_Receive_DMA+0x90>)
 800704a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800704c:	6401      	str	r1, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800704e:	4915      	ldr	r1, [pc, #84]	; (80070a4 <HAL_SAI_Receive_DMA+0x94>)
 8007050:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007052:	4915      	ldr	r1, [pc, #84]	; (80070a8 <HAL_SAI_Receive_DMA+0x98>)
    hsai->hdmarx->XferAbortCallback = NULL;
 8007054:	e9c0 1713 	strd	r1, r7, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007058:	6821      	ldr	r1, [r4, #0]
 800705a:	311c      	adds	r1, #28
 800705c:	f7fd fb62 	bl	8004724 <HAL_DMA_Start_IT>
 8007060:	4605      	mov	r5, r0
 8007062:	b118      	cbz	r0, 800706c <HAL_SAI_Receive_DMA+0x5c>
      __HAL_UNLOCK(hsai);
 8007064:	f884 707c 	strb.w	r7, [r4, #124]	; 0x7c
    return  HAL_ERROR;
 8007068:	2501      	movs	r5, #1
 800706a:	e015      	b.n	8007098 <HAL_SAI_Receive_DMA+0x88>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800706c:	6826      	ldr	r6, [r4, #0]
 800706e:	6833      	ldr	r3, [r6, #0]
 8007070:	03db      	lsls	r3, r3, #15
 8007072:	d403      	bmi.n	800707c <HAL_SAI_Receive_DMA+0x6c>
      __HAL_SAI_ENABLE(hsai);
 8007074:	6833      	ldr	r3, [r6, #0]
 8007076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800707a:	6033      	str	r3, [r6, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800707c:	2100      	movs	r1, #0
 800707e:	4620      	mov	r0, r4
 8007080:	f7ff fdd0 	bl	8006c24 <SAI_InterruptFlag>
 8007084:	6933      	ldr	r3, [r6, #16]
 8007086:	4318      	orrs	r0, r3
 8007088:	6130      	str	r0, [r6, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800708a:	6833      	ldr	r3, [r6, #0]
 800708c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007090:	6033      	str	r3, [r6, #0]
    __HAL_UNLOCK(hsai);
 8007092:	2300      	movs	r3, #0
 8007094:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8007098:	4628      	mov	r0, r5
 800709a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800709c:	2502      	movs	r5, #2
 800709e:	e7fb      	b.n	8007098 <HAL_SAI_Receive_DMA+0x88>
 80070a0:	08007127 	.word	0x08007127
 80070a4:	080070ef 	.word	0x080070ef
 80070a8:	08007131 	.word	0x08007131

080070ac <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80070ac:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80070ae:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 80070b0:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80070b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b6:	d011      	beq.n	80070dc <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80070b8:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 80070ba:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80070bc:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80070be:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
 80070c0:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80070c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070c8:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80070ca:	f7ff fdab 	bl	8006c24 <SAI_InterruptFlag>
 80070ce:	692b      	ldr	r3, [r5, #16]
 80070d0:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State= HAL_SAI_STATE_READY;
 80070d4:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80070d6:	6128      	str	r0, [r5, #16]
    hsai->State= HAL_SAI_STATE_READY;
 80070d8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80070dc:	4620      	mov	r0, r4
 80070de:	f7fb ff3d 	bl	8002f5c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80070e2:	bd38      	pop	{r3, r4, r5, pc}

080070e4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070e4:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80070e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80070e8:	f7fb ff3c 	bl	8002f64 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80070ec:	bd08      	pop	{r3, pc}

080070ee <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80070ee:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80070f0:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80070f2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80070f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f8:	d011      	beq.n	800711e <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80070fa:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 80070fc:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80070fe:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007106:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 8007108:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800710c:	f7ff fd8a 	bl	8006c24 <SAI_InterruptFlag>
 8007110:	692b      	ldr	r3, [r5, #16]
 8007112:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
 8007116:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007118:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800711a:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800711e:	4620      	mov	r0, r4
 8007120:	f7fc f888 	bl	8003234 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007124:	bd38      	pop	{r3, r4, r5, pc}

08007126 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007126:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007128:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800712a:	f7fc f887 	bl	800323c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800712e:	bd08      	pop	{r3, pc}

08007130 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007130:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007132:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007134:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8007140:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007144:	2b01      	cmp	r3, #1
 8007146:	d003      	beq.n	8007150 <SAI_DMAError+0x20>
 8007148:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800714a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714c:	2b01      	cmp	r3, #1
 800714e:	d10d      	bne.n	800716c <SAI_DMAError+0x3c>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007150:	6822      	ldr	r2, [r4, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8007152:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007154:	6813      	ldr	r3, [r2, #0]
 8007156:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800715a:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 800715c:	f7ff fd78 	bl	8006c50 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007160:	2301      	movs	r3, #1
 8007162:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800716c:	4620      	mov	r0, r4
 800716e:	f7fc f86b 	bl	8003248 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007172:	bd10      	pop	{r4, pc}

08007174 <HAL_SAI_GetState>:
  return hsai->State;
 8007174:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 8007178:	4770      	bx	lr

0800717a <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800717a:	4770      	bx	lr

0800717c <HAL_SDRAM_Init>:
{   
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	460d      	mov	r5, r1
  if(hsdram == NULL)
 8007180:	4604      	mov	r4, r0
 8007182:	b1c8      	cbz	r0, 80071b8 <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007184:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007188:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800718c:	b91b      	cbnz	r3, 8007196 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 800718e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8007192:	f7ff fff2 	bl	800717a <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007196:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007198:	1d21      	adds	r1, r4, #4
 800719a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800719c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80071a0:	f000 fb7c 	bl	800789c <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80071a4:	6862      	ldr	r2, [r4, #4]
 80071a6:	4629      	mov	r1, r5
 80071a8:	6820      	ldr	r0, [r4, #0]
 80071aa:	f000 fbad 	bl	8007908 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 80071ae:	2301      	movs	r3, #1
  return HAL_OK;
 80071b0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80071b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80071b8:	2001      	movs	r0, #1
 80071ba:	e7fc      	b.n	80071b6 <HAL_SDRAM_Init+0x3a>

080071bc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80071c0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 80071c4:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80071c6:	b2c0      	uxtb	r0, r0
 80071c8:	2802      	cmp	r0, #2
 80071ca:	d00d      	beq.n	80071e8 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071cc:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80071ce:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80071d4:	f000 fbdc 	bl	8007990 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071d8:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 80071da:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071dc:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80071de:	bf0c      	ite	eq
 80071e0:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 80071e2:	2301      	movne	r3, #1
 80071e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80071e8:	bd38      	pop	{r3, r4, r5, pc}

080071ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80071ea:	b510      	push	{r4, lr}
 80071ec:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80071ee:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80071f2:	b2c0      	uxtb	r0, r0
 80071f4:	2802      	cmp	r0, #2
 80071f6:	d009      	beq.n	800720c <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071f8:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80071fa:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071fc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007200:	f000 fbd9 	bl	80079b6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007204:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8007206:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007208:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800720c:	bd10      	pop	{r4, pc}

0800720e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800720e:	6803      	ldr	r3, [r0, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007216:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	f022 0201 	bic.w	r2, r2, #1
 800721e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007220:	2320      	movs	r3, #32
 8007222:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007224:	2300      	movs	r3, #0
 8007226:	6603      	str	r3, [r0, #96]	; 0x60
}
 8007228:	4770      	bx	lr

0800722a <HAL_UART_TxCpltCallback>:
 800722a:	4770      	bx	lr

0800722c <HAL_UART_ErrorCallback>:
 800722c:	4770      	bx	lr
	...

08007230 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007230:	6803      	ldr	r3, [r0, #0]
{
 8007232:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007234:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 8007236:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800723a:	6819      	ldr	r1, [r3, #0]
{
 800723c:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800723e:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007240:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8007242:	d109      	bne.n	8007258 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007244:	0696      	lsls	r6, r2, #26
 8007246:	d56e      	bpl.n	8007326 <HAL_UART_IRQHandler+0xf6>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007248:	068d      	lsls	r5, r1, #26
 800724a:	d56c      	bpl.n	8007326 <HAL_UART_IRQHandler+0xf6>
      if (huart->RxISR != NULL)
 800724c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800724e:	2b00      	cmp	r3, #0
 8007250:	d064      	beq.n	800731c <HAL_UART_IRQHandler+0xec>
}
 8007252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8007256:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007258:	f015 0001 	ands.w	r0, r5, #1
 800725c:	d102      	bne.n	8007264 <HAL_UART_IRQHandler+0x34>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800725e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8007262:	d060      	beq.n	8007326 <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007264:	07d6      	lsls	r6, r2, #31
 8007266:	d507      	bpl.n	8007278 <HAL_UART_IRQHandler+0x48>
 8007268:	05cd      	lsls	r5, r1, #23
 800726a:	d505      	bpl.n	8007278 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800726c:	2501      	movs	r5, #1
 800726e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007270:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8007272:	f045 0501 	orr.w	r5, r5, #1
 8007276:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007278:	0796      	lsls	r6, r2, #30
 800727a:	d506      	bpl.n	800728a <HAL_UART_IRQHandler+0x5a>
 800727c:	b128      	cbz	r0, 800728a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800727e:	2502      	movs	r5, #2
 8007280:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007282:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8007284:	f045 0504 	orr.w	r5, r5, #4
 8007288:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800728a:	0755      	lsls	r5, r2, #29
 800728c:	d506      	bpl.n	800729c <HAL_UART_IRQHandler+0x6c>
 800728e:	b128      	cbz	r0, 800729c <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007290:	2504      	movs	r5, #4
 8007292:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007294:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8007296:	f045 0502 	orr.w	r5, r5, #2
 800729a:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800729c:	0716      	lsls	r6, r2, #28
 800729e:	d508      	bpl.n	80072b2 <HAL_UART_IRQHandler+0x82>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072a0:	068d      	lsls	r5, r1, #26
 80072a2:	d400      	bmi.n	80072a6 <HAL_UART_IRQHandler+0x76>
 80072a4:	b128      	cbz	r0, 80072b2 <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072a6:	2008      	movs	r0, #8
 80072a8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072aa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80072ac:	f040 0008 	orr.w	r0, r0, #8
 80072b0:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072b2:	0510      	lsls	r0, r2, #20
 80072b4:	d508      	bpl.n	80072c8 <HAL_UART_IRQHandler+0x98>
 80072b6:	014e      	lsls	r6, r1, #5
 80072b8:	d506      	bpl.n	80072c8 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80072be:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072c0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80072c2:	f043 0320 	orr.w	r3, r3, #32
 80072c6:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80072ca:	b33b      	cbz	r3, 800731c <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80072cc:	0695      	lsls	r5, r2, #26
 80072ce:	d505      	bpl.n	80072dc <HAL_UART_IRQHandler+0xac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072d0:	0688      	lsls	r0, r1, #26
 80072d2:	d503      	bpl.n	80072dc <HAL_UART_IRQHandler+0xac>
        if (huart->RxISR != NULL)
 80072d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80072d6:	b10b      	cbz	r3, 80072dc <HAL_UART_IRQHandler+0xac>
          huart->RxISR(huart);
 80072d8:	4620      	mov	r0, r4
 80072da:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072dc:	6822      	ldr	r2, [r4, #0]
        UART_EndRxTransfer(huart);
 80072de:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 80072e0:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072e2:	6892      	ldr	r2, [r2, #8]
 80072e4:	0651      	lsls	r1, r2, #25
 80072e6:	d402      	bmi.n	80072ee <HAL_UART_IRQHandler+0xbe>
 80072e8:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 80072ec:	d017      	beq.n	800731e <HAL_UART_IRQHandler+0xee>
        UART_EndRxTransfer(huart);
 80072ee:	f7ff ff8e 	bl	800720e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	0652      	lsls	r2, r2, #25
 80072f8:	d50d      	bpl.n	8007316 <HAL_UART_IRQHandler+0xe6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fa:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80072fc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007302:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8007304:	b138      	cbz	r0, 8007316 <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <HAL_UART_IRQHandler+0x128>)
 8007308:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800730a:	f7fd fa8b 	bl	8004824 <HAL_DMA_Abort_IT>
 800730e:	b128      	cbz	r0, 800731c <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007310:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007312:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007314:	e79d      	b.n	8007252 <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 8007316:	4620      	mov	r0, r4
 8007318:	f7ff ff88 	bl	800722c <HAL_UART_ErrorCallback>
}
 800731c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800731e:	f7ff ff85 	bl	800722c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007322:	67e5      	str	r5, [r4, #124]	; 0x7c
 8007324:	e7fa      	b.n	800731c <HAL_UART_IRQHandler+0xec>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007326:	0616      	lsls	r6, r2, #24
 8007328:	d506      	bpl.n	8007338 <HAL_UART_IRQHandler+0x108>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800732a:	060d      	lsls	r5, r1, #24
 800732c:	d504      	bpl.n	8007338 <HAL_UART_IRQHandler+0x108>
    if (huart->TxISR != NULL)
 800732e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0f3      	beq.n	800731c <HAL_UART_IRQHandler+0xec>
      huart->TxISR(huart);
 8007334:	4620      	mov	r0, r4
 8007336:	e78c      	b.n	8007252 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007338:	0650      	lsls	r0, r2, #25
 800733a:	d5ef      	bpl.n	800731c <HAL_UART_IRQHandler+0xec>
 800733c:	064a      	lsls	r2, r1, #25
 800733e:	d5ed      	bpl.n	800731c <HAL_UART_IRQHandler+0xec>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007340:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007342:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007348:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800734a:	2320      	movs	r3, #32
 800734c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800734e:	2300      	movs	r3, #0
 8007350:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8007352:	f7ff ff6a 	bl	800722a <HAL_UART_TxCpltCallback>
 8007356:	e7e1      	b.n	800731c <HAL_UART_IRQHandler+0xec>
 8007358:	0800735d 	.word	0x0800735d

0800735c <UART_DMAAbortOnError>:
{
 800735c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800735e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007366:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800736a:	f7ff ff5f 	bl	800722c <HAL_UART_ErrorCallback>
}
 800736e:	bd08      	pop	{r3, pc}

08007370 <UART_SetConfig>:
{
 8007370:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007372:	69c2      	ldr	r2, [r0, #28]
{
 8007374:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007376:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007378:	6881      	ldr	r1, [r0, #8]
 800737a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800737c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800737e:	4301      	orrs	r1, r0
 8007380:	6960      	ldr	r0, [r4, #20]
 8007382:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007384:	489b      	ldr	r0, [pc, #620]	; (80075f4 <UART_SetConfig+0x284>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007386:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007388:	4028      	ands	r0, r5
  tmpreg |= huart->Init.OneBitSampling;
 800738a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800738c:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800738e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007390:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007392:	6859      	ldr	r1, [r3, #4]
 8007394:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8007398:	4301      	orrs	r1, r0
 800739a:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800739c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800739e:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80073a0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073a2:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 80073a6:	4301      	orrs	r1, r0
 80073a8:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073aa:	4993      	ldr	r1, [pc, #588]	; (80075f8 <UART_SetConfig+0x288>)
 80073ac:	428b      	cmp	r3, r1
 80073ae:	d118      	bne.n	80073e2 <UART_SetConfig+0x72>
 80073b0:	4b92      	ldr	r3, [pc, #584]	; (80075fc <UART_SetConfig+0x28c>)
 80073b2:	4993      	ldr	r1, [pc, #588]	; (8007600 <UART_SetConfig+0x290>)
 80073b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	5ccb      	ldrb	r3, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073be:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80073c2:	f040 80bf 	bne.w	8007544 <UART_SetConfig+0x1d4>
    switch (clocksource)
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	f200 80b1 	bhi.w	800752e <UART_SetConfig+0x1be>
 80073cc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80073d0:	00ac0097 	.word	0x00ac0097
 80073d4:	00af00fb 	.word	0x00af00fb
 80073d8:	00af0107 	.word	0x00af0107
 80073dc:	00af00af 	.word	0x00af00af
 80073e0:	010d      	.short	0x010d
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073e2:	4988      	ldr	r1, [pc, #544]	; (8007604 <UART_SetConfig+0x294>)
 80073e4:	428b      	cmp	r3, r1
 80073e6:	d108      	bne.n	80073fa <UART_SetConfig+0x8a>
 80073e8:	4b84      	ldr	r3, [pc, #528]	; (80075fc <UART_SetConfig+0x28c>)
 80073ea:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80073ee:	4b84      	ldr	r3, [pc, #528]	; (8007600 <UART_SetConfig+0x290>)
 80073f0:	f001 010c 	and.w	r1, r1, #12
 80073f4:	440b      	add	r3, r1
 80073f6:	791b      	ldrb	r3, [r3, #4]
 80073f8:	e7e1      	b.n	80073be <UART_SetConfig+0x4e>
 80073fa:	4983      	ldr	r1, [pc, #524]	; (8007608 <UART_SetConfig+0x298>)
 80073fc:	428b      	cmp	r3, r1
 80073fe:	d118      	bne.n	8007432 <UART_SetConfig+0xc2>
 8007400:	4b7e      	ldr	r3, [pc, #504]	; (80075fc <UART_SetConfig+0x28c>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800740a:	2b10      	cmp	r3, #16
 800740c:	f000 80e4 	beq.w	80075d8 <UART_SetConfig+0x268>
 8007410:	d802      	bhi.n	8007418 <UART_SetConfig+0xa8>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0d3      	beq.n	80073be <UART_SetConfig+0x4e>
 8007416:	e005      	b.n	8007424 <UART_SetConfig+0xb4>
 8007418:	2b20      	cmp	r3, #32
 800741a:	f000 80d1 	beq.w	80075c0 <UART_SetConfig+0x250>
 800741e:	2b30      	cmp	r3, #48	; 0x30
 8007420:	f000 80e0 	beq.w	80075e4 <UART_SetConfig+0x274>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007424:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007428:	f000 8081 	beq.w	800752e <UART_SetConfig+0x1be>
        ret = HAL_ERROR;
 800742c:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800742e:	2300      	movs	r3, #0
 8007430:	e0a9      	b.n	8007586 <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007432:	4976      	ldr	r1, [pc, #472]	; (800760c <UART_SetConfig+0x29c>)
 8007434:	428b      	cmp	r3, r1
 8007436:	d10d      	bne.n	8007454 <UART_SetConfig+0xe4>
 8007438:	4b70      	ldr	r3, [pc, #448]	; (80075fc <UART_SetConfig+0x28c>)
 800743a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	f000 80c8 	beq.w	80075d8 <UART_SetConfig+0x268>
 8007448:	d9e3      	bls.n	8007412 <UART_SetConfig+0xa2>
 800744a:	2b80      	cmp	r3, #128	; 0x80
 800744c:	f000 80b8 	beq.w	80075c0 <UART_SetConfig+0x250>
 8007450:	2bc0      	cmp	r3, #192	; 0xc0
 8007452:	e7e5      	b.n	8007420 <UART_SetConfig+0xb0>
 8007454:	496e      	ldr	r1, [pc, #440]	; (8007610 <UART_SetConfig+0x2a0>)
 8007456:	428b      	cmp	r3, r1
 8007458:	d110      	bne.n	800747c <UART_SetConfig+0x10c>
 800745a:	4b68      	ldr	r3, [pc, #416]	; (80075fc <UART_SetConfig+0x28c>)
 800745c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007468:	f000 80b6 	beq.w	80075d8 <UART_SetConfig+0x268>
 800746c:	d9d1      	bls.n	8007412 <UART_SetConfig+0xa2>
 800746e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007472:	f000 80a5 	beq.w	80075c0 <UART_SetConfig+0x250>
 8007476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800747a:	e7d1      	b.n	8007420 <UART_SetConfig+0xb0>
 800747c:	4965      	ldr	r1, [pc, #404]	; (8007614 <UART_SetConfig+0x2a4>)
 800747e:	428b      	cmp	r3, r1
 8007480:	d114      	bne.n	80074ac <UART_SetConfig+0x13c>
 8007482:	4b5e      	ldr	r3, [pc, #376]	; (80075fc <UART_SetConfig+0x28c>)
 8007484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007488:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800748c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007490:	f000 80a2 	beq.w	80075d8 <UART_SetConfig+0x268>
 8007494:	d803      	bhi.n	800749e <UART_SetConfig+0x12e>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1c4      	bne.n	8007424 <UART_SetConfig+0xb4>
 800749a:	2301      	movs	r3, #1
 800749c:	e78f      	b.n	80073be <UART_SetConfig+0x4e>
 800749e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a2:	f000 808d 	beq.w	80075c0 <UART_SetConfig+0x250>
 80074a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074aa:	e7b9      	b.n	8007420 <UART_SetConfig+0xb0>
 80074ac:	495a      	ldr	r1, [pc, #360]	; (8007618 <UART_SetConfig+0x2a8>)
 80074ae:	428b      	cmp	r3, r1
 80074b0:	d113      	bne.n	80074da <UART_SetConfig+0x16a>
 80074b2:	4b52      	ldr	r3, [pc, #328]	; (80075fc <UART_SetConfig+0x28c>)
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80074bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c0:	f000 808a 	beq.w	80075d8 <UART_SetConfig+0x268>
 80074c4:	d803      	bhi.n	80074ce <UART_SetConfig+0x15e>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1ac      	bne.n	8007424 <UART_SetConfig+0xb4>
 80074ca:	2300      	movs	r3, #0
 80074cc:	e777      	b.n	80073be <UART_SetConfig+0x4e>
 80074ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074d2:	d075      	beq.n	80075c0 <UART_SetConfig+0x250>
 80074d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074d8:	e7a2      	b.n	8007420 <UART_SetConfig+0xb0>
 80074da:	4950      	ldr	r1, [pc, #320]	; (800761c <UART_SetConfig+0x2ac>)
 80074dc:	428b      	cmp	r3, r1
 80074de:	d1a1      	bne.n	8007424 <UART_SetConfig+0xb4>
 80074e0:	4b46      	ldr	r3, [pc, #280]	; (80075fc <UART_SetConfig+0x28c>)
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074ee:	d073      	beq.n	80075d8 <UART_SetConfig+0x268>
 80074f0:	d98f      	bls.n	8007412 <UART_SetConfig+0xa2>
 80074f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074f6:	d063      	beq.n	80075c0 <UART_SetConfig+0x250>
 80074f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074fc:	e790      	b.n	8007420 <UART_SetConfig+0xb0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80074fe:	f7fe ffd5 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007502:	6861      	ldr	r1, [r4, #4]
 8007504:	084a      	lsrs	r2, r1, #1
 8007506:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800750a:	fbb3 f3f1 	udiv	r3, r3, r1
 800750e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007510:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007512:	f1a3 0110 	sub.w	r1, r3, #16
 8007516:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800751a:	4291      	cmp	r1, r2
 800751c:	d90a      	bls.n	8007534 <UART_SetConfig+0x1c4>
      ret = HAL_ERROR;
 800751e:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8007520:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8007522:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8007526:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007528:	f7fe ffd0 	bl	80064cc <HAL_RCC_GetPCLK2Freq>
 800752c:	e7e9      	b.n	8007502 <UART_SetConfig+0x192>
        ret = HAL_ERROR;
 800752e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8007530:	2300      	movs	r3, #0
 8007532:	e7ee      	b.n	8007512 <UART_SetConfig+0x1a2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007534:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007538:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800753c:	6821      	ldr	r1, [r4, #0]
 800753e:	4313      	orrs	r3, r2
 8007540:	60cb      	str	r3, [r1, #12]
 8007542:	e7ed      	b.n	8007520 <UART_SetConfig+0x1b0>
    switch (clocksource)
 8007544:	2b08      	cmp	r3, #8
 8007546:	f63f af71 	bhi.w	800742c <UART_SetConfig+0xbc>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <UART_SetConfig+0x1e0>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007575 	.word	0x08007575
 8007554:	08007599 	.word	0x08007599
 8007558:	0800759f 	.word	0x0800759f
 800755c:	0800742d 	.word	0x0800742d
 8007560:	080075b1 	.word	0x080075b1
 8007564:	0800742d 	.word	0x0800742d
 8007568:	0800742d 	.word	0x0800742d
 800756c:	0800742d 	.word	0x0800742d
 8007570:	080075b7 	.word	0x080075b7
        pclk = HAL_RCC_GetPCLK1Freq();
 8007574:	f7fe ff9a 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007578:	6862      	ldr	r2, [r4, #4]
 800757a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800757e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007582:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007584:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007586:	f1a3 0110 	sub.w	r1, r3, #16
 800758a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800758e:	4291      	cmp	r1, r2
 8007590:	d8c5      	bhi.n	800751e <UART_SetConfig+0x1ae>
      huart->Instance->BRR = usartdiv;
 8007592:	6822      	ldr	r2, [r4, #0]
 8007594:	60d3      	str	r3, [r2, #12]
 8007596:	e7c3      	b.n	8007520 <UART_SetConfig+0x1b0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007598:	f7fe ff98 	bl	80064cc <HAL_RCC_GetPCLK2Freq>
 800759c:	e7ec      	b.n	8007578 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800759e:	6860      	ldr	r0, [r4, #4]
 80075a0:	0843      	lsrs	r3, r0, #1
 80075a2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80075a6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80075aa:	fbb3 f3f0 	udiv	r3, r3, r0
 80075ae:	e7e8      	b.n	8007582 <UART_SetConfig+0x212>
        pclk = HAL_RCC_GetSysClockFreq();
 80075b0:	f7fe feb0 	bl	8006314 <HAL_RCC_GetSysClockFreq>
 80075b4:	e7e0      	b.n	8007578 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80075b6:	6860      	ldr	r0, [r4, #4]
 80075b8:	0843      	lsrs	r3, r0, #1
 80075ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80075be:	e7f4      	b.n	80075aa <UART_SetConfig+0x23a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075c0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80075c4:	d1eb      	bne.n	800759e <UART_SetConfig+0x22e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80075c6:	6860      	ldr	r0, [r4, #4]
 80075c8:	0843      	lsrs	r3, r0, #1
 80075ca:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80075ce:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80075d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80075d6:	e79a      	b.n	800750e <UART_SetConfig+0x19e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075d8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80075dc:	d1e8      	bne.n	80075b0 <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetSysClockFreq();
 80075de:	f7fe fe99 	bl	8006314 <HAL_RCC_GetSysClockFreq>
 80075e2:	e78e      	b.n	8007502 <UART_SetConfig+0x192>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80075e8:	d1e5      	bne.n	80075b6 <UART_SetConfig+0x246>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80075ea:	6860      	ldr	r0, [r4, #4]
 80075ec:	0843      	lsrs	r3, r0, #1
 80075ee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80075f2:	e7ee      	b.n	80075d2 <UART_SetConfig+0x262>
 80075f4:	efff69f3 	.word	0xefff69f3
 80075f8:	40011000 	.word	0x40011000
 80075fc:	40023800 	.word	0x40023800
 8007600:	08010db9 	.word	0x08010db9
 8007604:	40004400 	.word	0x40004400
 8007608:	40004800 	.word	0x40004800
 800760c:	40004c00 	.word	0x40004c00
 8007610:	40005000 	.word	0x40005000
 8007614:	40011400 	.word	0x40011400
 8007618:	40007800 	.word	0x40007800
 800761c:	40007c00 	.word	0x40007c00

08007620 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007622:	07da      	lsls	r2, r3, #31
{
 8007624:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007626:	d506      	bpl.n	8007636 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007628:	6801      	ldr	r1, [r0, #0]
 800762a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800762c:	684a      	ldr	r2, [r1, #4]
 800762e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007632:	4322      	orrs	r2, r4
 8007634:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007636:	079c      	lsls	r4, r3, #30
 8007638:	d506      	bpl.n	8007648 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800763a:	6801      	ldr	r1, [r0, #0]
 800763c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800763e:	684a      	ldr	r2, [r1, #4]
 8007640:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007644:	4322      	orrs	r2, r4
 8007646:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007648:	0759      	lsls	r1, r3, #29
 800764a:	d506      	bpl.n	800765a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800764c:	6801      	ldr	r1, [r0, #0]
 800764e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007650:	684a      	ldr	r2, [r1, #4]
 8007652:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007656:	4322      	orrs	r2, r4
 8007658:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800765a:	071a      	lsls	r2, r3, #28
 800765c:	d506      	bpl.n	800766c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800765e:	6801      	ldr	r1, [r0, #0]
 8007660:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007662:	684a      	ldr	r2, [r1, #4]
 8007664:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007668:	4322      	orrs	r2, r4
 800766a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800766c:	06dc      	lsls	r4, r3, #27
 800766e:	d506      	bpl.n	800767e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007670:	6801      	ldr	r1, [r0, #0]
 8007672:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007674:	688a      	ldr	r2, [r1, #8]
 8007676:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800767a:	4322      	orrs	r2, r4
 800767c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800767e:	0699      	lsls	r1, r3, #26
 8007680:	d506      	bpl.n	8007690 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007682:	6801      	ldr	r1, [r0, #0]
 8007684:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007686:	688a      	ldr	r2, [r1, #8]
 8007688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800768c:	4322      	orrs	r2, r4
 800768e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007690:	065a      	lsls	r2, r3, #25
 8007692:	d510      	bpl.n	80076b6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007694:	6801      	ldr	r1, [r0, #0]
 8007696:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007698:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800769a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800769e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80076a2:	ea42 0204 	orr.w	r2, r2, r4
 80076a6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076a8:	d105      	bne.n	80076b6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076aa:	684a      	ldr	r2, [r1, #4]
 80076ac:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80076ae:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80076b2:	4322      	orrs	r2, r4
 80076b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076b6:	061b      	lsls	r3, r3, #24
 80076b8:	d506      	bpl.n	80076c8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ba:	6802      	ldr	r2, [r0, #0]
 80076bc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80076be:	6853      	ldr	r3, [r2, #4]
 80076c0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6053      	str	r3, [r2, #4]
}
 80076c8:	bd10      	pop	{r4, pc}

080076ca <UART_WaitOnFlagUntilTimeout>:
{
 80076ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ce:	9d06      	ldr	r5, [sp, #24]
 80076d0:	4604      	mov	r4, r0
 80076d2:	460f      	mov	r7, r1
 80076d4:	4616      	mov	r6, r2
 80076d6:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d8:	6821      	ldr	r1, [r4, #0]
 80076da:	69ca      	ldr	r2, [r1, #28]
 80076dc:	ea37 0302 	bics.w	r3, r7, r2
 80076e0:	bf0c      	ite	eq
 80076e2:	2201      	moveq	r2, #1
 80076e4:	2200      	movne	r2, #0
 80076e6:	42b2      	cmp	r2, r6
 80076e8:	d001      	beq.n	80076ee <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80076ea:	2000      	movs	r0, #0
 80076ec:	e018      	b.n	8007720 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80076ee:	1c68      	adds	r0, r5, #1
 80076f0:	d0f3      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f2:	f7fc fed9 	bl	80044a8 <HAL_GetTick>
 80076f6:	eba0 0008 	sub.w	r0, r0, r8
 80076fa:	42a8      	cmp	r0, r5
 80076fc:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076fe:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007700:	d800      	bhi.n	8007704 <UART_WaitOnFlagUntilTimeout+0x3a>
 8007702:	b97d      	cbnz	r5, 8007724 <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007708:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770a:	6883      	ldr	r3, [r0, #8]
 800770c:	f023 0301 	bic.w	r3, r3, #1
 8007710:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007712:	2320      	movs	r3, #32
 8007714:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007716:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8007718:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800771a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800771c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8007720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007724:	075a      	lsls	r2, r3, #29
 8007726:	d5d7      	bpl.n	80076d8 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007728:	69c3      	ldr	r3, [r0, #28]
 800772a:	051b      	lsls	r3, r3, #20
 800772c:	d5d4      	bpl.n	80076d8 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800772e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007732:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007734:	6803      	ldr	r3, [r0, #0]
 8007736:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800773a:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773c:	6883      	ldr	r3, [r0, #8]
 800773e:	f023 0301 	bic.w	r3, r3, #1
 8007742:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8007744:	2320      	movs	r3, #32
 8007746:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007748:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800774a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800774c:	e7e4      	b.n	8007718 <UART_WaitOnFlagUntilTimeout+0x4e>

0800774e <HAL_UART_Transmit>:
{
 800774e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007752:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007754:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8007756:	4604      	mov	r4, r0
 8007758:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800775a:	2b20      	cmp	r3, #32
{
 800775c:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800775e:	d14c      	bne.n	80077fa <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 8007760:	2900      	cmp	r1, #0
 8007762:	d048      	beq.n	80077f6 <HAL_UART_Transmit+0xa8>
 8007764:	2a00      	cmp	r2, #0
 8007766:	d046      	beq.n	80077f6 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8007768:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800776c:	2b01      	cmp	r3, #1
 800776e:	d044      	beq.n	80077fa <HAL_UART_Transmit+0xac>
 8007770:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007772:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8007774:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007778:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777a:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800777c:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800777e:	f7fc fe93 	bl	80044a8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007782:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8007784:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8007786:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800778a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800778e:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007792:	d103      	bne.n	800779c <HAL_UART_Transmit+0x4e>
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	b90b      	cbnz	r3, 800779c <HAL_UART_Transmit+0x4e>
 8007798:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800779a:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800779c:	2300      	movs	r3, #0
 800779e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80077a2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077a6:	463b      	mov	r3, r7
 80077a8:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80077ac:	b292      	uxth	r2, r2
 80077ae:	b93a      	cbnz	r2, 80077c0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077b0:	2140      	movs	r1, #64	; 0x40
 80077b2:	4620      	mov	r0, r4
 80077b4:	f7ff ff89 	bl	80076ca <UART_WaitOnFlagUntilTimeout>
 80077b8:	b940      	cbnz	r0, 80077cc <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 80077ba:	2320      	movs	r3, #32
 80077bc:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 80077be:	e006      	b.n	80077ce <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077c0:	2200      	movs	r2, #0
 80077c2:	2180      	movs	r1, #128	; 0x80
 80077c4:	4620      	mov	r0, r4
 80077c6:	f7ff ff80 	bl	80076ca <UART_WaitOnFlagUntilTimeout>
 80077ca:	b118      	cbz	r0, 80077d4 <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 80077cc:	2003      	movs	r0, #3
}
 80077ce:	b003      	add	sp, #12
 80077d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077d4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80077d6:	b95e      	cbnz	r6, 80077f0 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077d8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80077dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077e0:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80077e2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80077ee:	e7d8      	b.n	80077a2 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077f0:	f816 3b01 	ldrb.w	r3, [r6], #1
 80077f4:	e7f4      	b.n	80077e0 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 80077f6:	2001      	movs	r0, #1
 80077f8:	e7e9      	b.n	80077ce <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80077fa:	2002      	movs	r0, #2
 80077fc:	e7e7      	b.n	80077ce <HAL_UART_Transmit+0x80>

080077fe <UART_CheckIdleState>:
{
 80077fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007800:	2500      	movs	r5, #0
{
 8007802:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007804:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8007806:	f7fc fe4f 	bl	80044a8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800780a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800780c:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800780e:	6812      	ldr	r2, [r2, #0]
 8007810:	0712      	lsls	r2, r2, #28
 8007812:	d407      	bmi.n	8007824 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8007814:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8007816:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007818:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800781a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800781e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8007820:	b003      	add	sp, #12
 8007822:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007824:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8007828:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800782c:	4620      	mov	r0, r4
 800782e:	9200      	str	r2, [sp, #0]
 8007830:	462a      	mov	r2, r5
 8007832:	f7ff ff4a 	bl	80076ca <UART_WaitOnFlagUntilTimeout>
 8007836:	2800      	cmp	r0, #0
 8007838:	d0ec      	beq.n	8007814 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800783a:	2003      	movs	r0, #3
 800783c:	e7f0      	b.n	8007820 <UART_CheckIdleState+0x22>

0800783e <HAL_UART_Init>:
{
 800783e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007840:	4604      	mov	r4, r0
 8007842:	b340      	cbz	r0, 8007896 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007844:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007846:	b91b      	cbnz	r3, 8007850 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8007848:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800784c:	f7f9 f9c0 	bl	8000bd0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007850:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007852:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007854:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8007856:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8007858:	6813      	ldr	r3, [r2, #0]
 800785a:	f023 0301 	bic.w	r3, r3, #1
 800785e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007860:	f7ff fd86 	bl	8007370 <UART_SetConfig>
 8007864:	2801      	cmp	r0, #1
 8007866:	d016      	beq.n	8007896 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800786a:	b113      	cbz	r3, 8007872 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800786c:	4620      	mov	r0, r4
 800786e:	f7ff fed7 	bl	8007620 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007872:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8007874:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800787c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007884:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	f042 0201 	orr.w	r2, r2, #1
}
 800788c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8007890:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8007892:	f7ff bfb4 	b.w	80077fe <UART_CheckIdleState>
}
 8007896:	2001      	movs	r0, #1
 8007898:	bd10      	pop	{r4, pc}
	...

0800789c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800789c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80078a2:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80078a6:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 80078aa:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 80078ae:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80078b2:	6809      	ldr	r1, [r1, #0]
 80078b4:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80078b6:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80078b8:	2901      	cmp	r1, #1
 80078ba:	4912      	ldr	r1, [pc, #72]	; (8007904 <FMC_SDRAM_Init+0x68>)
 80078bc:	d00f      	beq.n	80078de <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80078be:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80078c0:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80078c2:	432a      	orrs	r2, r5
 80078c4:	ea42 0308 	orr.w	r3, r2, r8
 80078c8:	ea43 030e 	orr.w	r3, r3, lr
 80078cc:	ea43 030c 	orr.w	r3, r3, ip
 80078d0:	433b      	orrs	r3, r7
 80078d2:	4333      	orrs	r3, r6
 80078d4:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80078d6:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80078d8:	2000      	movs	r0, #0
 80078da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80078de:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80078e0:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80078e2:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80078e6:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80078e8:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80078ec:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80078ee:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80078f2:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80078f4:	ea42 020c 	orr.w	r2, r2, ip
 80078f8:	433a      	orrs	r2, r7
 80078fa:	4332      	orrs	r2, r6
 80078fc:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80078fe:	6042      	str	r2, [r0, #4]
 8007900:	e7ea      	b.n	80078d8 <FMC_SDRAM_Init+0x3c>
 8007902:	bf00      	nop
 8007904:	ffff8000 	.word	0xffff8000

08007908 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007908:	68cb      	ldr	r3, [r1, #12]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800790a:	2a01      	cmp	r2, #1
{
 800790c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800790e:	680c      	ldr	r4, [r1, #0]
 8007910:	f103 37ff 	add.w	r7, r3, #4294967295
 8007914:	694b      	ldr	r3, [r1, #20]
 8007916:	688e      	ldr	r6, [r1, #8]
 8007918:	f104 3cff 	add.w	ip, r4, #4294967295
 800791c:	690d      	ldr	r5, [r1, #16]
 800791e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007922:	684c      	ldr	r4, [r1, #4]
 8007924:	f106 36ff 	add.w	r6, r6, #4294967295
 8007928:	6989      	ldr	r1, [r1, #24]
 800792a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800792e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007932:	f105 35ff 	add.w	r5, r5, #4294967295
 8007936:	f101 31ff 	add.w	r1, r1, #4294967295
 800793a:	ea4f 2606 	mov.w	r6, r6, lsl #8
 800793e:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8007942:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8007946:	ea4f 6101 	mov.w	r1, r1, lsl #24
 800794a:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
 800794e:	d00c      	beq.n	800796a <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007950:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007954:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007956:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007958:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800795c:	4333      	orrs	r3, r6
 800795e:	432b      	orrs	r3, r5
 8007960:	430b      	orrs	r3, r1
 8007962:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007964:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8007966:	2000      	movs	r0, #0
 8007968:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800796a:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800796c:	ea44 0206 	orr.w	r2, r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007970:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007974:	ea42 020c 	orr.w	r2, r2, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007978:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800797c:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800797e:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007980:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007982:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007984:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007988:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800798a:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800798c:	60c2      	str	r2, [r0, #12]
 800798e:	e7ea      	b.n	8007966 <FMC_SDRAM_Timing_Init+0x5e>

08007990 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007990:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 8007994:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007996:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 8007998:	68ca      	ldr	r2, [r1, #12]
{
 800799a:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 800799c:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800799e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80079a2:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 80079a4:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80079a6:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80079a8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80079ac:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 80079ae:	9b01      	ldr	r3, [sp, #4]
 80079b0:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 80079b2:	b002      	add	sp, #8
 80079b4:	bd10      	pop	{r4, pc}

080079b6 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80079b6:	6943      	ldr	r3, [r0, #20]
 80079b8:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80079bc:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80079be:	2000      	movs	r0, #0
 80079c0:	4770      	bx	lr
	...

080079c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079c4:	4b0a      	ldr	r3, [pc, #40]	; (80079f0 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079c6:	3b01      	subs	r3, #1
 80079c8:	d00f      	beq.n	80079ea <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079ca:	6902      	ldr	r2, [r0, #16]
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	dafa      	bge.n	80079c6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079d0:	6903      	ldr	r3, [r0, #16]
 80079d2:	4a07      	ldr	r2, [pc, #28]	; (80079f0 <USB_CoreReset+0x2c>)
 80079d4:	f043 0301 	orr.w	r3, r3, #1
 80079d8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80079da:	3a01      	subs	r2, #1
 80079dc:	d005      	beq.n	80079ea <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079de:	6903      	ldr	r3, [r0, #16]
 80079e0:	f013 0301 	ands.w	r3, r3, #1
 80079e4:	d1f9      	bne.n	80079da <USB_CoreReset+0x16>

  return HAL_OK;
 80079e6:	4618      	mov	r0, r3
 80079e8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80079ea:	2003      	movs	r0, #3
}
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	00030d41 	.word	0x00030d41

080079f4 <USB_CoreInit>:
{
 80079f4:	b084      	sub	sp, #16
 80079f6:	b538      	push	{r3, r4, r5, lr}
 80079f8:	ad05      	add	r5, sp, #20
 80079fa:	4604      	mov	r4, r0
 80079fc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d126      	bne.n	8007a54 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a06:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a0c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a0e:	68c3      	ldr	r3, [r0, #12]
 8007a10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a18:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a1a:	68c3      	ldr	r3, [r0, #12]
 8007a1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a20:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8007a22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d103      	bne.n	8007a30 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a28:	68c3      	ldr	r3, [r0, #12]
 8007a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a2e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8007a30:	4620      	mov	r0, r4
 8007a32:	f7ff ffc7 	bl	80079c4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8007a36:	9b08      	ldr	r3, [sp, #32]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d107      	bne.n	8007a4c <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a3c:	68a3      	ldr	r3, [r4, #8]
 8007a3e:	f043 0306 	orr.w	r3, r3, #6
 8007a42:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a44:	68a3      	ldr	r3, [r4, #8]
 8007a46:	f043 0320 	orr.w	r3, r3, #32
 8007a4a:	60a3      	str	r3, [r4, #8]
}
 8007a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a50:	b004      	add	sp, #16
 8007a52:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a54:	68c3      	ldr	r3, [r0, #12]
 8007a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a5a:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8007a5c:	f7ff ffb2 	bl	80079c4 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a66:	63a3      	str	r3, [r4, #56]	; 0x38
 8007a68:	e7e5      	b.n	8007a36 <USB_CoreInit+0x42>

08007a6a <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a6a:	6883      	ldr	r3, [r0, #8]
 8007a6c:	f043 0301 	orr.w	r3, r3, #1
 8007a70:	6083      	str	r3, [r0, #8]
}
 8007a72:	2000      	movs	r0, #0
 8007a74:	4770      	bx	lr

08007a76 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a76:	6883      	ldr	r3, [r0, #8]
 8007a78:	f023 0301 	bic.w	r3, r3, #1
 8007a7c:	6083      	str	r3, [r0, #8]
}
 8007a7e:	2000      	movs	r0, #0
 8007a80:	4770      	bx	lr

08007a82 <USB_SetCurrentMode>:
{
 8007a82:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a84:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007a86:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a88:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007a8c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007a8e:	d108      	bne.n	8007aa2 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a90:	68c3      	ldr	r3, [r0, #12]
 8007a92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a96:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8007a98:	2032      	movs	r0, #50	; 0x32
 8007a9a:	f7fc fd0b 	bl	80044b4 <HAL_Delay>
  return HAL_OK;
 8007a9e:	2000      	movs	r0, #0
}
 8007aa0:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8007aa2:	b919      	cbnz	r1, 8007aac <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007aa4:	68c3      	ldr	r3, [r0, #12]
 8007aa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007aaa:	e7f4      	b.n	8007a96 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8007aac:	2001      	movs	r0, #1
 8007aae:	e7f7      	b.n	8007aa0 <USB_SetCurrentMode+0x1e>

08007ab0 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ab0:	0189      	lsls	r1, r1, #6
 8007ab2:	4a07      	ldr	r2, [pc, #28]	; (8007ad0 <USB_FlushTxFifo+0x20>)
 8007ab4:	f041 0120 	orr.w	r1, r1, #32
 8007ab8:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8007aba:	3a01      	subs	r2, #1
 8007abc:	d005      	beq.n	8007aca <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007abe:	6903      	ldr	r3, [r0, #16]
 8007ac0:	f013 0320 	ands.w	r3, r3, #32
 8007ac4:	d1f9      	bne.n	8007aba <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007aca:	2003      	movs	r0, #3
}
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	00030d41 	.word	0x00030d41

08007ad4 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	4a06      	ldr	r2, [pc, #24]	; (8007af0 <USB_FlushRxFifo+0x1c>)
 8007ad8:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8007ada:	3a01      	subs	r2, #1
 8007adc:	d005      	beq.n	8007aea <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ade:	6903      	ldr	r3, [r0, #16]
 8007ae0:	f013 0310 	ands.w	r3, r3, #16
 8007ae4:	d1f9      	bne.n	8007ada <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007aea:	2003      	movs	r0, #3
}
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	00030d41 	.word	0x00030d41

08007af4 <USB_WritePacket>:
{
 8007af4:	b510      	push	{r4, lr}
 8007af6:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8007afa:	b94c      	cbnz	r4, 8007b10 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8007afc:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007afe:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b02:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b04:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8007b08:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	d101      	bne.n	8007b14 <USB_WritePacket+0x20>
}
 8007b10:	2000      	movs	r0, #0
 8007b12:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b14:	f851 2b04 	ldr.w	r2, [r1], #4
 8007b18:	6002      	str	r2, [r0, #0]
 8007b1a:	e7f7      	b.n	8007b0c <USB_WritePacket+0x18>

08007b1c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007b1c:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b1e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007b22:	0892      	lsrs	r2, r2, #2
 8007b24:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 8007b28:	4291      	cmp	r1, r2
 8007b2a:	d101      	bne.n	8007b30 <USB_ReadPacket+0x14>
}
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b30:	6803      	ldr	r3, [r0, #0]
 8007b32:	f841 3b04 	str.w	r3, [r1], #4
 8007b36:	e7f7      	b.n	8007b28 <USB_ReadPacket+0xc>

08007b38 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007b38:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007b3a:	6980      	ldr	r0, [r0, #24]
}
 8007b3c:	4010      	ands	r0, r2
 8007b3e:	4770      	bx	lr

08007b40 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8007b40:	6940      	ldr	r0, [r0, #20]
}
 8007b42:	f000 0001 	and.w	r0, r0, #1
 8007b46:	4770      	bx	lr

08007b48 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007b48:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 8007b4c:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007b4e:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8007b52:	f023 0303 	bic.w	r3, r3, #3
{
 8007b56:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007b58:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007b5c:	f001 0303 	and.w	r3, r1, #3
 8007b60:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8007b64:	ea43 0304 	orr.w	r3, r3, r4
 8007b68:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8007b6c:	d104      	bne.n	8007b78 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 8007b6e:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8007b72:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8007b74:	2000      	movs	r0, #0
 8007b76:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8007b78:	2902      	cmp	r1, #2
 8007b7a:	d1fb      	bne.n	8007b74 <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 8007b7c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007b80:	e7f7      	b.n	8007b72 <USB_InitFSLSPClkSel+0x2a>

08007b82 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007b82:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8007b84:	2500      	movs	r5, #0
{
 8007b86:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 8007b88:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8007b8a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8007b8e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007b96:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007b98:	9b01      	ldr	r3, [sp, #4]
 8007b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b9e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8007ba2:	2064      	movs	r0, #100	; 0x64
 8007ba4:	f7fc fc86 	bl	80044b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007ba8:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 8007baa:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bb0:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8007bb4:	f7fc fc7e 	bl	80044b4 <HAL_Delay>

  return HAL_OK;
}
 8007bb8:	4628      	mov	r0, r5
 8007bba:	b003      	add	sp, #12
 8007bbc:	bd30      	pop	{r4, r5, pc}

08007bbe <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007bbe:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8007bc4:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8007bc8:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007bca:	9b01      	ldr	r3, [sp, #4]
 8007bcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007bd0:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007bd2:	9b01      	ldr	r3, [sp, #4]
 8007bd4:	04da      	lsls	r2, r3, #19
 8007bd6:	d406      	bmi.n	8007be6 <USB_DriveVbus+0x28>
 8007bd8:	2901      	cmp	r1, #1
 8007bda:	d104      	bne.n	8007be6 <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007bdc:	9b01      	ldr	r3, [sp, #4]
 8007bde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007be2:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007be6:	9b01      	ldr	r3, [sp, #4]
 8007be8:	04db      	lsls	r3, r3, #19
 8007bea:	d505      	bpl.n	8007bf8 <USB_DriveVbus+0x3a>
 8007bec:	b921      	cbnz	r1, 8007bf8 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007bee:	9b01      	ldr	r3, [sp, #4]
 8007bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bf4:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	b002      	add	sp, #8
 8007bfc:	4770      	bx	lr
	...

08007c00 <USB_HostInit>:
{
 8007c00:	b084      	sub	sp, #16
 8007c02:	b538      	push	{r3, r4, r5, lr}
 8007c04:	4604      	mov	r4, r0
 8007c06:	a805      	add	r0, sp, #20
 8007c08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007c12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c18:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c1c:	05da      	lsls	r2, r3, #23
 8007c1e:	d53f      	bpl.n	8007ca0 <USB_HostInit+0xa0>
    if (cfg.speed == USBH_FSLS_SPEED)
 8007c20:	9b07      	ldr	r3, [sp, #28]
 8007c22:	2b01      	cmp	r3, #1
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007c24:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 8007c28:	d13c      	bne.n	8007ca4 <USB_HostInit+0xa4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007c2a:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c2e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007c32:	2110      	movs	r1, #16
 8007c34:	4620      	mov	r0, r4
 8007c36:	f7ff ff3b 	bl	8007ab0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f7ff ff4a 	bl	8007ad4 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8007c40:	2300      	movs	r3, #0
 8007c42:	9906      	ldr	r1, [sp, #24]
 8007c44:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8007c4c:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8007c4e:	4299      	cmp	r1, r3
 8007c50:	d12b      	bne.n	8007caa <USB_HostInit+0xaa>
  (void)USB_DriveVbus(USBx, 1U);
 8007c52:	2101      	movs	r1, #1
 8007c54:	4620      	mov	r0, r4
 8007c56:	f7ff ffb2 	bl	8007bbe <USB_DriveVbus>
  HAL_Delay(200U);
 8007c5a:	20c8      	movs	r0, #200	; 0xc8
 8007c5c:	f7fc fc2a 	bl	80044b4 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007c64:	f04f 33ff 	mov.w	r3, #4294967295
 8007c68:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c6c:	05db      	lsls	r3, r3, #23
 8007c6e:	d521      	bpl.n	8007cb4 <USB_HostInit+0xb4>
    USBx->GRXFSIZ  = 0x200U;
 8007c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c74:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007c76:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8007c7a:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007c7c:	4b11      	ldr	r3, [pc, #68]	; (8007cc4 <USB_HostInit+0xc4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007c7e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8007c82:	9b08      	ldr	r3, [sp, #32]
 8007c84:	b91b      	cbnz	r3, 8007c8e <USB_HostInit+0x8e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c86:	69a3      	ldr	r3, [r4, #24]
 8007c88:	f043 0310 	orr.w	r3, r3, #16
 8007c8c:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007c8e:	69a2      	ldr	r2, [r4, #24]
}
 8007c90:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007c92:	4b0d      	ldr	r3, [pc, #52]	; (8007cc8 <USB_HostInit+0xc8>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	61a3      	str	r3, [r4, #24]
}
 8007c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c9c:	b004      	add	sp, #16
 8007c9e:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ca0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8007ca4:	f023 0304 	bic.w	r3, r3, #4
 8007ca8:	e7c1      	b.n	8007c2e <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007caa:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007cac:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8007cae:	60d5      	str	r5, [r2, #12]
 8007cb0:	3220      	adds	r2, #32
 8007cb2:	e7cc      	b.n	8007c4e <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x80U;
 8007cb4:	2380      	movs	r3, #128	; 0x80
 8007cb6:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007cb8:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8007cbc:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007cbe:	4b03      	ldr	r3, [pc, #12]	; (8007ccc <USB_HostInit+0xcc>)
 8007cc0:	e7dd      	b.n	8007c7e <USB_HostInit+0x7e>
 8007cc2:	bf00      	nop
 8007cc4:	00e00300 	.word	0x00e00300
 8007cc8:	a3200008 	.word	0xa3200008
 8007ccc:	004000e0 	.word	0x004000e0

08007cd0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd0:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8007cd6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8007cda:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007cdc:	9801      	ldr	r0, [sp, #4]
}
 8007cde:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8007ce2:	b002      	add	sp, #8
 8007ce4:	4770      	bx	lr

08007ce6 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ce6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007cea:	6880      	ldr	r0, [r0, #8]
}
 8007cec:	b280      	uxth	r0, r0
 8007cee:	4770      	bx	lr

08007cf0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8007cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007cf4:	eb00 1741 	add.w	r7, r0, r1, lsl #5
{
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	f89d 601c 	ldrb.w	r6, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007d02:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8007d06:	fa4f f882 	sxtb.w	r8, r2
 8007d0a:	60a0      	str	r0, [r4, #8]
 8007d0c:	f505 6e80 	add.w	lr, r5, #1024	; 0x400
 8007d10:	f001 0c0f 	and.w	ip, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007d14:	2e03      	cmp	r6, #3
 8007d16:	d870      	bhi.n	8007dfa <USB_HC_Init+0x10a>
 8007d18:	e8df f006 	tbb	[pc, r6]
 8007d1c:	50026502 	.word	0x50026502
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d20:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007d24:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d28:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8007d2a:	da03      	bge.n	8007d34 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007d2c:	68e1      	ldr	r1, [r4, #12]
 8007d2e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007d32:	e005      	b.n	8007d40 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d34:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8007d36:	05c9      	lsls	r1, r1, #23
 8007d38:	d546      	bpl.n	8007dc8 <USB_HC_Init+0xd8>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007d3a:	68e1      	ldr	r1, [r4, #12]
 8007d3c:	f041 0160 	orr.w	r1, r1, #96	; 0x60
  HAL_StatusTypeDef ret = HAL_OK;
 8007d40:	2000      	movs	r0, #0
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007d42:	60e1      	str	r1, [r4, #12]
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007d44:	2101      	movs	r1, #1
 8007d46:	f8de 4018 	ldr.w	r4, [lr, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007d4a:	f1b8 0f00 	cmp.w	r8, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007d4e:	fa01 f10c 	lsl.w	r1, r1, ip
 8007d52:	ea41 0104 	orr.w	r1, r1, r4
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007d56:	bfac      	ite	ge
 8007d58:	2400      	movge	r4, #0
 8007d5a:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007d5e:	f8ce 1018 	str.w	r1, [lr, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007d62:	69a9      	ldr	r1, [r5, #24]
 8007d64:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8007d68:	61a9      	str	r1, [r5, #24]
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d6a:	059b      	lsls	r3, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d6c:	f8bd 5020 	ldrh.w	r5, [sp, #32]
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d70:	02d2      	lsls	r2, r2, #11
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d72:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d76:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d7a:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d7e:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d82:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d84:	ea43 0305 	orr.w	r3, r3, r5
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d88:	bf14      	ite	ne
 8007d8a:	2100      	movne	r1, #0
 8007d8c:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d90:	4313      	orrs	r3, r2
 8007d92:	04b2      	lsls	r2, r6, #18

  if (ep_type == EP_TYPE_INTR)
 8007d94:	2e03      	cmp	r6, #3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d96:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8007d9a:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d9e:	ea43 0304 	orr.w	r3, r3, r4
 8007da2:	ea43 0301 	orr.w	r3, r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007da6:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8007daa:	d105      	bne.n	8007db8 <USB_HC_Init+0xc8>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007dac:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8007db0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007db4:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
}
 8007db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007dbc:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8007dc0:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007dc4:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8007dc6:	dbb1      	blt.n	8007d2c <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007dc8:	2101      	movs	r1, #1
 8007dca:	f8de 0018 	ldr.w	r0, [lr, #24]
 8007dce:	fa01 f10c 	lsl.w	r1, r1, ip
 8007dd2:	4301      	orrs	r1, r0
  HAL_StatusTypeDef ret = HAL_OK;
 8007dd4:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007dd6:	f8ce 1018 	str.w	r1, [lr, #24]
    HCcharEpDir = 0U;
 8007dda:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ddc:	69a9      	ldr	r1, [r5, #24]
 8007dde:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8007de2:	61a9      	str	r1, [r5, #24]
 8007de4:	e7c1      	b.n	8007d6a <USB_HC_Init+0x7a>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007de6:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8007dea:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007dee:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8007df0:	daea      	bge.n	8007dc8 <USB_HC_Init+0xd8>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007df2:	68e1      	ldr	r1, [r4, #12]
 8007df4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007df8:	e7a2      	b.n	8007d40 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	e7a2      	b.n	8007d44 <USB_HC_Init+0x54>

08007dfe <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007dfe:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007e02:	6940      	ldr	r0, [r0, #20]
}
 8007e04:	b280      	uxth	r0, r0
 8007e06:	4770      	bx	lr

08007e08 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007e08:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8007e0c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8007e10:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e14:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e18:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8007e1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e20:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e24:	d11e      	bne.n	8007e64 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007e28:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e2c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e30:	d137      	bne.n	8007ea2 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e36:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e3a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8007e3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e42:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007e46:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8007e4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e4e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8007e52:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8007e56:	3b01      	subs	r3, #1
 8007e58:	d002      	beq.n	8007e60 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e5a:	6811      	ldr	r1, [r2, #0]
 8007e5c:	2900      	cmp	r1, #0
 8007e5e:	dbfa      	blt.n	8007e56 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8007e60:	2000      	movs	r0, #0
 8007e62:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e64:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8007e68:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e6c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e70:	d117      	bne.n	8007ea2 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e76:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e7a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8007e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e82:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007e86:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8007e8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e8e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8007e92:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8007e96:	3b01      	subs	r3, #1
 8007e98:	d0e2      	beq.n	8007e60 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e9a:	6811      	ldr	r1, [r2, #0]
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	dbfa      	blt.n	8007e96 <USB_HC_Halt+0x8e>
 8007ea0:	e7de      	b.n	8007e60 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ea6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8007eaa:	e7d9      	b.n	8007e60 <USB_HC_Halt+0x58>

08007eac <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007eac:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8007eb0:	4a06      	ldr	r2, [pc, #24]	; (8007ecc <USB_DoPing+0x20>)
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
  tmpreg |= USB_OTG_HCCHAR_CHENA;
  USBx_HC(chnum)->HCCHAR = tmpreg;

  return HAL_OK;
}
 8007eb2:	2000      	movs	r0, #0
  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007eb4:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007eb8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ebc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007ec4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	80080000 	.word	0x80080000

08007ed0 <USB_HC_StartXfer>:
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007ed0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007ed2:	05db      	lsls	r3, r3, #23
{
 8007ed4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007ed8:	4616      	mov	r6, r2
 8007eda:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007edc:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007ede:	d517      	bpl.n	8007f10 <USB_HC_StartXfer+0x40>
 8007ee0:	790d      	ldrb	r5, [r1, #4]
 8007ee2:	b9ad      	cbnz	r5, 8007f10 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007ee4:	b94e      	cbnz	r6, 8007efa <USB_HC_StartXfer+0x2a>
 8007ee6:	794b      	ldrb	r3, [r1, #5]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d111      	bne.n	8007f10 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8007eec:	4611      	mov	r1, r2
 8007eee:	f7ff ffdd 	bl	8007eac <USB_DoPing>
}
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	b002      	add	sp, #8
 8007ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8007efa:	2e01      	cmp	r6, #1
 8007efc:	d108      	bne.n	8007f10 <USB_HC_StartXfer+0x40>
 8007efe:	eb00 1342 	add.w	r3, r0, r2, lsl #5
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007f02:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8007f06:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8007f0a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8007f0e:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8007f10:	6908      	ldr	r0, [r1, #16]
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d062      	beq.n	8007fdc <USB_HC_StartXfer+0x10c>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007f16:	890b      	ldrh	r3, [r1, #8]
 8007f18:	3801      	subs	r0, #1
 8007f1a:	4418      	add	r0, r3
 8007f1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8007f20:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8007f22:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8007f26:	d903      	bls.n	8007f30 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007f28:	021b      	lsls	r3, r3, #8
      num_packets = max_hc_pkt_count;
 8007f2a:	f44f 7080 	mov.w	r0, #256	; 0x100
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007f2e:	610b      	str	r3, [r1, #16]
  if (hc->ep_is_in != 0U)
 8007f30:	78cf      	ldrb	r7, [r1, #3]
 8007f32:	b117      	cbz	r7, 8007f3a <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007f34:	890b      	ldrh	r3, [r1, #8]
 8007f36:	4343      	muls	r3, r0
 8007f38:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007f3a:	f891 c00a 	ldrb.w	ip, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f3e:	eb04 1542 	add.w	r5, r4, r2, lsl #5
 8007f42:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007f44:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f48:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007f4c:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f50:	ea4c 0c08 	orr.w	ip, ip, r8
 8007f54:	ea4c 40c0 	orr.w	r0, ip, r0, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f58:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8007f5c:	b116      	cbz	r6, 8007f64 <USB_HC_StartXfer+0x94>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f5e:	68c8      	ldr	r0, [r1, #12]
 8007f60:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f64:	f504 6c80 	add.w	ip, r4, #1024	; 0x400
 8007f68:	f8dc 0008 	ldr.w	r0, [ip, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f6c:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f70:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f72:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f76:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f78:	f8c5 e500 	str.w	lr, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f7c:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8007f80:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 8007f84:	ea40 000e 	orr.w	r0, r0, lr
 8007f88:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007f8c:	4825      	ldr	r0, [pc, #148]	; (8008024 <USB_HC_StartXfer+0x154>)
 8007f8e:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 8007f92:	f8c0 e000 	str.w	lr, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f96:	f8d0 e000 	ldr.w	lr, [r0]
 8007f9a:	f02e 4e80 	bic.w	lr, lr, #1073741824	; 0x40000000
 8007f9e:	f8c0 e000 	str.w	lr, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007fa2:	f8d0 e000 	ldr.w	lr, [r0]
  if (hc->ep_is_in != 0U)
 8007fa6:	b1df      	cbz	r7, 8007fe0 <USB_HC_StartXfer+0x110>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007fa8:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007fac:	f8c0 e000 	str.w	lr, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007fb0:	f8d0 e000 	ldr.w	lr, [r0]
 8007fb4:	f04e 4e00 	orr.w	lr, lr, #2147483648	; 0x80000000
 8007fb8:	f8c0 e000 	str.w	lr, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007fbc:	6800      	ldr	r0, [r0, #0]
 8007fbe:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8007fc2:	2e00      	cmp	r6, #0
 8007fc4:	d195      	bne.n	8007ef2 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007fc6:	2f00      	cmp	r7, #0
 8007fc8:	d193      	bne.n	8007ef2 <USB_HC_StartXfer+0x22>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d091      	beq.n	8007ef2 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8007fce:	79c8      	ldrb	r0, [r1, #7]
 8007fd0:	2803      	cmp	r0, #3
 8007fd2:	d813      	bhi.n	8007ffc <USB_HC_StartXfer+0x12c>
 8007fd4:	e8df f000 	tbb	[pc, r0]
 8007fd8:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8007fdc:	2001      	movs	r0, #1
 8007fde:	e7a7      	b.n	8007f30 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007fe0:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 8007fe4:	e7e2      	b.n	8007fac <USB_HC_StartXfer+0xdc>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007fe6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007fe8:	1cd8      	adds	r0, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007fea:	b2ad      	uxth	r5, r5
 8007fec:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8007ff0:	4285      	cmp	r5, r0
 8007ff2:	d203      	bcs.n	8007ffc <USB_HC_StartXfer+0x12c>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007ff4:	69a0      	ldr	r0, [r4, #24]
 8007ff6:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007ffa:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	9000      	str	r0, [sp, #0]
 8008002:	4620      	mov	r0, r4
 8008004:	68c9      	ldr	r1, [r1, #12]
 8008006:	f7ff fd75 	bl	8007af4 <USB_WritePacket>
 800800a:	e772      	b.n	8007ef2 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800800c:	f8dc 5010 	ldr.w	r5, [ip, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008010:	1cd8      	adds	r0, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008012:	b2ad      	uxth	r5, r5
 8008014:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8008018:	4285      	cmp	r5, r0
 800801a:	d2ef      	bcs.n	8007ffc <USB_HC_StartXfer+0x12c>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800801c:	69a0      	ldr	r0, [r4, #24]
 800801e:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8008022:	e7ea      	b.n	8007ffa <USB_HC_StartXfer+0x12a>
 8008024:	20006f14 	.word	0x20006f14

08008028 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008028:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800802a:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800802c:	f023 0301 	bic.w	r3, r3, #1
{
 8008030:	b510      	push	{r4, lr}
 8008032:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008034:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008036:	f7ff fd3b 	bl	8007ab0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800803a:	4620      	mov	r0, r4
 800803c:	f7ff fd4a 	bl	8007ad4 <USB_FlushRxFifo>
 8008040:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8008044:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8008048:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800804a:	6811      	ldr	r1, [r2, #0]
 800804c:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008050:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8008054:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8008058:	4282      	cmp	r2, r0
 800805a:	d1f6      	bne.n	800804a <USB_StopHost+0x22>
  uint32_t count = 0U;
 800805c:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800805e:	6819      	ldr	r1, [r3, #0]
 8008060:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008064:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8008068:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 800806a:	3001      	adds	r0, #1
 800806c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008070:	d802      	bhi.n	8008078 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008072:	6819      	ldr	r1, [r3, #0]
 8008074:	2900      	cmp	r1, #0
 8008076:	dbf8      	blt.n	800806a <USB_StopHost+0x42>
 8008078:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 800807a:	429a      	cmp	r2, r3
 800807c:	d1ef      	bne.n	800805e <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800807e:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8008082:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008084:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008088:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800808a:	68a3      	ldr	r3, [r4, #8]
 800808c:	f043 0301 	orr.w	r3, r3, #1
 8008090:	60a3      	str	r3, [r4, #8]
}
 8008092:	bd10      	pop	{r4, pc}

08008094 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008094:	4b03      	ldr	r3, [pc, #12]	; (80080a4 <disk_status+0x10>)
 8008096:	181a      	adds	r2, r3, r0
 8008098:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	7b10      	ldrb	r0, [r2, #12]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	4718      	bx	r3
 80080a4:	20006f44 	.word	0x20006f44

080080a8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80080a8:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <disk_initialize+0x1c>)
 80080aa:	5c1a      	ldrb	r2, [r3, r0]
 80080ac:	b942      	cbnz	r2, 80080c0 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 80080ae:	2201      	movs	r2, #1
 80080b0:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80080b2:	181a      	adds	r2, r3, r0
 80080b4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80080b8:	7b10      	ldrb	r0, [r2, #12]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4718      	bx	r3
  }
  return stat;
}
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	20006f44 	.word	0x20006f44

080080c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80080c8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80080ca:	4c05      	ldr	r4, [pc, #20]	; (80080e0 <disk_read+0x18>)
 80080cc:	1825      	adds	r5, r4, r0
 80080ce:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80080d2:	6860      	ldr	r0, [r4, #4]
 80080d4:	6884      	ldr	r4, [r0, #8]
 80080d6:	7b28      	ldrb	r0, [r5, #12]
 80080d8:	46a4      	mov	ip, r4
  return res;
}
 80080da:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80080dc:	4760      	bx	ip
 80080de:	bf00      	nop
 80080e0:	20006f44 	.word	0x20006f44

080080e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80080e4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80080e6:	4c05      	ldr	r4, [pc, #20]	; (80080fc <disk_write+0x18>)
 80080e8:	1825      	adds	r5, r4, r0
 80080ea:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80080ee:	6860      	ldr	r0, [r4, #4]
 80080f0:	68c4      	ldr	r4, [r0, #12]
 80080f2:	7b28      	ldrb	r0, [r5, #12]
 80080f4:	46a4      	mov	ip, r4
  return res;
}
 80080f6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80080f8:	4760      	bx	ip
 80080fa:	bf00      	nop
 80080fc:	20006f44 	.word	0x20006f44

08008100 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008100:	4b05      	ldr	r3, [pc, #20]	; (8008118 <disk_ioctl+0x18>)
{
 8008102:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008104:	181c      	adds	r4, r3, r0
 8008106:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	7b20      	ldrb	r0, [r4, #12]
 800810e:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8008110:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008114:	4718      	bx	r3
 8008116:	bf00      	nop
 8008118:	20006f44 	.word	0x20006f44

0800811c <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 800811c:	2000      	movs	r0, #0
 800811e:	4770      	bx	lr

08008120 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8008120:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8008122:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8008124:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8008126:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 800812a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800812e:	4770      	bx	lr

08008130 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8008130:	0a0b      	lsrs	r3, r1, #8
 8008132:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008134:	7043      	strb	r3, [r0, #1]
 8008136:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008138:	0e09      	lsrs	r1, r1, #24
 800813a:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800813c:	70c1      	strb	r1, [r0, #3]
}
 800813e:	4770      	bx	lr

08008140 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008140:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8008142:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8008146:	4290      	cmp	r0, r2
 8008148:	d1fb      	bne.n	8008142 <mem_set+0x2>
}
 800814a:	4770      	bx	lr

0800814c <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800814c:	4a1b      	ldr	r2, [pc, #108]	; (80081bc <chk_lock+0x70>)
 800814e:	6813      	ldr	r3, [r2, #0]
{
 8008150:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8008152:	b163      	cbz	r3, 800816e <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008154:	6804      	ldr	r4, [r0, #0]
 8008156:	429c      	cmp	r4, r3
 8008158:	d107      	bne.n	800816a <chk_lock+0x1e>
 800815a:	6854      	ldr	r4, [r2, #4]
 800815c:	6883      	ldr	r3, [r0, #8]
 800815e:	429c      	cmp	r4, r3
 8008160:	d103      	bne.n	800816a <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 8008162:	6894      	ldr	r4, [r2, #8]
 8008164:	6943      	ldr	r3, [r0, #20]
 8008166:	429c      	cmp	r4, r3
 8008168:	d020      	beq.n	80081ac <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800816a:	2400      	movs	r4, #0
 800816c:	e000      	b.n	8008170 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800816e:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8008170:	6913      	ldr	r3, [r2, #16]
 8008172:	b1cb      	cbz	r3, 80081a8 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008174:	6805      	ldr	r5, [r0, #0]
 8008176:	42ab      	cmp	r3, r5
 8008178:	d107      	bne.n	800818a <chk_lock+0x3e>
 800817a:	6955      	ldr	r5, [r2, #20]
 800817c:	6883      	ldr	r3, [r0, #8]
 800817e:	429d      	cmp	r5, r3
 8008180:	d103      	bne.n	800818a <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 8008182:	6995      	ldr	r5, [r2, #24]
 8008184:	6943      	ldr	r3, [r0, #20]
 8008186:	429d      	cmp	r5, r3
 8008188:	d015      	beq.n	80081b6 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800818a:	b96c      	cbnz	r4, 80081a8 <chk_lock+0x5c>
 800818c:	2902      	cmp	r1, #2
 800818e:	bf0c      	ite	eq
 8008190:	2000      	moveq	r0, #0
 8008192:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8008194:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008196:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800819a:	8993      	ldrh	r3, [r2, #12]
 800819c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a0:	bf14      	ite	ne
 80081a2:	2000      	movne	r0, #0
 80081a4:	2010      	moveq	r0, #16
 80081a6:	e7f5      	b.n	8008194 <chk_lock+0x48>
 80081a8:	2000      	movs	r0, #0
 80081aa:	e7f3      	b.n	8008194 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80081ac:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80081ae:	2900      	cmp	r1, #0
 80081b0:	d0f1      	beq.n	8008196 <chk_lock+0x4a>
 80081b2:	2010      	movs	r0, #16
 80081b4:	e7ee      	b.n	8008194 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80081b6:	2301      	movs	r3, #1
 80081b8:	e7f9      	b.n	80081ae <chk_lock+0x62>
 80081ba:	bf00      	nop
 80081bc:	20006f18 	.word	0x20006f18

080081c0 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 80081c0:	4a1e      	ldr	r2, [pc, #120]	; (800823c <inc_lock+0x7c>)
{
 80081c2:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 80081c4:	6813      	ldr	r3, [r2, #0]
 80081c6:	6805      	ldr	r5, [r0, #0]
 80081c8:	429d      	cmp	r5, r3
 80081ca:	d107      	bne.n	80081dc <inc_lock+0x1c>
 80081cc:	6856      	ldr	r6, [r2, #4]
 80081ce:	6884      	ldr	r4, [r0, #8]
 80081d0:	42a6      	cmp	r6, r4
 80081d2:	d103      	bne.n	80081dc <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 80081d4:	6946      	ldr	r6, [r0, #20]
 80081d6:	6894      	ldr	r4, [r2, #8]
 80081d8:	42a6      	cmp	r6, r4
 80081da:	d021      	beq.n	8008220 <inc_lock+0x60>
		if (Files[i].fs == dp->obj.fs &&
 80081dc:	6914      	ldr	r4, [r2, #16]
 80081de:	42ac      	cmp	r4, r5
 80081e0:	d107      	bne.n	80081f2 <inc_lock+0x32>
 80081e2:	6957      	ldr	r7, [r2, #20]
 80081e4:	6886      	ldr	r6, [r0, #8]
 80081e6:	42b7      	cmp	r7, r6
 80081e8:	d103      	bne.n	80081f2 <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 80081ea:	6997      	ldr	r7, [r2, #24]
 80081ec:	6946      	ldr	r6, [r0, #20]
 80081ee:	42b7      	cmp	r7, r6
 80081f0:	d020      	beq.n	8008234 <inc_lock+0x74>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80081f2:	b10b      	cbz	r3, 80081f8 <inc_lock+0x38>
 80081f4:	bb04      	cbnz	r4, 8008238 <inc_lock+0x78>
 80081f6:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 80081f8:	011e      	lsls	r6, r3, #4
 80081fa:	1994      	adds	r4, r2, r6
 80081fc:	5195      	str	r5, [r2, r6]
		Files[i].clu = dp->obj.sclust;
 80081fe:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8008200:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 8008202:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 8008204:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8008206:	2000      	movs	r0, #0
 8008208:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800820a:	b981      	cbnz	r1, 800822e <inc_lock+0x6e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800820c:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8008210:	8989      	ldrh	r1, [r1, #12]
 8008212:	3101      	adds	r1, #1
 8008214:	b289      	uxth	r1, r1
 8008216:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 800821a:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800821c:	8191      	strh	r1, [r2, #12]
}
 800821e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008220:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008222:	2900      	cmp	r1, #0
 8008224:	d0f2      	beq.n	800820c <inc_lock+0x4c>
 8008226:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800822a:	8989      	ldrh	r1, [r1, #12]
 800822c:	b921      	cbnz	r1, 8008238 <inc_lock+0x78>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800822e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008232:	e7f0      	b.n	8008216 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008234:	2301      	movs	r3, #1
 8008236:	e7f4      	b.n	8008222 <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008238:	2000      	movs	r0, #0
 800823a:	e7f0      	b.n	800821e <inc_lock+0x5e>
 800823c:	20006f18 	.word	0x20006f18

08008240 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008240:	3801      	subs	r0, #1
 8008242:	2801      	cmp	r0, #1
 8008244:	d814      	bhi.n	8008270 <dec_lock+0x30>
		n = Files[i].ctr;
 8008246:	490b      	ldr	r1, [pc, #44]	; (8008274 <dec_lock+0x34>)
 8008248:	0102      	lsls	r2, r0, #4
 800824a:	1888      	adds	r0, r1, r2
 800824c:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800824e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008252:	d104      	bne.n	800825e <dec_lock+0x1e>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8008254:	2300      	movs	r3, #0
 8008256:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008258:	2000      	movs	r0, #0
 800825a:	5088      	str	r0, [r1, r2]
 800825c:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0fa      	beq.n	8008258 <dec_lock+0x18>
 8008262:	3b01      	subs	r3, #1
 8008264:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8008266:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0f5      	beq.n	8008258 <dec_lock+0x18>
		res = FR_OK;
 800826c:	2000      	movs	r0, #0
 800826e:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008270:	2002      	movs	r0, #2
	}
	return res;
}
 8008272:	4770      	bx	lr
 8008274:	20006f18 	.word	0x20006f18

08008278 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008278:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 800827a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800827c:	3b02      	subs	r3, #2
 800827e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8008280:	bf83      	ittte	hi
 8008282:	8943      	ldrhhi	r3, [r0, #10]
 8008284:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 8008286:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800828a:	2000      	movls	r0, #0
}
 800828c:	4770      	bx	lr

0800828e <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800828e:	6802      	ldr	r2, [r0, #0]
 8008290:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008292:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008294:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008296:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008298:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800829c:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800829e:	b130      	cbz	r0, 80082ae <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 80082a0:	4281      	cmp	r1, r0
 80082a2:	d302      	bcc.n	80082aa <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 80082a4:	1a09      	subs	r1, r1, r0
 80082a6:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80082a8:	e7f8      	b.n	800829c <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 80082aa:	6858      	ldr	r0, [r3, #4]
 80082ac:	4408      	add	r0, r1
}
 80082ae:	4770      	bx	lr

080082b0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80082b0:	4602      	mov	r2, r0
 80082b2:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 80082b6:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80082b8:	01c3      	lsls	r3, r0, #7
 80082ba:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 80082be:	f812 0b01 	ldrb.w	r0, [r2], #1
 80082c2:	fa50 f383 	uxtab	r3, r0, r3
	} while (--n);
 80082c6:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80082c8:	b2d8      	uxtb	r0, r3
	} while (--n);
 80082ca:	d1f5      	bne.n	80082b8 <sum_sfn+0x8>
	return sum;
}
 80082cc:	4770      	bx	lr

080082ce <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80082ce:	6803      	ldr	r3, [r0, #0]
{
 80082d0:	b510      	push	{r4, lr}
 80082d2:	4604      	mov	r4, r0
	if (*path) {	/* If the pointer is not a null */
 80082d4:	b153      	cbz	r3, 80082ec <get_ldnumber+0x1e>
 80082d6:	4619      	mov	r1, r3
 80082d8:	460a      	mov	r2, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80082da:	f811 0b01 	ldrb.w	r0, [r1], #1
 80082de:	281f      	cmp	r0, #31
 80082e0:	d910      	bls.n	8008304 <get_ldnumber+0x36>
 80082e2:	283a      	cmp	r0, #58	; 0x3a
 80082e4:	d1f8      	bne.n	80082d8 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 80082e6:	1c59      	adds	r1, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80082e8:	428a      	cmp	r2, r1
 80082ea:	d002      	beq.n	80082f2 <get_ldnumber+0x24>
	int vol = -1;
 80082ec:	f04f 30ff 	mov.w	r0, #4294967295
 80082f0:	e007      	b.n	8008302 <get_ldnumber+0x34>
			i = *tp++ - '0';
 80082f2:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80082f4:	3b30      	subs	r3, #48	; 0x30
 80082f6:	b2d9      	uxtb	r1, r3
 80082f8:	2901      	cmp	r1, #1
 80082fa:	d8f7      	bhi.n	80082ec <get_ldnumber+0x1e>
					vol = (int)i;
					*path = ++tt;
 80082fc:	3201      	adds	r2, #1
			i = *tp++ - '0';
 80082fe:	4618      	mov	r0, r3
					*path = ++tt;
 8008300:	6022      	str	r2, [r4, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8008302:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 8008304:	2000      	movs	r0, #0
 8008306:	e7fc      	b.n	8008302 <get_ldnumber+0x34>

08008308 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800830c:	4604      	mov	r4, r0
 800830e:	b918      	cbnz	r0, 8008318 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8008310:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008312:	2300      	movs	r3, #0
 8008314:	602b      	str	r3, [r5, #0]
	return res;
}
 8008316:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008318:	6803      	ldr	r3, [r0, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d0f8      	beq.n	8008310 <validate+0x8>
 800831e:	781a      	ldrb	r2, [r3, #0]
 8008320:	2a00      	cmp	r2, #0
 8008322:	d0f5      	beq.n	8008310 <validate+0x8>
 8008324:	8881      	ldrh	r1, [r0, #4]
 8008326:	88da      	ldrh	r2, [r3, #6]
 8008328:	4291      	cmp	r1, r2
 800832a:	d1f1      	bne.n	8008310 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800832c:	7858      	ldrb	r0, [r3, #1]
 800832e:	f7ff feb1 	bl	8008094 <disk_status>
 8008332:	f010 0001 	ands.w	r0, r0, #1
 8008336:	d1eb      	bne.n	8008310 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	e7eb      	b.n	8008314 <validate+0xc>

0800833c <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800833c:	3801      	subs	r0, #1
 800833e:	440a      	add	r2, r1
			*d++ = *s++;
 8008340:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8008344:	4291      	cmp	r1, r2
			*d++ = *s++;
 8008346:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800834a:	d1f9      	bne.n	8008340 <mem_cpy.part.0+0x4>
}
 800834c:	4770      	bx	lr

0800834e <ld_clust.isra.1>:
	if (fs->fs_type == FS_FAT32) {
 800834e:	2803      	cmp	r0, #3
	rv = rv << 8 | ptr[0];
 8008350:	7eca      	ldrb	r2, [r1, #27]
 8008352:	7e8b      	ldrb	r3, [r1, #26]
 8008354:	bf08      	it	eq
 8008356:	7d48      	ldrbeq	r0, [r1, #21]
	cl = ld_word(dir + DIR_FstClusLO);
 8008358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800835c:	bf02      	ittt	eq
 800835e:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008360:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8008364:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8008368:	4618      	mov	r0, r3
 800836a:	4770      	bx	lr

0800836c <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 800836c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008370:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8008372:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8008374:	7803      	ldrb	r3, [r0, #0]
 8008376:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008378:	bf01      	itttt	eq
 800837a:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800837c:	750a      	strbeq	r2, [r1, #20]
 800837e:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8008380:	754a      	strbeq	r2, [r1, #21]
}
 8008382:	4770      	bx	lr

08008384 <sync_window.part.3>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8008386:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008388:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800838c:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800838e:	2301      	movs	r3, #1
 8008390:	462a      	mov	r2, r5
 8008392:	4639      	mov	r1, r7
 8008394:	7840      	ldrb	r0, [r0, #1]
 8008396:	f7ff fea5 	bl	80080e4 <disk_write>
 800839a:	b9a0      	cbnz	r0, 80083c6 <sync_window.part.3+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800839c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800839e:	69e2      	ldr	r2, [r4, #28]
 80083a0:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 80083a2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d301      	bcc.n	80083ac <sync_window.part.3+0x28>
	FRESULT res = FR_OK;
 80083a8:	2000      	movs	r0, #0
}
 80083aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80083ac:	78a6      	ldrb	r6, [r4, #2]
 80083ae:	2e01      	cmp	r6, #1
 80083b0:	d9fa      	bls.n	80083a8 <sync_window.part.3+0x24>
					wsect += fs->fsize;
 80083b2:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 80083b4:	4639      	mov	r1, r7
 80083b6:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80083b8:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 80083ba:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80083bc:	2301      	movs	r3, #1
 80083be:	462a      	mov	r2, r5
 80083c0:	f7ff fe90 	bl	80080e4 <disk_write>
 80083c4:	e7f3      	b.n	80083ae <sync_window.part.3+0x2a>
			res = FR_DISK_ERR;
 80083c6:	2001      	movs	r0, #1
 80083c8:	e7ef      	b.n	80083aa <sync_window.part.3+0x26>

080083ca <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80083ca:	78c3      	ldrb	r3, [r0, #3]
 80083cc:	b10b      	cbz	r3, 80083d2 <sync_window+0x8>
 80083ce:	f7ff bfd9 	b.w	8008384 <sync_window.part.3>
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	4770      	bx	lr

080083d6 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 80083d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80083d8:	428b      	cmp	r3, r1
{
 80083da:	b570      	push	{r4, r5, r6, lr}
 80083dc:	4606      	mov	r6, r0
 80083de:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80083e0:	d012      	beq.n	8008408 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 80083e2:	f7ff fff2 	bl	80083ca <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80083e6:	4604      	mov	r4, r0
 80083e8:	b960      	cbnz	r0, 8008404 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80083ea:	462a      	mov	r2, r5
 80083ec:	2301      	movs	r3, #1
 80083ee:	f106 0134 	add.w	r1, r6, #52	; 0x34
 80083f2:	7870      	ldrb	r0, [r6, #1]
 80083f4:	f7ff fe68 	bl	80080c8 <disk_read>
 80083f8:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 80083fa:	bf1c      	itt	ne
 80083fc:	f04f 35ff 	movne.w	r5, #4294967295
 8008400:	2401      	movne	r4, #1
			fs->winsect = sector;
 8008402:	6335      	str	r5, [r6, #48]	; 0x30
}
 8008404:	4620      	mov	r0, r4
 8008406:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8008408:	2400      	movs	r4, #0
 800840a:	e7fb      	b.n	8008404 <move_window+0x2e>

0800840c <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800840c:	2300      	movs	r3, #0
{
 800840e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008410:	70c3      	strb	r3, [r0, #3]
 8008412:	f04f 33ff 	mov.w	r3, #4294967295
{
 8008416:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008418:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800841a:	f7ff ffdc 	bl	80083d6 <move_window>
 800841e:	bb30      	cbnz	r0, 800846e <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8008420:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8008424:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8008428:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800842c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008430:	4293      	cmp	r3, r2
 8008432:	d11e      	bne.n	8008472 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008434:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008438:	2be9      	cmp	r3, #233	; 0xe9
 800843a:	d005      	beq.n	8008448 <check_fs+0x3c>
 800843c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800843e:	4a10      	ldr	r2, [pc, #64]	; (8008480 <check_fs+0x74>)
 8008440:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008444:	4293      	cmp	r3, r2
 8008446:	d116      	bne.n	8008476 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008448:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800844c:	f7ff fe68 	bl	8008120 <ld_dword>
 8008450:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <check_fs+0x78>)
 8008452:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008456:	4298      	cmp	r0, r3
 8008458:	d00f      	beq.n	800847a <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800845a:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800845e:	f7ff fe5f 	bl	8008120 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008462:	4b09      	ldr	r3, [pc, #36]	; (8008488 <check_fs+0x7c>)
 8008464:	4298      	cmp	r0, r3
 8008466:	bf14      	ite	ne
 8008468:	2002      	movne	r0, #2
 800846a:	2000      	moveq	r0, #0
}
 800846c:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800846e:	2004      	movs	r0, #4
 8008470:	e7fc      	b.n	800846c <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008472:	2003      	movs	r0, #3
 8008474:	e7fa      	b.n	800846c <check_fs+0x60>
	return 2;
 8008476:	2002      	movs	r0, #2
 8008478:	e7f8      	b.n	800846c <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800847a:	2000      	movs	r0, #0
 800847c:	e7f6      	b.n	800846c <check_fs+0x60>
 800847e:	bf00      	nop
 8008480:	009000eb 	.word	0x009000eb
 8008484:	00544146 	.word	0x00544146
 8008488:	33544146 	.word	0x33544146

0800848c <find_volume>:
{
 800848c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	*rfs = 0;
 8008490:	2300      	movs	r3, #0
{
 8008492:	4688      	mov	r8, r1
 8008494:	4615      	mov	r5, r2
	*rfs = 0;
 8008496:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8008498:	f7ff ff19 	bl	80082ce <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800849c:	1e07      	subs	r7, r0, #0
 800849e:	f2c0 8143 	blt.w	8008728 <find_volume+0x29c>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80084a2:	4ea5      	ldr	r6, [pc, #660]	; (8008738 <find_volume+0x2ac>)
 80084a4:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 80084a8:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80084aa:	2c00      	cmp	r4, #0
 80084ac:	f000 813e 	beq.w	800872c <find_volume+0x2a0>
	*rfs = fs;							/* Return pointer to the file system object */
 80084b0:	f8c8 4000 	str.w	r4, [r8]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80084b4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80084b8:	7823      	ldrb	r3, [r4, #0]
 80084ba:	b173      	cbz	r3, 80084da <find_volume+0x4e>
		stat = disk_status(fs->drv);
 80084bc:	7860      	ldrb	r0, [r4, #1]
 80084be:	f7ff fde9 	bl	8008094 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80084c2:	07c1      	lsls	r1, r0, #31
 80084c4:	d409      	bmi.n	80084da <find_volume+0x4e>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80084c6:	2d00      	cmp	r5, #0
 80084c8:	f000 8132 	beq.w	8008730 <find_volume+0x2a4>
 80084cc:	f010 0004 	ands.w	r0, r0, #4
 80084d0:	d000      	beq.n	80084d4 <find_volume+0x48>
				return FR_WRITE_PROTECTED;
 80084d2:	200a      	movs	r0, #10
}
 80084d4:	b004      	add	sp, #16
 80084d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80084da:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80084dc:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
 80084de:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80084e0:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80084e2:	f7ff fde1 	bl	80080a8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80084e6:	07c2      	lsls	r2, r0, #31
 80084e8:	f100 8124 	bmi.w	8008734 <find_volume+0x2a8>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80084ec:	b10d      	cbz	r5, 80084f2 <find_volume+0x66>
 80084ee:	0743      	lsls	r3, r0, #29
 80084f0:	d4ef      	bmi.n	80084d2 <find_volume+0x46>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80084f2:	2100      	movs	r1, #0
 80084f4:	4620      	mov	r0, r4
 80084f6:	f7ff ff89 	bl	800840c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80084fa:	2802      	cmp	r0, #2
 80084fc:	f040 80fa 	bne.w	80086f4 <find_volume+0x268>
 8008500:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008504:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008506:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 800850a:	b110      	cbz	r0, 8008512 <find_volume+0x86>
 800850c:	4628      	mov	r0, r5
 800850e:	f7ff fe07 	bl	8008120 <ld_dword>
 8008512:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008516:	3101      	adds	r1, #1
 8008518:	3510      	adds	r5, #16
 800851a:	2904      	cmp	r1, #4
 800851c:	d1f3      	bne.n	8008506 <find_volume+0x7a>
 800851e:	2500      	movs	r5, #0
			bsect = br[i];
 8008520:	f85d 7025 	ldr.w	r7, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008524:	2f00      	cmp	r7, #0
 8008526:	f000 80dc 	beq.w	80086e2 <find_volume+0x256>
 800852a:	4639      	mov	r1, r7
 800852c:	4620      	mov	r0, r4
 800852e:	f7ff ff6d 	bl	800840c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008532:	2801      	cmp	r0, #1
 8008534:	f200 80d6 	bhi.w	80086e4 <find_volume+0x258>
	rv = rv << 8 | ptr[0];
 8008538:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800853c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8008540:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008548:	f040 80d8 	bne.w	80086fc <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 800854c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8008550:	f894 504a 	ldrb.w	r5, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008554:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 8008558:	d104      	bne.n	8008564 <find_volume+0xd8>
 800855a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800855e:	f7ff fddf 	bl	8008120 <ld_dword>
 8008562:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008564:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8008568:	61e5      	str	r5, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800856a:	f10a 33ff 	add.w	r3, sl, #4294967295
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800856e:	f884 a002 	strb.w	sl, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008572:	2b01      	cmp	r3, #1
 8008574:	f200 80c2 	bhi.w	80086fc <find_volume+0x270>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008578:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 800857c:	fa1f f389 	uxth.w	r3, r9
 8008580:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 80ba 	beq.w	80086fc <find_volume+0x270>
 8008588:	f109 33ff 	add.w	r3, r9, #4294967295
 800858c:	ea13 0f09 	tst.w	r3, r9
 8008590:	f040 80b4 	bne.w	80086fc <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 8008594:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008598:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 800859c:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80085a0:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80085a4:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80085a8:	f040 80a8 	bne.w	80086fc <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 80085ac:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80085b0:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80085b4:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 80085b8:	d103      	bne.n	80085c2 <find_volume+0x136>
 80085ba:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80085be:	f7ff fdaf 	bl	8008120 <ld_dword>
	rv = rv << 8 | ptr[0];
 80085c2:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085c6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80085ca:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80085ce:	f000 8095 	beq.w	80086fc <find_volume+0x270>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80085d2:	fb05 fc0a 	mul.w	ip, r5, sl
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80085d6:	eb03 1218 	add.w	r2, r3, r8, lsr #4
 80085da:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80085dc:	4290      	cmp	r0, r2
 80085de:	f0c0 808d 	bcc.w	80086fc <find_volume+0x270>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80085e2:	1a81      	subs	r1, r0, r2
 80085e4:	fbb1 f1f9 	udiv	r1, r1, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80085e8:	2900      	cmp	r1, #0
 80085ea:	f000 8087 	beq.w	80086fc <find_volume+0x270>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80085ee:	f64f 79f5 	movw	r9, #65525	; 0xfff5
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80085f2:	f640 70f5 	movw	r0, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80085f6:	443b      	add	r3, r7
		fs->database = bsect + sysect;					/* Data start sector */
 80085f8:	443a      	add	r2, r7
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80085fa:	4549      	cmp	r1, r9
 80085fc:	bf8c      	ite	hi
 80085fe:	f04f 0903 	movhi.w	r9, #3
 8008602:	f04f 0902 	movls.w	r9, #2
		fs->volbase = bsect;							/* Volume start sector */
 8008606:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008608:	6263      	str	r3, [r4, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800860a:	4281      	cmp	r1, r0
 800860c:	bf98      	it	ls
 800860e:	f04f 0901 	movls.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008612:	3102      	adds	r1, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8008614:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008616:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800861a:	61a1      	str	r1, [r4, #24]
		if (fmt == FS_FAT32) {
 800861c:	d172      	bne.n	8008704 <find_volume+0x278>
	rv = rv << 8 | ptr[0];
 800861e:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 8008622:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008626:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800862a:	d167      	bne.n	80086fc <find_volume+0x270>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800862c:	f1b8 0f00 	cmp.w	r8, #0
 8008630:	d164      	bne.n	80086fc <find_volume+0x270>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008632:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8008636:	f7ff fd73 	bl	8008120 <ld_dword>
 800863a:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800863c:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800863e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8008642:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 8008646:	d359      	bcc.n	80086fc <find_volume+0x270>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008648:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800864c:	f1b9 0f03 	cmp.w	r9, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008650:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 8008654:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008658:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800865a:	d12f      	bne.n	80086bc <find_volume+0x230>
	rv = rv << 8 | ptr[0];
 800865c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8008660:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8008664:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008668:	2b01      	cmp	r3, #1
 800866a:	d127      	bne.n	80086bc <find_volume+0x230>
			&& move_window(fs, bsect + 1) == FR_OK)
 800866c:	1c79      	adds	r1, r7, #1
 800866e:	4620      	mov	r0, r4
 8008670:	f7ff feb1 	bl	80083d6 <move_window>
 8008674:	bb10      	cbnz	r0, 80086bc <find_volume+0x230>
	rv = rv << 8 | ptr[0];
 8008676:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800867a:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 800867e:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8008680:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008684:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008688:	4293      	cmp	r3, r2
 800868a:	d117      	bne.n	80086bc <find_volume+0x230>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800868c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008690:	f7ff fd46 	bl	8008120 <ld_dword>
 8008694:	4b29      	ldr	r3, [pc, #164]	; (800873c <find_volume+0x2b0>)
 8008696:	4298      	cmp	r0, r3
 8008698:	d110      	bne.n	80086bc <find_volume+0x230>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800869a:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800869e:	f7ff fd3f 	bl	8008120 <ld_dword>
 80086a2:	4b27      	ldr	r3, [pc, #156]	; (8008740 <find_volume+0x2b4>)
 80086a4:	4298      	cmp	r0, r3
 80086a6:	d109      	bne.n	80086bc <find_volume+0x230>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80086a8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80086ac:	f7ff fd38 	bl	8008120 <ld_dword>
 80086b0:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80086b2:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80086b6:	f7ff fd33 	bl	8008120 <ld_dword>
 80086ba:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 80086bc:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 80086be:	2000      	movs	r0, #0
	fs->fs_type = fmt;		/* FAT sub-type */
 80086c0:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 80086c4:	3301      	adds	r3, #1
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	8533      	strh	r3, [r6, #40]	; 0x28
 80086ca:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80086cc:	6833      	ldr	r3, [r6, #0]
 80086ce:	429c      	cmp	r4, r3
 80086d0:	bf04      	itt	eq
 80086d2:	2300      	moveq	r3, #0
 80086d4:	6033      	streq	r3, [r6, #0]
 80086d6:	6933      	ldr	r3, [r6, #16]
 80086d8:	429c      	cmp	r4, r3
 80086da:	f47f aefb 	bne.w	80084d4 <find_volume+0x48>
 80086de:	6130      	str	r0, [r6, #16]
 80086e0:	e6f8      	b.n	80084d4 <find_volume+0x48>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80086e2:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80086e4:	3501      	adds	r5, #1
 80086e6:	2d04      	cmp	r5, #4
 80086e8:	f47f af1a 	bne.w	8008520 <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80086ec:	2804      	cmp	r0, #4
 80086ee:	d105      	bne.n	80086fc <find_volume+0x270>
 80086f0:	2001      	movs	r0, #1
 80086f2:	e6ef      	b.n	80084d4 <find_volume+0x48>
 80086f4:	2804      	cmp	r0, #4
 80086f6:	d0fb      	beq.n	80086f0 <find_volume+0x264>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80086f8:	2801      	cmp	r0, #1
 80086fa:	d901      	bls.n	8008700 <find_volume+0x274>
 80086fc:	200d      	movs	r0, #13
 80086fe:	e6e9      	b.n	80084d4 <find_volume+0x48>
	bsect = 0;
 8008700:	2700      	movs	r7, #0
 8008702:	e719      	b.n	8008538 <find_volume+0xac>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008704:	f1b8 0f00 	cmp.w	r8, #0
 8008708:	d0f8      	beq.n	80086fc <find_volume+0x270>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800870a:	f1b9 0f02 	cmp.w	r9, #2
 800870e:	ea4f 0041 	mov.w	r0, r1, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008712:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008714:	bf1c      	itt	ne
 8008716:	1840      	addne	r0, r0, r1
 8008718:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800871c:	62a3      	str	r3, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800871e:	bf0c      	ite	eq
 8008720:	4601      	moveq	r1, r0
 8008722:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 8008726:	e78a      	b.n	800863e <find_volume+0x1b2>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008728:	200b      	movs	r0, #11
 800872a:	e6d3      	b.n	80084d4 <find_volume+0x48>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800872c:	200c      	movs	r0, #12
 800872e:	e6d1      	b.n	80084d4 <find_volume+0x48>
			return FR_OK;				/* The file system object is valid */
 8008730:	4628      	mov	r0, r5
 8008732:	e6cf      	b.n	80084d4 <find_volume+0x48>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008734:	2003      	movs	r0, #3
 8008736:	e6cd      	b.n	80084d4 <find_volume+0x48>
 8008738:	20006f18 	.word	0x20006f18
 800873c:	41615252 	.word	0x41615252
 8008740:	61417272 	.word	0x61417272

08008744 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008744:	2901      	cmp	r1, #1
{
 8008746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800874a:	4605      	mov	r5, r0
 800874c:	460c      	mov	r4, r1
 800874e:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008750:	d973      	bls.n	800883a <put_fat+0xf6>
 8008752:	6983      	ldr	r3, [r0, #24]
 8008754:	428b      	cmp	r3, r1
 8008756:	d970      	bls.n	800883a <put_fat+0xf6>
		switch (fs->fs_type) {
 8008758:	7803      	ldrb	r3, [r0, #0]
 800875a:	2b02      	cmp	r3, #2
 800875c:	d040      	beq.n	80087e0 <put_fat+0x9c>
 800875e:	2b03      	cmp	r3, #3
 8008760:	d051      	beq.n	8008806 <put_fat+0xc2>
 8008762:	2b01      	cmp	r3, #1
 8008764:	d169      	bne.n	800883a <put_fat+0xf6>
			bc = (UINT)clst; bc += bc / 2;
 8008766:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800876a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800876c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8008770:	f7ff fe31 	bl	80083d6 <move_window>
 8008774:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8008776:	bb40      	cbnz	r0, 80087ca <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008778:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 800877c:	f105 0934 	add.w	r9, r5, #52	; 0x34
 8008780:	f108 0a01 	add.w	sl, r8, #1
 8008784:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008788:	bf08      	it	eq
 800878a:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800878c:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800878e:	bf1f      	itttt	ne
 8008790:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8008794:	f003 020f 	andne.w	r2, r3, #15
 8008798:	013b      	lslne	r3, r7, #4
 800879a:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800879e:	bf18      	it	ne
 80087a0:	4313      	orrne	r3, r2
 80087a2:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 80087a6:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80087a8:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 80087aa:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80087ac:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 80087b0:	f7ff fe11 	bl	80083d6 <move_window>
			if (res != FR_OK) break;
 80087b4:	4606      	mov	r6, r0
 80087b6:	b940      	cbnz	r0, 80087ca <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 80087b8:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80087bc:	b144      	cbz	r4, 80087d0 <put_fat+0x8c>
 80087be:	f3c7 1707 	ubfx	r7, r7, #4, #8
 80087c2:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 80087c6:	2301      	movs	r3, #1
 80087c8:	70eb      	strb	r3, [r5, #3]
}
 80087ca:	4630      	mov	r0, r6
 80087cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80087d0:	f819 300a 	ldrb.w	r3, [r9, sl]
 80087d4:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80087d8:	f023 030f 	bic.w	r3, r3, #15
 80087dc:	431f      	orrs	r7, r3
 80087de:	e7f0      	b.n	80087c2 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80087e0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80087e2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80087e6:	f7ff fdf6 	bl	80083d6 <move_window>
			if (res != FR_OK) break;
 80087ea:	4606      	mov	r6, r0
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d1ec      	bne.n	80087ca <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80087f0:	0064      	lsls	r4, r4, #1
 80087f2:	f105 0334 	add.w	r3, r5, #52	; 0x34
 80087f6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 80087fa:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80087fc:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80087fe:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8008802:	7057      	strb	r7, [r2, #1]
 8008804:	e7df      	b.n	80087c6 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008806:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008808:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800880c:	f7ff fde3 	bl	80083d6 <move_window>
			if (res != FR_OK) break;
 8008810:	4606      	mov	r6, r0
 8008812:	2800      	cmp	r0, #0
 8008814:	d1d9      	bne.n	80087ca <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008816:	00a4      	lsls	r4, r4, #2
 8008818:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800881c:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8008820:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8008824:	441c      	add	r4, r3
 8008826:	4620      	mov	r0, r4
 8008828:	f7ff fc7a 	bl	8008120 <ld_dword>
 800882c:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008830:	4620      	mov	r0, r4
 8008832:	4339      	orrs	r1, r7
 8008834:	f7ff fc7c 	bl	8008130 <st_dword>
 8008838:	e7c5      	b.n	80087c6 <put_fat+0x82>
	FRESULT res = FR_INT_ERR;
 800883a:	2602      	movs	r6, #2
 800883c:	e7c5      	b.n	80087ca <put_fat+0x86>

0800883e <get_fat.isra.7>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800883e:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	4605      	mov	r5, r0
 8008844:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008846:	d952      	bls.n	80088ee <get_fat.isra.7+0xb0>
 8008848:	6983      	ldr	r3, [r0, #24]
 800884a:	4299      	cmp	r1, r3
 800884c:	d24f      	bcs.n	80088ee <get_fat.isra.7+0xb0>
		switch (fs->fs_type) {
 800884e:	7803      	ldrb	r3, [r0, #0]
 8008850:	2b02      	cmp	r3, #2
 8008852:	d029      	beq.n	80088a8 <get_fat.isra.7+0x6a>
 8008854:	2b03      	cmp	r3, #3
 8008856:	d038      	beq.n	80088ca <get_fat.isra.7+0x8c>
 8008858:	2b01      	cmp	r3, #1
 800885a:	d148      	bne.n	80088ee <get_fat.isra.7+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 800885c:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008860:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008862:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8008866:	f7ff fdb6 	bl	80083d6 <move_window>
 800886a:	b110      	cbz	r0, 8008872 <get_fat.isra.7+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8008872:	1c77      	adds	r7, r6, #1
 8008874:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008878:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800887a:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800887c:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800887e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8008882:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008886:	f7ff fda6 	bl	80083d6 <move_window>
 800888a:	2800      	cmp	r0, #0
 800888c:	d1ee      	bne.n	800886c <get_fat.isra.7+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800888e:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008892:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8008894:	443d      	add	r5, r7
 8008896:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800889a:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800889e:	bf4c      	ite	mi
 80088a0:	0900      	lsrmi	r0, r0, #4
 80088a2:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80088a6:	e7e3      	b.n	8008870 <get_fat.isra.7+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80088a8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80088aa:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80088ae:	f7ff fd92 	bl	80083d6 <move_window>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d1da      	bne.n	800886c <get_fat.isra.7+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80088b6:	0064      	lsls	r4, r4, #1
 80088b8:	3534      	adds	r5, #52	; 0x34
 80088ba:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80088be:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 80088c0:	5d28      	ldrb	r0, [r5, r4]
 80088c2:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80088c4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80088c8:	e7d2      	b.n	8008870 <get_fat.isra.7+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80088ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80088cc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80088d0:	f7ff fd81 	bl	80083d6 <move_window>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d1c9      	bne.n	800886c <get_fat.isra.7+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80088d8:	00a4      	lsls	r4, r4, #2
 80088da:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80088de:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80088e2:	4420      	add	r0, r4
 80088e4:	f7ff fc1c 	bl	8008120 <ld_dword>
 80088e8:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80088ec:	e7c0      	b.n	8008870 <get_fat.isra.7+0x32>
			val = 1;	/* Internal error */
 80088ee:	2001      	movs	r0, #1
 80088f0:	e7be      	b.n	8008870 <get_fat.isra.7+0x32>

080088f2 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80088f2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 80088f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f8:	4606      	mov	r6, r0
 80088fa:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80088fc:	d301      	bcc.n	8008902 <dir_sdi+0x10>
		return FR_INT_ERR;
 80088fe:	2002      	movs	r0, #2
}
 8008900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008902:	06ca      	lsls	r2, r1, #27
 8008904:	d1fb      	bne.n	80088fe <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008906:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8008908:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800890a:	6171      	str	r1, [r6, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800890c:	b9c2      	cbnz	r2, 8008940 <dir_sdi+0x4e>
 800890e:	7823      	ldrb	r3, [r4, #0]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d901      	bls.n	8008918 <dir_sdi+0x26>
		clst = fs->dirbase;
 8008914:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008916:	b9a3      	cbnz	r3, 8008942 <dir_sdi+0x50>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008918:	8923      	ldrh	r3, [r4, #8]
 800891a:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800891e:	d9ee      	bls.n	80088fe <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 8008920:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008922:	61f3      	str	r3, [r6, #28]
	if (!dp->sect) return FR_INT_ERR;
 8008924:	69f3      	ldr	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8008926:	61b2      	str	r2, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0e8      	beq.n	80088fe <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800892c:	eb03 2355 	add.w	r3, r3, r5, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008930:	3434      	adds	r4, #52	; 0x34
 8008932:	f3c5 0508 	ubfx	r5, r5, #0, #9
	return FR_OK;
 8008936:	2000      	movs	r0, #0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008938:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800893a:	442c      	add	r4, r5
 800893c:	6234      	str	r4, [r6, #32]
	return FR_OK;
 800893e:	e7df      	b.n	8008900 <dir_sdi+0xe>
 8008940:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008942:	8967      	ldrh	r7, [r4, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008944:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008946:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8008948:	42bd      	cmp	r5, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800894a:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 800894c:	d204      	bcs.n	8008958 <dir_sdi+0x66>
		dp->sect = clust2sect(fs, clst);
 800894e:	4620      	mov	r0, r4
 8008950:	f7ff fc92 	bl	8008278 <clust2sect>
 8008954:	61f0      	str	r0, [r6, #28]
 8008956:	e7e5      	b.n	8008924 <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008958:	6830      	ldr	r0, [r6, #0]
 800895a:	f7ff ff70 	bl	800883e <get_fat.isra.7>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800895e:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008960:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008962:	d006      	beq.n	8008972 <dir_sdi+0x80>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008964:	2801      	cmp	r0, #1
 8008966:	d9ca      	bls.n	80088fe <dir_sdi+0xc>
 8008968:	69a3      	ldr	r3, [r4, #24]
 800896a:	4283      	cmp	r3, r0
 800896c:	d9c7      	bls.n	80088fe <dir_sdi+0xc>
			ofs -= csz;
 800896e:	1bed      	subs	r5, r5, r7
 8008970:	e7ea      	b.n	8008948 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008972:	2001      	movs	r0, #1
 8008974:	e7c4      	b.n	8008900 <dir_sdi+0xe>

08008976 <create_chain>:
{
 8008976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897a:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800897c:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800897e:	460f      	mov	r7, r1
 8008980:	b971      	cbnz	r1, 80089a0 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008982:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008984:	b1f6      	cbz	r6, 80089c4 <create_chain+0x4e>
 8008986:	69ab      	ldr	r3, [r5, #24]
 8008988:	42b3      	cmp	r3, r6
 800898a:	bf98      	it	ls
 800898c:	2601      	movls	r6, #1
 800898e:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8008990:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008992:	69ab      	ldr	r3, [r5, #24]
 8008994:	42a3      	cmp	r3, r4
 8008996:	d818      	bhi.n	80089ca <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8008998:	2e01      	cmp	r6, #1
 800899a:	d815      	bhi.n	80089c8 <create_chain+0x52>
 800899c:	2400      	movs	r4, #0
 800899e:	e009      	b.n	80089b4 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80089a0:	4628      	mov	r0, r5
 80089a2:	f7ff ff4c 	bl	800883e <get_fat.isra.7>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80089a6:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80089a8:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80089aa:	d937      	bls.n	8008a1c <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d104      	bne.n	80089ba <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80089b0:	f04f 34ff 	mov.w	r4, #4294967295
}
 80089b4:	4620      	mov	r0, r4
 80089b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80089ba:	69ab      	ldr	r3, [r5, #24]
 80089bc:	4283      	cmp	r3, r0
 80089be:	d8f9      	bhi.n	80089b4 <create_chain+0x3e>
 80089c0:	463e      	mov	r6, r7
 80089c2:	e7e4      	b.n	800898e <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80089c4:	2601      	movs	r6, #1
 80089c6:	e7e2      	b.n	800898e <create_chain+0x18>
				ncl = 2;
 80089c8:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80089ca:	4621      	mov	r1, r4
 80089cc:	f8d8 0000 	ldr.w	r0, [r8]
 80089d0:	f7ff ff35 	bl	800883e <get_fat.isra.7>
			if (cs == 0) break;				/* Found a free cluster */
 80089d4:	b130      	cbz	r0, 80089e4 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80089d6:	2801      	cmp	r0, #1
 80089d8:	d020      	beq.n	8008a1c <create_chain+0xa6>
 80089da:	3001      	adds	r0, #1
 80089dc:	d0e8      	beq.n	80089b0 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 80089de:	42b4      	cmp	r4, r6
 80089e0:	d1d6      	bne.n	8008990 <create_chain+0x1a>
 80089e2:	e7db      	b.n	800899c <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80089e4:	f04f 32ff 	mov.w	r2, #4294967295
 80089e8:	4621      	mov	r1, r4
 80089ea:	4628      	mov	r0, r5
 80089ec:	f7ff feaa 	bl	8008744 <put_fat>
		if (res == FR_OK && clst != 0) {
 80089f0:	b990      	cbnz	r0, 8008a18 <create_chain+0xa2>
 80089f2:	b957      	cbnz	r7, 8008a0a <create_chain+0x94>
		fs->last_clst = ncl;
 80089f4:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80089f6:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 80089fa:	3a02      	subs	r2, #2
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d90f      	bls.n	8008a20 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8008a00:	792b      	ldrb	r3, [r5, #4]
 8008a02:	f043 0301 	orr.w	r3, r3, #1
 8008a06:	712b      	strb	r3, [r5, #4]
 8008a08:	e7d4      	b.n	80089b4 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f7ff fe98 	bl	8008744 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d0ed      	beq.n	80089f4 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008a18:	2801      	cmp	r0, #1
 8008a1a:	d0c9      	beq.n	80089b0 <create_chain+0x3a>
 8008a1c:	2401      	movs	r4, #1
 8008a1e:	e7c9      	b.n	80089b4 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008a20:	3b01      	subs	r3, #1
 8008a22:	616b      	str	r3, [r5, #20]
 8008a24:	e7ec      	b.n	8008a00 <create_chain+0x8a>

08008a26 <remove_chain>:
{
 8008a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a28:	460d      	mov	r5, r1
 8008a2a:	4607      	mov	r7, r0
 8008a2c:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008a2e:	2d01      	cmp	r5, #1
 8008a30:	d92c      	bls.n	8008a8c <remove_chain+0x66>
	FATFS *fs = obj->fs;
 8008a32:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008a34:	69a3      	ldr	r3, [r4, #24]
 8008a36:	42ab      	cmp	r3, r5
 8008a38:	d928      	bls.n	8008a8c <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008a3a:	b12a      	cbz	r2, 8008a48 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a40:	4620      	mov	r0, r4
 8008a42:	f7ff fe7f 	bl	8008744 <put_fat>
		if (res != FR_OK) return res;
 8008a46:	b930      	cbnz	r0, 8008a56 <remove_chain+0x30>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008a48:	4629      	mov	r1, r5
 8008a4a:	6838      	ldr	r0, [r7, #0]
 8008a4c:	f7ff fef7 	bl	800883e <get_fat.isra.7>
		if (nxt == 0) break;				/* Empty cluster? */
 8008a50:	4606      	mov	r6, r0
 8008a52:	b908      	cbnz	r0, 8008a58 <remove_chain+0x32>
	return FR_OK;
 8008a54:	2000      	movs	r0, #0
}
 8008a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008a58:	2801      	cmp	r0, #1
 8008a5a:	d017      	beq.n	8008a8c <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d017      	beq.n	8008a90 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008a60:	2200      	movs	r2, #0
 8008a62:	4629      	mov	r1, r5
 8008a64:	4620      	mov	r0, r4
 8008a66:	f7ff fe6d 	bl	8008744 <put_fat>
			if (res != FR_OK) return res;
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d1f3      	bne.n	8008a56 <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008a6e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8008a72:	1e91      	subs	r1, r2, #2
 8008a74:	428b      	cmp	r3, r1
 8008a76:	d205      	bcs.n	8008a84 <remove_chain+0x5e>
			fs->free_clst++;
 8008a78:	3301      	adds	r3, #1
 8008a7a:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 8008a7c:	7923      	ldrb	r3, [r4, #4]
 8008a7e:	f043 0301 	orr.w	r3, r3, #1
 8008a82:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008a84:	42b2      	cmp	r2, r6
 8008a86:	4635      	mov	r5, r6
 8008a88:	d8de      	bhi.n	8008a48 <remove_chain+0x22>
 8008a8a:	e7e3      	b.n	8008a54 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008a8c:	2002      	movs	r0, #2
 8008a8e:	e7e2      	b.n	8008a56 <remove_chain+0x30>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008a90:	2001      	movs	r0, #1
 8008a92:	e7e0      	b.n	8008a56 <remove_chain+0x30>

08008a94 <get_fileinfo>:
{
 8008a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
 8008a98:	2500      	movs	r5, #0
	FATFS *fs = dp->obj.fs;
 8008a9a:	f8d0 8000 	ldr.w	r8, [r0]
{
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	460c      	mov	r4, r1
	fno->fname[0] = 0;		/* Invaidate file info */
 8008aa2:	758d      	strb	r5, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008aa4:	69c3      	ldr	r3, [r0, #28]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d057      	beq.n	8008b5a <get_fileinfo+0xc6>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8008aaa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008aac:	3301      	adds	r3, #1
 8008aae:	d00a      	beq.n	8008ac6 <get_fileinfo+0x32>
 8008ab0:	f101 0716 	add.w	r7, r1, #22
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008ab4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ab8:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d14e      	bne.n	8008b5e <get_fileinfo+0xca>
			fno->fname[i] = 0;	/* Terminate the LFN */
 8008ac0:	4425      	add	r5, r4
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	75ab      	strb	r3, [r5, #22]
		c = (TCHAR)dp->dir[i++];
 8008ac6:	6a31      	ldr	r1, [r6, #32]
	i = j = 0;
 8008ac8:	2300      	movs	r3, #0
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008aca:	7da0      	ldrb	r0, [r4, #22]
			fno->altname[j++] = '.';
 8008acc:	262e      	movs	r6, #46	; 0x2e
 8008ace:	f101 0e0b 	add.w	lr, r1, #11
		c = (TCHAR)dp->dir[i++];
 8008ad2:	460d      	mov	r5, r1
 8008ad4:	f815 2b01 	ldrb.w	r2, [r5], #1
		if (c == ' ') continue;				/* Skip padding spaces */
 8008ad8:	2a20      	cmp	r2, #32
 8008ada:	d024      	beq.n	8008b26 <get_fileinfo+0x92>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008adc:	2a05      	cmp	r2, #5
 8008ade:	eba5 0c01 	sub.w	ip, r5, r1
 8008ae2:	bf08      	it	eq
 8008ae4:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8008ae6:	f1bc 0f09 	cmp.w	ip, #9
 8008aea:	d104      	bne.n	8008af6 <get_fileinfo+0x62>
 8008aec:	18e7      	adds	r7, r4, r3
			if (!lfv) fno->fname[j] = '.';
 8008aee:	b900      	cbnz	r0, 8008af2 <get_fileinfo+0x5e>
 8008af0:	75be      	strb	r6, [r7, #22]
			fno->altname[j++] = '.';
 8008af2:	3301      	adds	r3, #1
 8008af4:	727e      	strb	r6, [r7, #9]
		fno->altname[j] = c;
 8008af6:	18e7      	adds	r7, r4, r3
 8008af8:	727a      	strb	r2, [r7, #9]
		if (!lfv) {
 8008afa:	b998      	cbnz	r0, 8008b24 <get_fileinfo+0x90>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008afc:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
 8008b00:	f1b8 0f19 	cmp.w	r8, #25
 8008b04:	d80d      	bhi.n	8008b22 <get_fileinfo+0x8e>
 8008b06:	f1bc 0f09 	cmp.w	ip, #9
 8008b0a:	f891 800c 	ldrb.w	r8, [r1, #12]
 8008b0e:	bf34      	ite	cc
 8008b10:	f04f 0c08 	movcc.w	ip, #8
 8008b14:	f04f 0c10 	movcs.w	ip, #16
 8008b18:	ea18 0f0c 	tst.w	r8, ip
				c += 0x20;			/* To lower */
 8008b1c:	bf1c      	itt	ne
 8008b1e:	3220      	addne	r2, #32
 8008b20:	b2d2      	uxtbne	r2, r2
			fno->fname[j] = c;
 8008b22:	75ba      	strb	r2, [r7, #22]
		j++;
 8008b24:	3301      	adds	r3, #1
	while (i < 11) {		/* Copy name body and extension */
 8008b26:	4575      	cmp	r5, lr
 8008b28:	d1d4      	bne.n	8008ad4 <get_fileinfo+0x40>
	if (!lfv) {
 8008b2a:	b928      	cbnz	r0, 8008b38 <get_fileinfo+0xa4>
		fno->fname[j] = 0;
 8008b2c:	18e2      	adds	r2, r4, r3
 8008b2e:	7590      	strb	r0, [r2, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8008b30:	7b0a      	ldrb	r2, [r1, #12]
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	bf08      	it	eq
 8008b36:	2300      	moveq	r3, #0
	fno->altname[j] = 0;	/* Terminate the SFN */
 8008b38:	2200      	movs	r2, #0
 8008b3a:	4423      	add	r3, r4
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008b3c:	f101 001c 	add.w	r0, r1, #28
	fno->altname[j] = 0;	/* Terminate the SFN */
 8008b40:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008b42:	7acb      	ldrb	r3, [r1, #11]
 8008b44:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008b46:	f7ff faeb 	bl	8008120 <ld_dword>
 8008b4a:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008b4c:	f101 0016 	add.w	r0, r1, #22
 8008b50:	f7ff fae6 	bl	8008120 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008b54:	80e0      	strh	r0, [r4, #6]
 8008b56:	0c00      	lsrs	r0, r0, #16
 8008b58:	80a0      	strh	r0, [r4, #4]
}
 8008b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8008b5e:	2100      	movs	r1, #0
 8008b60:	f001 fa2e 	bl	8009fc0 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8008b64:	b130      	cbz	r0, 8008b74 <get_fileinfo+0xe0>
 8008b66:	3501      	adds	r5, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8008b68:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008b6c:	d002      	beq.n	8008b74 <get_fileinfo+0xe0>
				fno->fname[i++] = (TCHAR)w;
 8008b6e:	f807 0b01 	strb.w	r0, [r7], #1
 8008b72:	e79f      	b.n	8008ab4 <get_fileinfo+0x20>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8008b74:	2500      	movs	r5, #0
 8008b76:	e7a3      	b.n	8008ac0 <get_fileinfo+0x2c>

08008b78 <sync_fs>:
{
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008b7c:	f7ff fc25 	bl	80083ca <sync_window>
 8008b80:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d142      	bne.n	8008c0c <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b86:	7823      	ldrb	r3, [r4, #0]
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d137      	bne.n	8008bfc <sync_fs+0x84>
 8008b8c:	7927      	ldrb	r7, [r4, #4]
 8008b8e:	2f01      	cmp	r7, #1
 8008b90:	d134      	bne.n	8008bfc <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8008b92:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8008b96:	4601      	mov	r1, r0
 8008b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f7ff facf 	bl	8008140 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8008ba2:	2355      	movs	r3, #85	; 0x55
	*ptr++ = (BYTE)val;
 8008ba4:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8008ba6:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 8008ba8:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8008bac:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
 8008bae:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008bb2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
 8008bb6:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8008bba:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val; val >>= 8;
 8008bbc:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val; val >>= 8;
 8008bc0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8008bc4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8008bc8:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 8008bca:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8008bce:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8008bd2:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 8008bd6:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008bda:	6961      	ldr	r1, [r4, #20]
 8008bdc:	f7ff faa8 	bl	8008130 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008be0:	6921      	ldr	r1, [r4, #16]
 8008be2:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008be6:	f7ff faa3 	bl	8008130 <st_dword>
			fs->winsect = fs->volbase + 1;
 8008bea:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008bec:	463b      	mov	r3, r7
 8008bee:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 8008bf0:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008bf2:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8008bf4:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008bf6:	f7ff fa75 	bl	80080e4 <disk_write>
			fs->fsi_flag = 0;
 8008bfa:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	7860      	ldrb	r0, [r4, #1]
 8008c00:	4611      	mov	r1, r2
 8008c02:	f7ff fa7d 	bl	8008100 <disk_ioctl>
 8008c06:	3000      	adds	r0, #0
 8008c08:	bf18      	it	ne
 8008c0a:	2001      	movne	r0, #1
}
 8008c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c0e <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008c0e:	69c3      	ldr	r3, [r0, #28]
{
 8008c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c14:	4605      	mov	r5, r0
 8008c16:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008c18:	b1ab      	cbz	r3, 8008c46 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008c1a:	6942      	ldr	r2, [r0, #20]
 8008c1c:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008c20:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8008c24:	d20f      	bcs.n	8008c46 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008c26:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8008c2a:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008c2c:	f1b9 0f00 	cmp.w	r9, #0
 8008c30:	d14d      	bne.n	8008cce <dir_next+0xc0>
		dp->sect++;				/* Next sector */
 8008c32:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8008c34:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8008c36:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8008c38:	b939      	cbnz	r1, 8008c4a <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008c3a:	8923      	ldrh	r3, [r4, #8]
 8008c3c:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8008c40:	d845      	bhi.n	8008cce <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 8008c42:	2300      	movs	r3, #0
 8008c44:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008c46:	2004      	movs	r0, #4
 8008c48:	e00b      	b.n	8008c62 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008c4a:	8963      	ldrh	r3, [r4, #10]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 8008c52:	d13c      	bne.n	8008cce <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008c54:	4620      	mov	r0, r4
 8008c56:	f7ff fdf2 	bl	800883e <get_fat.isra.7>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008c5a:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008c5c:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008c5e:	d802      	bhi.n	8008c66 <dir_next+0x58>
 8008c60:	2002      	movs	r0, #2
}
 8008c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008c66:	1c42      	adds	r2, r0, #1
 8008c68:	d101      	bne.n	8008c6e <dir_next+0x60>
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	e7f9      	b.n	8008c62 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008c6e:	69a3      	ldr	r3, [r4, #24]
 8008c70:	4283      	cmp	r3, r0
 8008c72:	d826      	bhi.n	8008cc2 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 8008c74:	2f00      	cmp	r7, #0
 8008c76:	d0e4      	beq.n	8008c42 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008c78:	69a9      	ldr	r1, [r5, #24]
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f7ff fe7b 	bl	8008976 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c80:	4606      	mov	r6, r0
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d036      	beq.n	8008cf4 <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008c86:	2801      	cmp	r0, #1
 8008c88:	d0ea      	beq.n	8008c60 <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	d0ed      	beq.n	8008c6a <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f7ff fb9b 	bl	80083ca <sync_window>
 8008c94:	4607      	mov	r7, r0
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d1e7      	bne.n	8008c6a <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008c9a:	4601      	mov	r1, r0
 8008c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ca0:	f104 0034 	add.w	r0, r4, #52	; 0x34
						fs->wflag = 1;
 8008ca4:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008ca8:	f7ff fa4a 	bl	8008140 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008cac:	4631      	mov	r1, r6
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f7ff fae2 	bl	8008278 <clust2sect>
 8008cb4:	6320      	str	r0, [r4, #48]	; 0x30
 8008cb6:	8963      	ldrh	r3, [r4, #10]
 8008cb8:	429f      	cmp	r7, r3
 8008cba:	d30f      	bcc.n	8008cdc <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 8008cbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008cbe:	1bdf      	subs	r7, r3, r7
 8008cc0:	6327      	str	r7, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 8008cc2:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7ff fad6 	bl	8008278 <clust2sect>
 8008ccc:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008cce:	3434      	adds	r4, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8008cd0:	f8c5 8014 	str.w	r8, [r5, #20]
	return FR_OK;
 8008cd4:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008cd6:	444c      	add	r4, r9
 8008cd8:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8008cda:	e7c2      	b.n	8008c62 <dir_next+0x54>
						fs->wflag = 1;
 8008cdc:	f884 a003 	strb.w	sl, [r4, #3]
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f7ff fb4f 	bl	8008384 <sync_window.part.3>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d1bf      	bne.n	8008c6a <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008cea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008cec:	3701      	adds	r7, #1
 8008cee:	3301      	adds	r3, #1
 8008cf0:	6323      	str	r3, [r4, #48]	; 0x30
 8008cf2:	e7e0      	b.n	8008cb6 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008cf4:	2007      	movs	r0, #7
 8008cf6:	e7b4      	b.n	8008c62 <dir_next+0x54>

08008cf8 <dir_find>:
{
 8008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008cfc:	2100      	movs	r1, #0
{
 8008cfe:	b085      	sub	sp, #20
 8008d00:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8008d02:	f8d0 a000 	ldr.w	sl, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008d06:	f7ff fdf4 	bl	80088f2 <dir_sdi>
	if (res != FR_OK) return res;
 8008d0a:	4680      	mov	r8, r0
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	f040 809c 	bne.w	8008e4a <dir_find+0x152>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008d12:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8008d16:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1a:	464e      	mov	r6, r9
 8008d1c:	632b      	str	r3, [r5, #48]	; 0x30
		res = move_window(fs, dp->sect);
 8008d1e:	69e9      	ldr	r1, [r5, #28]
 8008d20:	4650      	mov	r0, sl
 8008d22:	f7ff fb58 	bl	80083d6 <move_window>
		if (res != FR_OK) break;
 8008d26:	4680      	mov	r8, r0
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	f040 808e 	bne.w	8008e4a <dir_find+0x152>
		c = dp->dir[DIR_Name];
 8008d2e:	6a2c      	ldr	r4, [r5, #32]
 8008d30:	7827      	ldrb	r7, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008d32:	2f00      	cmp	r7, #0
 8008d34:	f000 808d 	beq.w	8008e52 <dir_find+0x15a>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008d38:	7ae2      	ldrb	r2, [r4, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008d3a:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008d3c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8008d40:	71ab      	strb	r3, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008d42:	d003      	beq.n	8008d4c <dir_find+0x54>
 8008d44:	0712      	lsls	r2, r2, #28
 8008d46:	d505      	bpl.n	8008d54 <dir_find+0x5c>
 8008d48:	2b0f      	cmp	r3, #15
 8008d4a:	d005      	beq.n	8008d58 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d50:	632b      	str	r3, [r5, #48]	; 0x30
 8008d52:	e058      	b.n	8008e06 <dir_find+0x10e>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008d54:	2b0f      	cmp	r3, #15
 8008d56:	d15d      	bne.n	8008e14 <dir_find+0x11c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008d58:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8008d5c:	0658      	lsls	r0, r3, #25
 8008d5e:	d448      	bmi.n	8008df2 <dir_find+0xfa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008d60:	0679      	lsls	r1, r7, #25
 8008d62:	d54e      	bpl.n	8008e02 <dir_find+0x10a>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008d64:	696b      	ldr	r3, [r5, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008d66:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8008d6a:	f894 900d 	ldrb.w	r9, [r4, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008d6e:	632b      	str	r3, [r5, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008d70:	7b63      	ldrb	r3, [r4, #13]
 8008d72:	454b      	cmp	r3, r9
 8008d74:	d147      	bne.n	8008e06 <dir_find+0x10e>
	rv = rv << 8 | ptr[0];
 8008d76:	7ee3      	ldrb	r3, [r4, #27]
 8008d78:	7ea6      	ldrb	r6, [r4, #26]
 8008d7a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008d7e:	b236      	sxth	r6, r6
 8008d80:	2e00      	cmp	r6, #0
 8008d82:	d140      	bne.n	8008e06 <dir_find+0x10e>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008d84:	f894 8000 	ldrb.w	r8, [r4]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008d88:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008d8a:	f8da b00c 	ldr.w	fp, [sl, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008d8e:	f008 083f 	and.w	r8, r8, #63	; 0x3f
 8008d92:	f108 33ff 	add.w	r3, r8, #4294967295
 8008d96:	f04f 080d 	mov.w	r8, #13
 8008d9a:	fb08 f803 	mul.w	r8, r8, r3
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008d9e:	4b2e      	ldr	r3, [pc, #184]	; (8008e58 <dir_find+0x160>)
 8008da0:	5cf2      	ldrb	r2, [r6, r3]
 8008da2:	18a3      	adds	r3, r4, r2
	rv = rv << 8 | ptr[0];
 8008da4:	7858      	ldrb	r0, [r3, #1]
 8008da6:	5ca3      	ldrb	r3, [r4, r2]
 8008da8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		if (wc) {
 8008dac:	b369      	cbz	r1, 8008e0a <dir_find+0x112>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008dae:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
 8008db2:	d828      	bhi.n	8008e06 <dir_find+0x10e>
 8008db4:	4618      	mov	r0, r3
 8008db6:	9303      	str	r3, [sp, #12]
 8008db8:	f001 f920 	bl	8009ffc <ff_wtoupper>
 8008dbc:	f108 0201 	add.w	r2, r8, #1
 8008dc0:	9002      	str	r0, [sp, #8]
 8008dc2:	f83b 0018 	ldrh.w	r0, [fp, r8, lsl #1]
 8008dc6:	9201      	str	r2, [sp, #4]
 8008dc8:	f001 f918 	bl	8009ffc <ff_wtoupper>
 8008dcc:	9902      	ldr	r1, [sp, #8]
 8008dce:	4281      	cmp	r1, r0
 8008dd0:	d119      	bne.n	8008e06 <dir_find+0x10e>
	rv = rv << 8 | ptr[0];
 8008dd2:	9b03      	ldr	r3, [sp, #12]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008dd4:	9a01      	ldr	r2, [sp, #4]
	rv = rv << 8 | ptr[0];
 8008dd6:	4619      	mov	r1, r3
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008dd8:	4690      	mov	r8, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008dda:	3601      	adds	r6, #1
 8008ddc:	2e0d      	cmp	r6, #13
 8008dde:	d1de      	bne.n	8008d9e <dir_find+0xa6>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008de0:	7823      	ldrb	r3, [r4, #0]
 8008de2:	065a      	lsls	r2, r3, #25
 8008de4:	d503      	bpl.n	8008dee <dir_find+0xf6>
 8008de6:	b111      	cbz	r1, 8008dee <dir_find+0xf6>
 8008de8:	f83b 3018 	ldrh.w	r3, [fp, r8, lsl #1]
 8008dec:	b95b      	cbnz	r3, 8008e06 <dir_find+0x10e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008dee:	3f01      	subs	r7, #1
 8008df0:	b2fe      	uxtb	r6, r7
		res = dir_next(dp, 0);	/* Next entry */
 8008df2:	2100      	movs	r1, #0
 8008df4:	4628      	mov	r0, r5
 8008df6:	f7ff ff0a 	bl	8008c0e <dir_next>
	} while (res == FR_OK);
 8008dfa:	4680      	mov	r8, r0
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d08e      	beq.n	8008d1e <dir_find+0x26>
 8008e00:	e023      	b.n	8008e4a <dir_find+0x152>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008e02:	42be      	cmp	r6, r7
 8008e04:	d0b4      	beq.n	8008d70 <dir_find+0x78>
 8008e06:	26ff      	movs	r6, #255	; 0xff
 8008e08:	e7f3      	b.n	8008df2 <dir_find+0xfa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d0e3      	beq.n	8008dda <dir_find+0xe2>
 8008e12:	e7f8      	b.n	8008e06 <dir_find+0x10e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008e14:	b926      	cbnz	r6, 8008e20 <dir_find+0x128>
 8008e16:	4620      	mov	r0, r4
 8008e18:	f7ff fa4a 	bl	80082b0 <sum_sfn>
 8008e1c:	4548      	cmp	r0, r9
 8008e1e:	d014      	beq.n	8008e4a <dir_find+0x152>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008e20:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8008e24:	07db      	lsls	r3, r3, #31
 8008e26:	d491      	bmi.n	8008d4c <dir_find+0x54>
 8008e28:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8008e2c:	f104 010b 	add.w	r1, r4, #11
		r = *d++ - *s++;
 8008e30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e34:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 8008e38:	428c      	cmp	r4, r1
		r = *d++ - *s++;
 8008e3a:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 8008e3e:	d002      	beq.n	8008e46 <dir_find+0x14e>
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0f5      	beq.n	8008e30 <dir_find+0x138>
 8008e44:	e782      	b.n	8008d4c <dir_find+0x54>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d180      	bne.n	8008d4c <dir_find+0x54>
}
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	b005      	add	sp, #20
 8008e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008e52:	f04f 0804 	mov.w	r8, #4
 8008e56:	e7f8      	b.n	8008e4a <dir_find+0x152>
 8008e58:	08010dca 	.word	0x08010dca

08008e5c <dir_register>:
{
 8008e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008e60:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
{
 8008e64:	b089      	sub	sp, #36	; 0x24
 8008e66:	4605      	mov	r5, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008e68:	f014 04a0 	ands.w	r4, r4, #160	; 0xa0
 8008e6c:	f040 8081 	bne.w	8008f72 <dir_register+0x116>
	FATFS *fs = dp->obj.fs;
 8008e70:	6807      	ldr	r7, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d15b      	bne.n	8008f34 <dir_register+0xd8>
	mem_cpy(sn, dp->fn, 12);
 8008e7c:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8008e80:	220c      	movs	r2, #12
 8008e82:	a805      	add	r0, sp, #20
 8008e84:	4631      	mov	r1, r6
 8008e86:	f7ff fa59 	bl	800833c <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008e8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8008e8e:	07db      	lsls	r3, r3, #31
 8008e90:	d578      	bpl.n	8008f84 <dir_register+0x128>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008e92:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 8008e94:	f04f 0901 	mov.w	r9, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8008e98:	f8df 8220 	ldr.w	r8, [pc, #544]	; 80090bc <dir_register+0x260>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008e9c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
 8008ea0:	220b      	movs	r2, #11
 8008ea2:	a905      	add	r1, sp, #20
 8008ea4:	4630      	mov	r0, r6
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008ea6:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8008eaa:	f7ff fa47 	bl	800833c <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008eae:	f1b9 0f05 	cmp.w	r9, #5
 8008eb2:	d94f      	bls.n	8008f54 <dir_register+0xf8>
 8008eb4:	f1aa 0102 	sub.w	r1, sl, #2
 8008eb8:	464b      	mov	r3, r9
		while (*lfn) {	/* Create a CRC */
 8008eba:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8008ebe:	2a00      	cmp	r2, #0
 8008ec0:	d13a      	bne.n	8008f38 <dir_register+0xdc>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008ec2:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 8008ec4:	f003 000f 	and.w	r0, r3, #15
		ns[i--] = c;
 8008ec8:	3a01      	subs	r2, #1
		c = (BYTE)((seq % 16) + '0');
 8008eca:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8008ece:	2939      	cmp	r1, #57	; 0x39
 8008ed0:	bf88      	it	hi
 8008ed2:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8008ed6:	a803      	add	r0, sp, #12
	} while (seq);
 8008ed8:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8008eda:	4410      	add	r0, r2
 8008edc:	7041      	strb	r1, [r0, #1]
	} while (seq);
 8008ede:	d1f1      	bne.n	8008ec4 <dir_register+0x68>
	ns[i] = '~';
 8008ee0:	a908      	add	r1, sp, #32
 8008ee2:	207e      	movs	r0, #126	; 0x7e
 8008ee4:	4411      	add	r1, r2
 8008ee6:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d003      	beq.n	8008ef6 <dir_register+0x9a>
 8008eee:	5cf1      	ldrb	r1, [r6, r3]
 8008ef0:	1c58      	adds	r0, r3, #1
 8008ef2:	2920      	cmp	r1, #32
 8008ef4:	d130      	bne.n	8008f58 <dir_register+0xfc>
 8008ef6:	4433      	add	r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008ef8:	2a07      	cmp	r2, #7
 8008efa:	bf97      	itett	ls
 8008efc:	a908      	addls	r1, sp, #32
 8008efe:	2120      	movhi	r1, #32
 8008f00:	1889      	addls	r1, r1, r2
 8008f02:	3201      	addls	r2, #1
 8008f04:	bf98      	it	ls
 8008f06:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8008f0a:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8008f0e:	1b99      	subs	r1, r3, r6
 8008f10:	2907      	cmp	r1, #7
 8008f12:	d9f1      	bls.n	8008ef8 <dir_register+0x9c>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008f14:	4628      	mov	r0, r5
 8008f16:	f7ff feef 	bl	8008cf8 <dir_find>
 8008f1a:	4682      	mov	sl, r0
			if (res != FR_OK) break;
 8008f1c:	bb60      	cbnz	r0, 8008f78 <dir_register+0x11c>
		for (n = 1; n < 100; n++) {
 8008f1e:	f109 0901 	add.w	r9, r9, #1
 8008f22:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8008f26:	d1bb      	bne.n	8008ea0 <dir_register+0x44>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008f28:	f04f 0a07 	mov.w	sl, #7
}
 8008f2c:	4650      	mov	r0, sl
 8008f2e:	b009      	add	sp, #36	; 0x24
 8008f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008f34:	3401      	adds	r4, #1
 8008f36:	e79d      	b.n	8008e74 <dir_register+0x18>
		while (*lfn) {	/* Create a CRC */
 8008f38:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 8008f3a:	f002 0c01 	and.w	ip, r2, #1
				wc >>= 1;
 8008f3e:	0852      	lsrs	r2, r2, #1
				sr = (sr << 1) + (wc & 1);
 8008f40:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8008f44:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008f48:	bf18      	it	ne
 8008f4a:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8008f4e:	3801      	subs	r0, #1
 8008f50:	d1f3      	bne.n	8008f3a <dir_register+0xde>
 8008f52:	e7b2      	b.n	8008eba <dir_register+0x5e>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008f54:	464b      	mov	r3, r9
 8008f56:	e7b4      	b.n	8008ec2 <dir_register+0x66>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008f58:	4603      	mov	r3, r0
 8008f5a:	e7c6      	b.n	8008eea <dir_register+0x8e>
				n = 0;					/* Not a blank entry. Restart to search */
 8008f5c:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 8008f5e:	2101      	movs	r1, #1
 8008f60:	4628      	mov	r0, r5
 8008f62:	f7ff fe54 	bl	8008c0e <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008f66:	4682      	mov	sl, r0
 8008f68:	b308      	cbz	r0, 8008fae <dir_register+0x152>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008f6a:	f1ba 0f04 	cmp.w	sl, #4
 8008f6e:	d0db      	beq.n	8008f28 <dir_register+0xcc>
 8008f70:	e7dc      	b.n	8008f2c <dir_register+0xd0>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008f72:	f04f 0a06 	mov.w	sl, #6
 8008f76:	e7d9      	b.n	8008f2c <dir_register+0xd0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008f78:	2804      	cmp	r0, #4
 8008f7a:	d1d7      	bne.n	8008f2c <dir_register+0xd0>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008f7c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8008f80:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008f84:	f89d 301f 	ldrb.w	r3, [sp, #31]
	res = dir_sdi(dp, 0);
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4628      	mov	r0, r5
	FATFS *fs = dp->obj.fs;
 8008f8c:	f8d5 9000 	ldr.w	r9, [r5]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008f90:	079b      	lsls	r3, r3, #30
 8008f92:	bf45      	ittet	mi
 8008f94:	340c      	addmi	r4, #12
 8008f96:	230d      	movmi	r3, #13
 8008f98:	2401      	movpl	r4, #1
 8008f9a:	fbb4 f4f3 	udivmi	r4, r4, r3
 8008f9e:	bf48      	it	mi
 8008fa0:	3401      	addmi	r4, #1
	res = dir_sdi(dp, 0);
 8008fa2:	f7ff fca6 	bl	80088f2 <dir_sdi>
	if (res == FR_OK) {
 8008fa6:	4682      	mov	sl, r0
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d1de      	bne.n	8008f6a <dir_register+0x10e>
		n = 0;
 8008fac:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 8008fae:	69e9      	ldr	r1, [r5, #28]
 8008fb0:	4648      	mov	r0, r9
 8008fb2:	f7ff fa10 	bl	80083d6 <move_window>
			if (res != FR_OK) break;
 8008fb6:	4682      	mov	sl, r0
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d1d6      	bne.n	8008f6a <dir_register+0x10e>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008fbc:	6a2b      	ldr	r3, [r5, #32]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2be5      	cmp	r3, #229	; 0xe5
 8008fc2:	d001      	beq.n	8008fc8 <dir_register+0x16c>
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1c9      	bne.n	8008f5c <dir_register+0x100>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008fc8:	f108 0801 	add.w	r8, r8, #1
 8008fcc:	4544      	cmp	r4, r8
 8008fce:	d1c6      	bne.n	8008f5e <dir_register+0x102>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008fd0:	3c01      	subs	r4, #1
 8008fd2:	d056      	beq.n	8009082 <dir_register+0x226>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008fd4:	6969      	ldr	r1, [r5, #20]
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8008fdc:	f7ff fc89 	bl	80088f2 <dir_sdi>
		if (res == FR_OK) {
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d1a2      	bne.n	8008f2c <dir_register+0xd0>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008fe6:	4630      	mov	r0, r6
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008fe8:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008fec:	f7ff f960 	bl	80082b0 <sum_sfn>
 8008ff0:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 8008ff2:	69e9      	ldr	r1, [r5, #28]
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	f7ff f9ee 	bl	80083d6 <move_window>
 8008ffa:	4682      	mov	sl, r0
				if (res != FR_OK) break;
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d195      	bne.n	8008f2c <dir_register+0xd0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009000:	6a2b      	ldr	r3, [r5, #32]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009002:	220f      	movs	r2, #15
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009004:	b2e1      	uxtb	r1, r4
 8009006:	f8d7 e00c 	ldr.w	lr, [r7, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800900a:	f04f 0c0d 	mov.w	ip, #13
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800900e:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009010:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009012:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Type] = 0;
 8009016:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009018:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
 800901c:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
 800901e:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8009020:	76d8      	strb	r0, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009022:	9201      	str	r2, [sp, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009024:	4548      	cmp	r0, r9
 8009026:	bf1f      	itttt	ne
 8009028:	9a01      	ldrne	r2, [sp, #4]
 800902a:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
 800902e:	3201      	addne	r2, #1
 8009030:	9201      	strne	r2, [sp, #4]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009032:	4a21      	ldr	r2, [pc, #132]	; (80090b8 <dir_register+0x25c>)
 8009034:	f81c a002 	ldrb.w	sl, [ip, r2]
	} while (++s < 13);
 8009038:	f10c 0c01 	add.w	ip, ip, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800903c:	f803 000a 	strb.w	r0, [r3, sl]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009040:	eb03 0b0a 	add.w	fp, r3, sl
	*ptr++ = (BYTE)val; val >>= 8;
 8009044:	ea4f 2a10 	mov.w	sl, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009048:	2800      	cmp	r0, #0
 800904a:	bf08      	it	eq
 800904c:	4648      	moveq	r0, r9
	} while (++s < 13);
 800904e:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8009052:	f88b a001 	strb.w	sl, [fp, #1]
	} while (++s < 13);
 8009056:	d1e5      	bne.n	8009024 <dir_register+0x1c8>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009058:	4548      	cmp	r0, r9
 800905a:	d003      	beq.n	8009064 <dir_register+0x208>
 800905c:	9a01      	ldr	r2, [sp, #4]
 800905e:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8009062:	b90a      	cbnz	r2, 8009068 <dir_register+0x20c>
 8009064:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009068:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 800906a:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 800906c:	2100      	movs	r1, #0
 800906e:	4628      	mov	r0, r5
				fs->wflag = 1;
 8009070:	70fb      	strb	r3, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009072:	f7ff fdcc 	bl	8008c0e <dir_next>
			} while (res == FR_OK && --nent);
 8009076:	4682      	mov	sl, r0
 8009078:	2800      	cmp	r0, #0
 800907a:	f47f af57 	bne.w	8008f2c <dir_register+0xd0>
 800907e:	3c01      	subs	r4, #1
 8009080:	d1b7      	bne.n	8008ff2 <dir_register+0x196>
		res = move_window(fs, dp->sect);
 8009082:	69e9      	ldr	r1, [r5, #28]
 8009084:	4638      	mov	r0, r7
 8009086:	f7ff f9a6 	bl	80083d6 <move_window>
		if (res == FR_OK) {
 800908a:	4682      	mov	sl, r0
 800908c:	2800      	cmp	r0, #0
 800908e:	f47f af4d 	bne.w	8008f2c <dir_register+0xd0>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009092:	4601      	mov	r1, r0
 8009094:	2220      	movs	r2, #32
 8009096:	6a28      	ldr	r0, [r5, #32]
 8009098:	f7ff f852 	bl	8008140 <mem_set>
 800909c:	220b      	movs	r2, #11
 800909e:	4631      	mov	r1, r6
 80090a0:	6a28      	ldr	r0, [r5, #32]
 80090a2:	f7ff f94b 	bl	800833c <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80090a6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80090aa:	6a2a      	ldr	r2, [r5, #32]
 80090ac:	f003 0318 	and.w	r3, r3, #24
 80090b0:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 80090b2:	2301      	movs	r3, #1
 80090b4:	70fb      	strb	r3, [r7, #3]
 80090b6:	e739      	b.n	8008f2c <dir_register+0xd0>
 80090b8:	08010dca 	.word	0x08010dca
 80090bc:	00011021 	.word	0x00011021

080090c0 <dir_read.constprop.10>:
FRESULT dir_read (
 80090c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 80090c4:	25ff      	movs	r5, #255	; 0xff
FRESULT dir_read (
 80090c6:	4681      	mov	r9, r0
	FATFS *fs = dp->obj.fs;
 80090c8:	6806      	ldr	r6, [r0, #0]
	FRESULT res = FR_NO_FILE;
 80090ca:	f04f 0a04 	mov.w	sl, #4
	BYTE ord = 0xFF, sum = 0xFF;
 80090ce:	462c      	mov	r4, r5
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80090d0:	4f44      	ldr	r7, [pc, #272]	; (80091e4 <dir_read.constprop.10+0x124>)
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80090d2:	f64f 78ff 	movw	r8, #65535	; 0xffff
	while (dp->sect) {
 80090d6:	f8d9 101c 	ldr.w	r1, [r9, #28]
 80090da:	b919      	cbnz	r1, 80090e4 <dir_read.constprop.10+0x24>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80090dc:	f1ba 0f00 	cmp.w	sl, #0
 80090e0:	d072      	beq.n	80091c8 <dir_read.constprop.10+0x108>
 80090e2:	e061      	b.n	80091a8 <dir_read.constprop.10+0xe8>
		res = move_window(fs, dp->sect);
 80090e4:	4630      	mov	r0, r6
 80090e6:	f7ff f976 	bl	80083d6 <move_window>
		if (res != FR_OK) break;
 80090ea:	4682      	mov	sl, r0
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d15b      	bne.n	80091a8 <dir_read.constprop.10+0xe8>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80090f0:	f8d9 0020 	ldr.w	r0, [r9, #32]
 80090f4:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) {
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d070      	beq.n	80091dc <dir_read.constprop.10+0x11c>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80090fa:	7ac2      	ldrb	r2, [r0, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80090fc:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80090fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8009102:	f889 2006 	strb.w	r2, [r9, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009106:	d055      	beq.n	80091b4 <dir_read.constprop.10+0xf4>
 8009108:	2b2e      	cmp	r3, #46	; 0x2e
 800910a:	d053      	beq.n	80091b4 <dir_read.constprop.10+0xf4>
 800910c:	f022 0120 	bic.w	r1, r2, #32
 8009110:	2908      	cmp	r1, #8
 8009112:	d04f      	beq.n	80091b4 <dir_read.constprop.10+0xf4>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8009114:	2a0f      	cmp	r2, #15
 8009116:	d152      	bne.n	80091be <dir_read.constprop.10+0xfe>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009118:	065a      	lsls	r2, r3, #25
 800911a:	d549      	bpl.n	80091b0 <dir_read.constprop.10+0xf0>
						c &= (BYTE)~LLEF; ord = c;
 800911c:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8009120:	f8d9 3014 	ldr.w	r3, [r9, #20]
						sum = dp->dir[LDIR_Chksum];
 8009124:	7b45      	ldrb	r5, [r0, #13]
						dp->blk_ofs = dp->dptr;
 8009126:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800912a:	7b43      	ldrb	r3, [r0, #13]
 800912c:	42ab      	cmp	r3, r5
 800912e:	d141      	bne.n	80091b4 <dir_read.constprop.10+0xf4>
	rv = rv << 8 | ptr[0];
 8009130:	7ec2      	ldrb	r2, [r0, #27]
 8009132:	7e83      	ldrb	r3, [r0, #26]
 8009134:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8009138:	b21b      	sxth	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d13a      	bne.n	80091b4 <dir_read.constprop.10+0xf4>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800913e:	7802      	ldrb	r2, [r0, #0]
 8009140:	f04f 0c0d 	mov.w	ip, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009144:	68f1      	ldr	r1, [r6, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009146:	f04f 0e01 	mov.w	lr, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800914a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800914e:	3a01      	subs	r2, #1
 8009150:	fb0c fc02 	mul.w	ip, ip, r2
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009154:	f813 a007 	ldrb.w	sl, [r3, r7]
 8009158:	eb00 020a 	add.w	r2, r0, sl
	rv = rv << 8 | ptr[0];
 800915c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8009160:	f810 200a 	ldrb.w	r2, [r0, sl]
 8009164:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		if (wc) {
 8009168:	f1be 0f00 	cmp.w	lr, #0
 800916c:	d024      	beq.n	80091b8 <dir_read.constprop.10+0xf8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800916e:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
 8009172:	d81f      	bhi.n	80091b4 <dir_read.constprop.10+0xf4>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009174:	f821 201c 	strh.w	r2, [r1, ip, lsl #1]
	rv = rv << 8 | ptr[0];
 8009178:	4696      	mov	lr, r2
			lfnbuf[i++] = wc = uc;			/* Store it */
 800917a:	f10c 0c01 	add.w	ip, ip, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800917e:	3301      	adds	r3, #1
 8009180:	2b0d      	cmp	r3, #13
 8009182:	d1e7      	bne.n	8009154 <dir_read.constprop.10+0x94>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009184:	7803      	ldrb	r3, [r0, #0]
 8009186:	065b      	lsls	r3, r3, #25
 8009188:	d505      	bpl.n	8009196 <dir_read.constprop.10+0xd6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800918a:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
 800918e:	d811      	bhi.n	80091b4 <dir_read.constprop.10+0xf4>
		lfnbuf[i] = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	f821 301c 	strh.w	r3, [r1, ip, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009196:	3c01      	subs	r4, #1
 8009198:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
 800919a:	2100      	movs	r1, #0
 800919c:	4648      	mov	r0, r9
 800919e:	f7ff fd36 	bl	8008c0e <dir_next>
		if (res != FR_OK) break;
 80091a2:	4682      	mov	sl, r0
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d096      	beq.n	80090d6 <dir_read.constprop.10+0x16>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80091a8:	2300      	movs	r3, #0
 80091aa:	f8c9 301c 	str.w	r3, [r9, #28]
 80091ae:	e00d      	b.n	80091cc <dir_read.constprop.10+0x10c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80091b0:	42a3      	cmp	r3, r4
 80091b2:	d0ba      	beq.n	800912a <dir_read.constprop.10+0x6a>
 80091b4:	24ff      	movs	r4, #255	; 0xff
 80091b6:	e7f0      	b.n	800919a <dir_read.constprop.10+0xda>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80091b8:	4542      	cmp	r2, r8
 80091ba:	d0e0      	beq.n	800917e <dir_read.constprop.10+0xbe>
 80091bc:	e7fa      	b.n	80091b4 <dir_read.constprop.10+0xf4>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80091be:	b944      	cbnz	r4, 80091d2 <dir_read.constprop.10+0x112>
 80091c0:	f7ff f876 	bl	80082b0 <sum_sfn>
 80091c4:	42a8      	cmp	r0, r5
 80091c6:	d104      	bne.n	80091d2 <dir_read.constprop.10+0x112>
		res = move_window(fs, dp->sect);
 80091c8:	f04f 0a00 	mov.w	sl, #0
}
 80091cc:	4650      	mov	r0, sl
 80091ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80091d2:	f04f 33ff 	mov.w	r3, #4294967295
 80091d6:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 80091da:	e7f7      	b.n	80091cc <dir_read.constprop.10+0x10c>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80091dc:	f04f 0a04 	mov.w	sl, #4
 80091e0:	e7e2      	b.n	80091a8 <dir_read.constprop.10+0xe8>
 80091e2:	bf00      	nop
 80091e4:	08010dca 	.word	0x08010dca

080091e8 <follow_path>:
{
 80091e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 80091ec:	6803      	ldr	r3, [r0, #0]
{
 80091ee:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	468a      	mov	sl, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80091f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f8:	2b2f      	cmp	r3, #47	; 0x2f
 80091fa:	d0fa      	beq.n	80091f2 <follow_path+0xa>
 80091fc:	2b5c      	cmp	r3, #92	; 0x5c
 80091fe:	d0f8      	beq.n	80091f2 <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8009200:	2100      	movs	r1, #0
 8009202:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009204:	f89a 3000 	ldrb.w	r3, [sl]
 8009208:	2b1f      	cmp	r3, #31
 800920a:	f200 80ad 	bhi.w	8009368 <follow_path+0x180>
		dp->fn[NSFLAG] = NS_NONAME;
 800920e:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8009210:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8009212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8009216:	b003      	add	sp, #12
 8009218:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800921c:	f7ff bb69 	b.w	80088f2 <dir_sdi>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009220:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8009224:	d00b      	beq.n	800923e <follow_path+0x56>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009226:	2101      	movs	r1, #1
 8009228:	f000 feca 	bl	8009fc0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800922c:	b138      	cbz	r0, 800923e <follow_path+0x56>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800922e:	287f      	cmp	r0, #127	; 0x7f
 8009230:	d807      	bhi.n	8009242 <follow_path+0x5a>
 8009232:	4984      	ldr	r1, [pc, #528]	; (8009444 <follow_path+0x25c>)
	while (*str && *str != chr) str++;
 8009234:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009238:	b11a      	cbz	r2, 8009242 <follow_path+0x5a>
 800923a:	4290      	cmp	r0, r2
 800923c:	d1fa      	bne.n	8009234 <follow_path+0x4c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800923e:	2006      	movs	r0, #6
 8009240:	e04e      	b.n	80092e0 <follow_path+0xf8>
		lfn[di++] = w;					/* Store the Unicode character */
 8009242:	f825 0f02 	strh.w	r0, [r5, #2]!
 8009246:	4626      	mov	r6, r4
 8009248:	e096      	b.n	8009378 <follow_path+0x190>
		w = lfn[di - 1];
 800924a:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800924e:	2920      	cmp	r1, #32
 8009250:	d002      	beq.n	8009258 <follow_path+0x70>
 8009252:	292e      	cmp	r1, #46	; 0x2e
 8009254:	f040 80ae 	bne.w	80093b4 <follow_path+0x1cc>
		di--;
 8009258:	3e01      	subs	r6, #1
 800925a:	e0a8      	b.n	80093ae <follow_path+0x1c6>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800925c:	3101      	adds	r1, #1
 800925e:	e0b9      	b.n	80093d4 <follow_path+0x1ec>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009260:	45c1      	cmp	r9, r8
 8009262:	d205      	bcs.n	8009270 <follow_path+0x88>
 8009264:	42b2      	cmp	r2, r6
 8009266:	d14b      	bne.n	8009300 <follow_path+0x118>
			if (ni == 11) {				/* Long extension */
 8009268:	f1b8 0f0b 	cmp.w	r8, #11
 800926c:	d140      	bne.n	80092f0 <follow_path+0x108>
 800926e:	e002      	b.n	8009276 <follow_path+0x8e>
 8009270:	f1b8 0f0b 	cmp.w	r8, #11
 8009274:	d137      	bne.n	80092e6 <follow_path+0xfe>
				cf |= NS_LOSS | NS_LFN; break;
 8009276:	f044 0403 	orr.w	r4, r4, #3
 800927a:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800927e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009282:	2be5      	cmp	r3, #229	; 0xe5
 8009284:	bf04      	itt	eq
 8009286:	2305      	moveq	r3, #5
 8009288:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800928c:	f1b8 0f08 	cmp.w	r8, #8
 8009290:	bf04      	itt	eq
 8009292:	00ad      	lsleq	r5, r5, #2
 8009294:	b2ed      	uxtbeq	r5, r5
 8009296:	f005 030c 	and.w	r3, r5, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800929a:	2b0c      	cmp	r3, #12
 800929c:	d003      	beq.n	80092a6 <follow_path+0xbe>
 800929e:	f005 0203 	and.w	r2, r5, #3
 80092a2:	2a03      	cmp	r2, #3
 80092a4:	d101      	bne.n	80092aa <follow_path+0xc2>
 80092a6:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80092aa:	07a1      	lsls	r1, r4, #30
 80092ac:	d409      	bmi.n	80092c2 <follow_path+0xda>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80092ae:	f005 0503 	and.w	r5, r5, #3
 80092b2:	2d01      	cmp	r5, #1
 80092b4:	bf08      	it	eq
 80092b6:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	bf08      	it	eq
 80092be:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80092c2:	f887 402f 	strb.w	r4, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80092c6:	4638      	mov	r0, r7
 80092c8:	f7ff fd16 	bl	8008cf8 <dir_find>
			ns = dp->fn[NSFLAG];
 80092cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d038      	beq.n	8009346 <follow_path+0x15e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80092d4:	2804      	cmp	r0, #4
 80092d6:	d103      	bne.n	80092e0 <follow_path+0xf8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80092d8:	f013 0f04 	tst.w	r3, #4
 80092dc:	bf08      	it	eq
 80092de:	2005      	moveq	r0, #5
}
 80092e0:	b003      	add	sp, #12
 80092e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80092e6:	42b2      	cmp	r2, r6
 80092e8:	d002      	beq.n	80092f0 <follow_path+0x108>
 80092ea:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 80092ee:	d8c6      	bhi.n	800927e <follow_path+0x96>
			b <<= 2; continue;
 80092f0:	00ad      	lsls	r5, r5, #2
 80092f2:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80092f4:	f04f 080b 	mov.w	r8, #11
 80092f8:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 80092fc:	b2ed      	uxtb	r5, r5
 80092fe:	e08f      	b.n	8009420 <follow_path+0x238>
		if (w >= 0x80) {				/* Non ASCII character */
 8009300:	287f      	cmp	r0, #127	; 0x7f
 8009302:	d90c      	bls.n	800931e <follow_path+0x136>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009304:	2100      	movs	r1, #0
 8009306:	9201      	str	r2, [sp, #4]
 8009308:	f044 0402 	orr.w	r4, r4, #2
 800930c:	f000 fe58 	bl	8009fc0 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009310:	9a01      	ldr	r2, [sp, #4]
 8009312:	b158      	cbz	r0, 800932c <follow_path+0x144>
 8009314:	4b4c      	ldr	r3, [pc, #304]	; (8009448 <follow_path+0x260>)
 8009316:	4418      	add	r0, r3
 8009318:	f810 0c73 	ldrb.w	r0, [r0, #-115]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800931c:	b130      	cbz	r0, 800932c <follow_path+0x144>
 800931e:	4b4b      	ldr	r3, [pc, #300]	; (800944c <follow_path+0x264>)
	while (*str && *str != chr) str++;
 8009320:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8009324:	2900      	cmp	r1, #0
 8009326:	d07f      	beq.n	8009428 <follow_path+0x240>
 8009328:	4281      	cmp	r1, r0
 800932a:	d1f9      	bne.n	8009320 <follow_path+0x138>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800932c:	f044 0403 	orr.w	r4, r4, #3
 8009330:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8009332:	eb07 0109 	add.w	r1, r7, r9
 8009336:	f109 0901 	add.w	r9, r9, #1
 800933a:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 800933e:	e06f      	b.n	8009420 <follow_path+0x238>
					b |= 2;
 8009340:	f045 0502 	orr.w	r5, r5, #2
 8009344:	e7f5      	b.n	8009332 <follow_path+0x14a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009346:	075a      	lsls	r2, r3, #29
 8009348:	d4ca      	bmi.n	80092e0 <follow_path+0xf8>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800934a:	79bb      	ldrb	r3, [r7, #6]
 800934c:	06db      	lsls	r3, r3, #27
 800934e:	d569      	bpl.n	8009424 <follow_path+0x23c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009350:	9b00      	ldr	r3, [sp, #0]
 8009352:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935c:	4419      	add	r1, r3
 800935e:	9b00      	ldr	r3, [sp, #0]
 8009360:	7818      	ldrb	r0, [r3, #0]
 8009362:	f7fe fff4 	bl	800834e <ld_clust.isra.1>
 8009366:	60b8      	str	r0, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	f10a 38ff 	add.w	r8, sl, #4294967295
 800936e:	2600      	movs	r6, #0
 8009370:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8009374:	f1ab 0502 	sub.w	r5, fp, #2
		w = p[si++];					/* Get a character */
 8009378:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 800937c:	1c74      	adds	r4, r6, #1
		if (w < ' ') break;				/* Break if end of the path name */
 800937e:	281f      	cmp	r0, #31
 8009380:	d90e      	bls.n	80093a0 <follow_path+0x1b8>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009382:	282f      	cmp	r0, #47	; 0x2f
 8009384:	d002      	beq.n	800938c <follow_path+0x1a4>
 8009386:	285c      	cmp	r0, #92	; 0x5c
 8009388:	f47f af4a 	bne.w	8009220 <follow_path+0x38>
 800938c:	eb0a 0204 	add.w	r2, sl, r4
 8009390:	eba2 040a 	sub.w	r4, r2, sl
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009394:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009398:	292f      	cmp	r1, #47	; 0x2f
 800939a:	d0f9      	beq.n	8009390 <follow_path+0x1a8>
 800939c:	295c      	cmp	r1, #92	; 0x5c
 800939e:	d0f7      	beq.n	8009390 <follow_path+0x1a8>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80093a0:	281f      	cmp	r0, #31
	*path = &p[si];						/* Return pointer to the next segment */
 80093a2:	44a2      	add	sl, r4
 80093a4:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80093a8:	bf8c      	ite	hi
 80093aa:	2400      	movhi	r4, #0
 80093ac:	2404      	movls	r4, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80093ae:	2e00      	cmp	r6, #0
 80093b0:	f47f af4b 	bne.w	800924a <follow_path+0x62>
	lfn[di] = 0;						/* LFN is created */
 80093b4:	f04f 0800 	mov.w	r8, #0
 80093b8:	eb0b 0546 	add.w	r5, fp, r6, lsl #1
 80093bc:	f82b 8016 	strh.w	r8, [fp, r6, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80093c0:	2e00      	cmp	r6, #0
 80093c2:	f43f af3c 	beq.w	800923e <follow_path+0x56>
	mem_set(dp->fn, ' ', 11);
 80093c6:	2120      	movs	r1, #32
 80093c8:	220b      	movs	r2, #11
 80093ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80093ce:	f7fe feb7 	bl	8008140 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80093d2:	4641      	mov	r1, r8
 80093d4:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
 80093d8:	2a20      	cmp	r2, #32
 80093da:	f43f af3f 	beq.w	800925c <follow_path+0x74>
 80093de:	2a2e      	cmp	r2, #46	; 0x2e
 80093e0:	f43f af3c 	beq.w	800925c <follow_path+0x74>
	if (si) cf |= NS_LOSS | NS_LFN;
 80093e4:	b109      	cbz	r1, 80093ea <follow_path+0x202>
 80093e6:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80093ea:	f835 2d02 	ldrh.w	r2, [r5, #-2]!
 80093ee:	2a2e      	cmp	r2, #46	; 0x2e
 80093f0:	d001      	beq.n	80093f6 <follow_path+0x20e>
 80093f2:	3e01      	subs	r6, #1
 80093f4:	d1f9      	bne.n	80093ea <follow_path+0x202>
		dp->fn[i++] = (BYTE)w;
 80093f6:	f04f 0900 	mov.w	r9, #0
 80093fa:	f04f 0808 	mov.w	r8, #8
 80093fe:	464d      	mov	r5, r9
		w = lfn[si++];					/* Get an LFN character */
 8009400:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 8009404:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8009406:	2800      	cmp	r0, #0
 8009408:	f43f af39 	beq.w	800927e <follow_path+0x96>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800940c:	2820      	cmp	r0, #32
 800940e:	d005      	beq.n	800941c <follow_path+0x234>
 8009410:	282e      	cmp	r0, #46	; 0x2e
 8009412:	f47f af25 	bne.w	8009260 <follow_path+0x78>
 8009416:	42b2      	cmp	r2, r6
 8009418:	f43f af26 	beq.w	8009268 <follow_path+0x80>
			cf |= NS_LOSS | NS_LFN; continue;
 800941c:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8009420:	4611      	mov	r1, r2
 8009422:	e7ed      	b.n	8009400 <follow_path+0x218>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009424:	2005      	movs	r0, #5
	return res;
 8009426:	e75b      	b.n	80092e0 <follow_path+0xf8>
				if (IsUpper(w)) {		/* ASCII large capital */
 8009428:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800942c:	2919      	cmp	r1, #25
 800942e:	d987      	bls.n	8009340 <follow_path+0x158>
					if (IsLower(w)) {	/* ASCII small capital */
 8009430:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8009434:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8009436:	bf9e      	ittt	ls
 8009438:	3820      	subls	r0, #32
 800943a:	f045 0501 	orrls.w	r5, r5, #1
 800943e:	b280      	uxthls	r0, r0
 8009440:	e777      	b.n	8009332 <follow_path+0x14a>
 8009442:	bf00      	nop
 8009444:	080114da 	.word	0x080114da
 8009448:	08010dca 	.word	0x08010dca
 800944c:	080114e3 	.word	0x080114e3

08009450 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009450:	b530      	push	{r4, r5, lr}
 8009452:	b085      	sub	sp, #20
 8009454:	4615      	mov	r5, r2
 8009456:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800945a:	a804      	add	r0, sp, #16
 800945c:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009460:	f7fe ff35 	bl	80082ce <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009464:	2800      	cmp	r0, #0
 8009466:	db1f      	blt.n	80094a8 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009468:	0081      	lsls	r1, r0, #2
 800946a:	4b11      	ldr	r3, [pc, #68]	; (80094b0 <f_mount+0x60>)
 800946c:	185a      	adds	r2, r3, r1
 800946e:	6a10      	ldr	r0, [r2, #32]

	if (cfs) {
 8009470:	b150      	cbz	r0, 8009488 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	2400      	movs	r4, #0
 8009476:	4290      	cmp	r0, r2
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009478:	7004      	strb	r4, [r0, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800947a:	bf04      	itt	eq
 800947c:	2200      	moveq	r2, #0
 800947e:	601a      	streq	r2, [r3, #0]
 8009480:	691a      	ldr	r2, [r3, #16]
 8009482:	4290      	cmp	r0, r2
 8009484:	bf08      	it	eq
 8009486:	611c      	streq	r4, [r3, #16]
	}

	if (fs) {
 8009488:	9801      	ldr	r0, [sp, #4]
 800948a:	b108      	cbz	r0, 8009490 <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 800948c:	2200      	movs	r2, #0
 800948e:	7002      	strb	r2, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009490:	440b      	add	r3, r1
 8009492:	6218      	str	r0, [r3, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009494:	b130      	cbz	r0, 80094a4 <f_mount+0x54>
 8009496:	2d01      	cmp	r5, #1
 8009498:	d108      	bne.n	80094ac <f_mount+0x5c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800949a:	2200      	movs	r2, #0
 800949c:	a901      	add	r1, sp, #4
 800949e:	4668      	mov	r0, sp
 80094a0:	f7fe fff4 	bl	800848c <find_volume>
	LEAVE_FF(fs, res);
}
 80094a4:	b005      	add	sp, #20
 80094a6:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80094a8:	200b      	movs	r0, #11
 80094aa:	e7fb      	b.n	80094a4 <f_mount+0x54>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80094ac:	2000      	movs	r0, #0
 80094ae:	e7f9      	b.n	80094a4 <f_mount+0x54>
 80094b0:	20006f18 	.word	0x20006f18

080094b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80094b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094b8:	b091      	sub	sp, #68	; 0x44
 80094ba:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80094bc:	4605      	mov	r5, r0
{
 80094be:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 80094c0:	2800      	cmp	r0, #0
 80094c2:	f000 810b 	beq.w	80096dc <f_open+0x228>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80094c6:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80094ca:	a902      	add	r1, sp, #8
 80094cc:	a801      	add	r0, sp, #4
 80094ce:	4632      	mov	r2, r6
 80094d0:	f7fe ffdc 	bl	800848c <find_volume>
	if (res == FR_OK) {
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f040 80ff 	bne.w	80096d8 <f_open+0x224>
		dj.obj.fs = fs;
 80094da:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
 80094dc:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
 80094e0:	9303      	str	r3, [sp, #12]
		INIT_NAMBUF(fs);
 80094e2:	f000 fd69 	bl	8009fb8 <ff_memalloc>
 80094e6:	4607      	mov	r7, r0
 80094e8:	2800      	cmp	r0, #0
 80094ea:	f000 80f9 	beq.w	80096e0 <f_open+0x22c>
 80094ee:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 80094f0:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 80094f2:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80094f4:	a803      	add	r0, sp, #12
 80094f6:	f7ff fe77 	bl	80091e8 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80094fa:	4604      	mov	r4, r0
 80094fc:	b960      	cbnz	r0, 8009518 <f_open+0x64>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80094fe:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8009502:	2b00      	cmp	r3, #0
 8009504:	db64      	blt.n	80095d0 <f_open+0x11c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009506:	f016 0f3e 	tst.w	r6, #62	; 0x3e
 800950a:	a803      	add	r0, sp, #12
 800950c:	bf14      	ite	ne
 800950e:	2101      	movne	r1, #1
 8009510:	2100      	moveq	r1, #0
 8009512:	f7fe fe1b 	bl	800814c <chk_lock>
 8009516:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009518:	f018 0f1c 	tst.w	r8, #28
 800951c:	d064      	beq.n	80095e8 <f_open+0x134>
			if (res != FR_OK) {					/* No file, create new */
 800951e:	2c00      	cmp	r4, #0
 8009520:	d058      	beq.n	80095d4 <f_open+0x120>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009522:	2c04      	cmp	r4, #4
 8009524:	d14a      	bne.n	80095bc <f_open+0x108>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009526:	4b6f      	ldr	r3, [pc, #444]	; (80096e4 <f_open+0x230>)
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	b11a      	cbz	r2, 8009534 <f_open+0x80>
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	2b00      	cmp	r3, #0
 8009530:	f040 80cc 	bne.w	80096cc <f_open+0x218>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009534:	a803      	add	r0, sp, #12
 8009536:	f7ff fc91 	bl	8008e5c <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800953a:	4604      	mov	r4, r0
 800953c:	2800      	cmp	r0, #0
 800953e:	d13d      	bne.n	80095bc <f_open+0x108>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009540:	f046 0608 	orr.w	r6, r6, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009544:	0730      	lsls	r0, r6, #28
 8009546:	d55a      	bpl.n	80095fe <f_open+0x14a>
				dw = GET_FATTIME();
 8009548:	f7fe fde8 	bl	800811c <get_fattime>
 800954c:	4602      	mov	r2, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800954e:	4601      	mov	r1, r0
 8009550:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009552:	300e      	adds	r0, #14
 8009554:	f7fe fdec 	bl	8008130 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009558:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800955a:	4611      	mov	r1, r2
 800955c:	3016      	adds	r0, #22
 800955e:	f7fe fde7 	bl	8008130 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009564:	2220      	movs	r2, #32
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009566:	9c02      	ldr	r4, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009568:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800956a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800956e:	7820      	ldrb	r0, [r4, #0]
 8009570:	4649      	mov	r1, r9
 8009572:	f7fe feec 	bl	800834e <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009576:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009578:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800957a:	4620      	mov	r0, r4
 800957c:	f7fe fef6 	bl	800836c <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8009582:	2200      	movs	r2, #0
					fs->wflag = 1;
 8009584:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8009586:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8009588:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800958a:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800958c:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800958e:	9b02      	ldr	r3, [sp, #8]
 8009590:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009592:	f1b8 0f00 	cmp.w	r8, #0
 8009596:	d032      	beq.n	80095fe <f_open+0x14a>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 8009598:	4641      	mov	r1, r8
 800959a:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 800959c:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 80095a0:	f7ff fa41 	bl	8008a26 <remove_chain>
						if (res == FR_OK) {
 80095a4:	4604      	mov	r4, r0
 80095a6:	b948      	cbnz	r0, 80095bc <f_open+0x108>
							res = move_window(fs, dw);
 80095a8:	4649      	mov	r1, r9
 80095aa:	9802      	ldr	r0, [sp, #8]
 80095ac:	f7fe ff13 	bl	80083d6 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80095b0:	f108 33ff 	add.w	r3, r8, #4294967295
 80095b4:	9a02      	ldr	r2, [sp, #8]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 80095b6:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80095b8:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 80095ba:	b300      	cbz	r0, 80095fe <f_open+0x14a>
				}
			}
#endif
		}

		FREE_NAMBUF();
 80095bc:	4638      	mov	r0, r7
 80095be:	f000 fcfd 	bl	8009fbc <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80095c2:	b10c      	cbz	r4, 80095c8 <f_open+0x114>
 80095c4:	2300      	movs	r3, #0
 80095c6:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 80095c8:	4620      	mov	r0, r4
 80095ca:	b011      	add	sp, #68	; 0x44
 80095cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				res = FR_INVALID_NAME;
 80095d0:	2406      	movs	r4, #6
 80095d2:	e7a1      	b.n	8009518 <f_open+0x64>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80095d4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80095d8:	f013 0f11 	tst.w	r3, #17
 80095dc:	d17a      	bne.n	80096d4 <f_open+0x220>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80095de:	f018 0f04 	tst.w	r8, #4
 80095e2:	d0af      	beq.n	8009544 <f_open+0x90>
 80095e4:	2408      	movs	r4, #8
 80095e6:	e7e9      	b.n	80095bc <f_open+0x108>
			if (res == FR_OK) {					/* Following succeeded */
 80095e8:	2c00      	cmp	r4, #0
 80095ea:	d1e7      	bne.n	80095bc <f_open+0x108>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80095ec:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80095f0:	06da      	lsls	r2, r3, #27
 80095f2:	d46d      	bmi.n	80096d0 <f_open+0x21c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80095f4:	f018 0f02 	tst.w	r8, #2
 80095f8:	d001      	beq.n	80095fe <f_open+0x14a>
 80095fa:	07dc      	lsls	r4, r3, #31
 80095fc:	d46a      	bmi.n	80096d4 <f_open+0x220>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80095fe:	0730      	lsls	r0, r6, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009600:	9b02      	ldr	r3, [sp, #8]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009602:	a803      	add	r0, sp, #12
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				mode |= FA_MODIFIED;
 8009606:	bf48      	it	mi
 8009608:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800960c:	626b      	str	r3, [r5, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800960e:	f016 0ffe 	tst.w	r6, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8009612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009614:	bf14      	ite	ne
 8009616:	2101      	movne	r1, #1
 8009618:	2100      	moveq	r1, #0
			fp->dir_ptr = dj.dir;
 800961a:	62ab      	str	r3, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800961c:	f7fe fdd0 	bl	80081c0 <inc_lock>
 8009620:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009622:	b908      	cbnz	r0, 8009628 <f_open+0x174>
 8009624:	2402      	movs	r4, #2
 8009626:	e7c9      	b.n	80095bc <f_open+0x108>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009628:	9c02      	ldr	r4, [sp, #8]
 800962a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800962e:	7820      	ldrb	r0, [r4, #0]
 8009630:	4641      	mov	r1, r8
 8009632:	f7fe fe8c 	bl	800834e <ld_clust.isra.1>
 8009636:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009638:	f108 001c 	add.w	r0, r8, #28
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800963c:	f105 0830 	add.w	r8, r5, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009640:	f7fe fd6e 	bl	8008120 <ld_dword>
			fp->obj.id = fs->id;
 8009644:	88e3      	ldrh	r3, [r4, #6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009646:	2100      	movs	r1, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009648:	60e8      	str	r0, [r5, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800964a:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->obj.fs = fs;	 	/* Validate the file object */
 800964e:	602c      	str	r4, [r5, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009650:	62e9      	str	r1, [r5, #44]	; 0x2c
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009652:	4640      	mov	r0, r8
			fp->obj.id = fs->id;
 8009654:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 8009656:	752e      	strb	r6, [r5, #20]
			fp->err = 0;			/* Clear error flag */
 8009658:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800965a:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800965c:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800965e:	f7fe fd6f 	bl	8008140 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009662:	06b2      	lsls	r2, r6, #26
 8009664:	d401      	bmi.n	800966a <f_open+0x1b6>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009666:	2400      	movs	r4, #0
 8009668:	e7a8      	b.n	80095bc <f_open+0x108>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800966a:	68ee      	ldr	r6, [r5, #12]
 800966c:	2e00      	cmp	r6, #0
 800966e:	d0fa      	beq.n	8009666 <f_open+0x1b2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009670:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009672:	68a9      	ldr	r1, [r5, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009674:	895c      	ldrh	r4, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009676:	61ae      	str	r6, [r5, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009678:	0264      	lsls	r4, r4, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800967a:	42b4      	cmp	r4, r6
 800967c:	d319      	bcc.n	80096b2 <f_open+0x1fe>
 800967e:	2400      	movs	r4, #0
				fp->clust = clst;
 8009680:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009682:	2c00      	cmp	r4, #0
 8009684:	d19a      	bne.n	80095bc <f_open+0x108>
 8009686:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800968a:	2b00      	cmp	r3, #0
 800968c:	d0eb      	beq.n	8009666 <f_open+0x1b2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800968e:	9c02      	ldr	r4, [sp, #8]
 8009690:	4620      	mov	r0, r4
 8009692:	f7fe fdf1 	bl	8008278 <clust2sect>
 8009696:	2800      	cmp	r0, #0
 8009698:	d0c4      	beq.n	8009624 <f_open+0x170>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800969a:	eb00 2256 	add.w	r2, r0, r6, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800969e:	2301      	movs	r3, #1
 80096a0:	4641      	mov	r1, r8
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80096a2:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80096a4:	7860      	ldrb	r0, [r4, #1]
 80096a6:	f7fe fd0f 	bl	80080c8 <disk_read>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80096aa:	1c04      	adds	r4, r0, #0
 80096ac:	bf18      	it	ne
 80096ae:	2401      	movne	r4, #1
 80096b0:	e784      	b.n	80095bc <f_open+0x108>
					clst = get_fat(&fp->obj, clst);
 80096b2:	6828      	ldr	r0, [r5, #0]
 80096b4:	1b36      	subs	r6, r6, r4
 80096b6:	f7ff f8c2 	bl	800883e <get_fat.isra.7>
					if (clst <= 1) res = FR_INT_ERR;
 80096ba:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80096bc:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80096be:	d903      	bls.n	80096c8 <f_open+0x214>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80096c0:	1c43      	adds	r3, r0, #1
 80096c2:	d1da      	bne.n	800967a <f_open+0x1c6>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80096c4:	2401      	movs	r4, #1
 80096c6:	e7db      	b.n	8009680 <f_open+0x1cc>
					if (clst <= 1) res = FR_INT_ERR;
 80096c8:	2402      	movs	r4, #2
 80096ca:	e7d9      	b.n	8009680 <f_open+0x1cc>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80096cc:	2412      	movs	r4, #18
 80096ce:	e775      	b.n	80095bc <f_open+0x108>
					res = FR_NO_FILE;
 80096d0:	2404      	movs	r4, #4
 80096d2:	e773      	b.n	80095bc <f_open+0x108>
					res = FR_DENIED;
 80096d4:	2407      	movs	r4, #7
 80096d6:	e771      	b.n	80095bc <f_open+0x108>
 80096d8:	4604      	mov	r4, r0
 80096da:	e773      	b.n	80095c4 <f_open+0x110>
	if (!fp) return FR_INVALID_OBJECT;
 80096dc:	2409      	movs	r4, #9
 80096de:	e773      	b.n	80095c8 <f_open+0x114>
		INIT_NAMBUF(fs);
 80096e0:	2411      	movs	r4, #17
 80096e2:	e771      	b.n	80095c8 <f_open+0x114>
 80096e4:	20006f18 	.word	0x20006f18

080096e8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	469b      	mov	fp, r3
 80096ee:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80096f0:	2300      	movs	r3, #0
{
 80096f2:	4689      	mov	r9, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80096f4:	a903      	add	r1, sp, #12
{
 80096f6:	4604      	mov	r4, r0
	*br = 0;	/* Clear read byte counter */
 80096f8:	f8cb 3000 	str.w	r3, [fp]
{
 80096fc:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80096fe:	f7fe fe03 	bl	8008308 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009702:	4606      	mov	r6, r0
 8009704:	bb00      	cbnz	r0, 8009748 <f_read+0x60>
 8009706:	7d66      	ldrb	r6, [r4, #21]
 8009708:	b9f6      	cbnz	r6, 8009748 <f_read+0x60>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800970a:	7d23      	ldrb	r3, [r4, #20]
 800970c:	07da      	lsls	r2, r3, #31
 800970e:	f140 8095 	bpl.w	800983c <f_read+0x154>
	remain = fp->obj.objsize - fp->fptr;
 8009712:	68e3      	ldr	r3, [r4, #12]
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009714:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	remain = fp->obj.objsize - fp->fptr;
 8009718:	69a7      	ldr	r7, [r4, #24]
 800971a:	1bdf      	subs	r7, r3, r7
 800971c:	42af      	cmp	r7, r5
 800971e:	bf28      	it	cs
 8009720:	462f      	movcs	r7, r5
	for ( ;  btr;								/* Repeat until all data read */
 8009722:	b18f      	cbz	r7, 8009748 <f_read+0x60>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009724:	69a1      	ldr	r1, [r4, #24]
 8009726:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800972a:	2b00      	cmp	r3, #0
 800972c:	d178      	bne.n	8009820 <f_read+0x138>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800972e:	9b03      	ldr	r3, [sp, #12]
 8009730:	895b      	ldrh	r3, [r3, #10]
 8009732:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8009734:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 8009738:	9301      	str	r3, [sp, #4]
 800973a:	d119      	bne.n	8009770 <f_read+0x88>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800973c:	b941      	cbnz	r1, 8009750 <f_read+0x68>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800973e:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009740:	2801      	cmp	r0, #1
 8009742:	d810      	bhi.n	8009766 <f_read+0x7e>
 8009744:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009746:	7566      	strb	r6, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8009748:	4630      	mov	r0, r6
 800974a:	b005      	add	sp, #20
 800974c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8009750:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009752:	b11b      	cbz	r3, 800975c <f_read+0x74>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009754:	4620      	mov	r0, r4
 8009756:	f7fe fd9a 	bl	800828e <clmt_clust>
 800975a:	e7f1      	b.n	8009740 <f_read+0x58>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800975c:	69e1      	ldr	r1, [r4, #28]
 800975e:	6820      	ldr	r0, [r4, #0]
 8009760:	f7ff f86d 	bl	800883e <get_fat.isra.7>
 8009764:	e7ec      	b.n	8009740 <f_read+0x58>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	d101      	bne.n	800976e <f_read+0x86>
 800976a:	2601      	movs	r6, #1
 800976c:	e7eb      	b.n	8009746 <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
 800976e:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009770:	9b03      	ldr	r3, [sp, #12]
 8009772:	69e1      	ldr	r1, [r4, #28]
 8009774:	4618      	mov	r0, r3
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	f7fe fd7e 	bl	8008278 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800977c:	2800      	cmp	r0, #0
 800977e:	d0e1      	beq.n	8009744 <f_read+0x5c>
			sect += csect;
 8009780:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009782:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8009784:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009788:	d02c      	beq.n	80097e4 <f_read+0xfc>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800978a:	9b00      	ldr	r3, [sp, #0]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800978c:	4649      	mov	r1, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800978e:	9a01      	ldr	r2, [sp, #4]
 8009790:	895b      	ldrh	r3, [r3, #10]
 8009792:	442a      	add	r2, r5
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009794:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009796:	429a      	cmp	r2, r3
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009798:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 800979a:	bf84      	itt	hi
 800979c:	9a01      	ldrhi	r2, [sp, #4]
 800979e:	1a9d      	subhi	r5, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097a0:	4642      	mov	r2, r8
 80097a2:	462b      	mov	r3, r5
 80097a4:	f7fe fc90 	bl	80080c8 <disk_read>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d1de      	bne.n	800976a <f_read+0x82>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80097ac:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	da0b      	bge.n	80097cc <f_read+0xe4>
 80097b4:	6a20      	ldr	r0, [r4, #32]
 80097b6:	eba0 0008 	sub.w	r0, r0, r8
 80097ba:	42a8      	cmp	r0, r5
 80097bc:	d206      	bcs.n	80097cc <f_read+0xe4>
 80097be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097c2:	4651      	mov	r1, sl
 80097c4:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 80097c8:	f7fe fdb8 	bl	800833c <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80097cc:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80097ce:	69a3      	ldr	r3, [r4, #24]
 80097d0:	44a9      	add	r9, r5
 80097d2:	1b7f      	subs	r7, r7, r5
 80097d4:	442b      	add	r3, r5
 80097d6:	61a3      	str	r3, [r4, #24]
 80097d8:	f8db 3000 	ldr.w	r3, [fp]
 80097dc:	442b      	add	r3, r5
 80097de:	f8cb 3000 	str.w	r3, [fp]
 80097e2:	e79e      	b.n	8009722 <f_read+0x3a>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80097e4:	6a22      	ldr	r2, [r4, #32]
 80097e6:	4542      	cmp	r2, r8
 80097e8:	d018      	beq.n	800981c <f_read+0x134>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80097ea:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	da0b      	bge.n	800980a <f_read+0x122>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097f2:	9800      	ldr	r0, [sp, #0]
 80097f4:	2301      	movs	r3, #1
 80097f6:	4651      	mov	r1, sl
 80097f8:	7840      	ldrb	r0, [r0, #1]
 80097fa:	f7fe fc73 	bl	80080e4 <disk_write>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d1b3      	bne.n	800976a <f_read+0x82>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009802:	7d23      	ldrb	r3, [r4, #20]
 8009804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009808:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800980a:	9803      	ldr	r0, [sp, #12]
 800980c:	2301      	movs	r3, #1
 800980e:	4642      	mov	r2, r8
 8009810:	4651      	mov	r1, sl
 8009812:	7840      	ldrb	r0, [r0, #1]
 8009814:	f7fe fc58 	bl	80080c8 <disk_read>
 8009818:	2800      	cmp	r0, #0
 800981a:	d1a6      	bne.n	800976a <f_read+0x82>
			fp->sect = sect;
 800981c:	f8c4 8020 	str.w	r8, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009820:	69a1      	ldr	r1, [r4, #24]
 8009822:	4648      	mov	r0, r9
 8009824:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8009828:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 800982c:	4451      	add	r1, sl
 800982e:	42bd      	cmp	r5, r7
 8009830:	bf28      	it	cs
 8009832:	463d      	movcs	r5, r7
 8009834:	462a      	mov	r2, r5
 8009836:	f7fe fd81 	bl	800833c <mem_cpy.part.0>
 800983a:	e7c8      	b.n	80097ce <f_read+0xe6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800983c:	2607      	movs	r6, #7
 800983e:	e783      	b.n	8009748 <f_read+0x60>

08009840 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	469b      	mov	fp, r3
 8009846:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8009848:	2300      	movs	r3, #0
{
 800984a:	4689      	mov	r9, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800984c:	a903      	add	r1, sp, #12
{
 800984e:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
 8009850:	f8cb 3000 	str.w	r3, [fp]
{
 8009854:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009856:	f7fe fd57 	bl	8008308 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800985a:	4606      	mov	r6, r0
 800985c:	b9b0      	cbnz	r0, 800988c <f_write+0x4c>
 800985e:	7d66      	ldrb	r6, [r4, #21]
 8009860:	b9a6      	cbnz	r6, 800988c <f_write+0x4c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009862:	7d23      	ldrb	r3, [r4, #20]
 8009864:	079a      	lsls	r2, r3, #30
 8009866:	f140 80ae 	bpl.w	80099c6 <f_write+0x186>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800986a:	69a3      	ldr	r3, [r4, #24]
 800986c:	42fb      	cmn	r3, r7
 800986e:	d300      	bcc.n	8009872 <f_write+0x32>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009870:	43df      	mvns	r7, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009872:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 8009876:	e06b      	b.n	8009950 <f_write+0x110>
					if (fp->cltbl) {
 8009878:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800987a:	b15b      	cbz	r3, 8009894 <f_write+0x54>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800987c:	4620      	mov	r0, r4
 800987e:	f7fe fd06 	bl	800828e <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009882:	b948      	cbnz	r0, 8009898 <f_write+0x58>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009884:	7d23      	ldrb	r3, [r4, #20]
 8009886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800988a:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 800988c:	4630      	mov	r0, r6
 800988e:	b005      	add	sp, #20
 8009890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009894:	69e1      	ldr	r1, [r4, #28]
 8009896:	e06e      	b.n	8009976 <f_write+0x136>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009898:	2801      	cmp	r0, #1
 800989a:	d102      	bne.n	80098a2 <f_write+0x62>
 800989c:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800989e:	7566      	strb	r6, [r4, #21]
 80098a0:	e7f4      	b.n	800988c <f_write+0x4c>
 80098a2:	1c43      	adds	r3, r0, #1
 80098a4:	d101      	bne.n	80098aa <f_write+0x6a>
 80098a6:	2601      	movs	r6, #1
 80098a8:	e7f9      	b.n	800989e <f_write+0x5e>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80098aa:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80098ac:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80098ae:	b903      	cbnz	r3, 80098b2 <f_write+0x72>
 80098b0:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80098b2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da0c      	bge.n	80098d4 <f_write+0x94>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098ba:	9803      	ldr	r0, [sp, #12]
 80098bc:	2301      	movs	r3, #1
 80098be:	6a22      	ldr	r2, [r4, #32]
 80098c0:	4651      	mov	r1, sl
 80098c2:	7840      	ldrb	r0, [r0, #1]
 80098c4:	f7fe fc0e 	bl	80080e4 <disk_write>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d1ec      	bne.n	80098a6 <f_write+0x66>
				fp->flag &= (BYTE)~FA_DIRTY;
 80098cc:	7d23      	ldrb	r3, [r4, #20]
 80098ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d2:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80098d4:	9b03      	ldr	r3, [sp, #12]
 80098d6:	69e1      	ldr	r1, [r4, #28]
 80098d8:	4618      	mov	r0, r3
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	f7fe fccc 	bl	8008278 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d0db      	beq.n	800989c <f_write+0x5c>
			sect += csect;
 80098e4:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80098e6:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 80098e8:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 80098ec:	d047      	beq.n	800997e <f_write+0x13e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80098ee:	9b00      	ldr	r3, [sp, #0]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098f0:	4649      	mov	r1, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80098f2:	9a01      	ldr	r2, [sp, #4]
 80098f4:	895b      	ldrh	r3, [r3, #10]
 80098f6:	442a      	add	r2, r5
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098f8:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80098fa:	429a      	cmp	r2, r3
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098fc:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 80098fe:	bf84      	itt	hi
 8009900:	9a01      	ldrhi	r2, [sp, #4]
 8009902:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009904:	4642      	mov	r2, r8
 8009906:	462b      	mov	r3, r5
 8009908:	f7fe fbec 	bl	80080e4 <disk_write>
 800990c:	2800      	cmp	r0, #0
 800990e:	d1ca      	bne.n	80098a6 <f_write+0x66>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009910:	6a21      	ldr	r1, [r4, #32]
 8009912:	eba1 0108 	sub.w	r1, r1, r8
 8009916:	42a9      	cmp	r1, r5
 8009918:	d20a      	bcs.n	8009930 <f_write+0xf0>
 800991a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800991e:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8009922:	4650      	mov	r0, sl
 8009924:	f7fe fd0a 	bl	800833c <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009928:	7d23      	ldrb	r3, [r4, #20]
 800992a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800992e:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009930:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009932:	69a3      	ldr	r3, [r4, #24]
 8009934:	44a9      	add	r9, r5
 8009936:	68e2      	ldr	r2, [r4, #12]
 8009938:	1b7f      	subs	r7, r7, r5
 800993a:	442b      	add	r3, r5
 800993c:	61a3      	str	r3, [r4, #24]
 800993e:	429a      	cmp	r2, r3
 8009940:	bf2c      	ite	cs
 8009942:	60e2      	strcs	r2, [r4, #12]
 8009944:	60e3      	strcc	r3, [r4, #12]
 8009946:	f8db 3000 	ldr.w	r3, [fp]
 800994a:	442b      	add	r3, r5
 800994c:	f8cb 3000 	str.w	r3, [fp]
	for ( ;  btw;							/* Repeat until all data written */
 8009950:	2f00      	cmp	r7, #0
 8009952:	d097      	beq.n	8009884 <f_write+0x44>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009954:	69a1      	ldr	r1, [r4, #24]
 8009956:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800995a:	bb13      	cbnz	r3, 80099a2 <f_write+0x162>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	895b      	ldrh	r3, [r3, #10]
 8009960:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8009962:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	d1a3      	bne.n	80098b2 <f_write+0x72>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800996a:	2900      	cmp	r1, #0
 800996c:	d184      	bne.n	8009878 <f_write+0x38>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800996e:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8009970:	2800      	cmp	r0, #0
 8009972:	d191      	bne.n	8009898 <f_write+0x58>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009974:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009976:	4620      	mov	r0, r4
 8009978:	f7fe fffd 	bl	8008976 <create_chain>
 800997c:	e781      	b.n	8009882 <f_write+0x42>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800997e:	6a23      	ldr	r3, [r4, #32]
 8009980:	4543      	cmp	r3, r8
 8009982:	d00c      	beq.n	800999e <f_write+0x15e>
 8009984:	68e2      	ldr	r2, [r4, #12]
 8009986:	69a3      	ldr	r3, [r4, #24]
 8009988:	429a      	cmp	r2, r3
 800998a:	d908      	bls.n	800999e <f_write+0x15e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800998c:	9800      	ldr	r0, [sp, #0]
 800998e:	2301      	movs	r3, #1
 8009990:	4642      	mov	r2, r8
 8009992:	4651      	mov	r1, sl
 8009994:	7840      	ldrb	r0, [r0, #1]
 8009996:	f7fe fb97 	bl	80080c8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800999a:	2800      	cmp	r0, #0
 800999c:	d183      	bne.n	80098a6 <f_write+0x66>
			fp->sect = sect;
 800999e:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80099a2:	69a0      	ldr	r0, [r4, #24]
 80099a4:	4649      	mov	r1, r9
 80099a6:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80099aa:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 80099ae:	4450      	add	r0, sl
 80099b0:	42bd      	cmp	r5, r7
 80099b2:	bf28      	it	cs
 80099b4:	463d      	movcs	r5, r7
 80099b6:	462a      	mov	r2, r5
 80099b8:	f7fe fcc0 	bl	800833c <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 80099bc:	7d23      	ldrb	r3, [r4, #20]
 80099be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099c2:	7523      	strb	r3, [r4, #20]
 80099c4:	e7b5      	b.n	8009932 <f_write+0xf2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80099c6:	2607      	movs	r6, #7
 80099c8:	e760      	b.n	800988c <f_write+0x4c>

080099ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80099ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80099cc:	a901      	add	r1, sp, #4
{
 80099ce:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80099d0:	f7fe fc9a 	bl	8008308 <validate>
	if (res == FR_OK) {
 80099d4:	4605      	mov	r5, r0
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d13a      	bne.n	8009a50 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80099da:	7d23      	ldrb	r3, [r4, #20]
 80099dc:	065a      	lsls	r2, r3, #25
 80099de:	d537      	bpl.n	8009a50 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80099e0:	061b      	lsls	r3, r3, #24
 80099e2:	d50c      	bpl.n	80099fe <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80099e4:	9801      	ldr	r0, [sp, #4]
 80099e6:	2301      	movs	r3, #1
 80099e8:	6a22      	ldr	r2, [r4, #32]
 80099ea:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80099ee:	7840      	ldrb	r0, [r0, #1]
 80099f0:	f7fe fb78 	bl	80080e4 <disk_write>
 80099f4:	bb78      	cbnz	r0, 8009a56 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80099f6:	7d23      	ldrb	r3, [r4, #20]
 80099f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099fc:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80099fe:	f7fe fb8d 	bl	800811c <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009a02:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8009a04:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8009a06:	9801      	ldr	r0, [sp, #4]
 8009a08:	f7fe fce5 	bl	80083d6 <move_window>
				if (res == FR_OK) {
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	b9f8      	cbnz	r0, 8009a50 <f_sync+0x86>
					dir = fp->dir_ptr;
 8009a10:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009a12:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009a14:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009a16:	f043 0320 	orr.w	r3, r3, #32
 8009a1a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009a1c:	68a2      	ldr	r2, [r4, #8]
 8009a1e:	6820      	ldr	r0, [r4, #0]
 8009a20:	f7fe fca4 	bl	800836c <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009a24:	68e1      	ldr	r1, [r4, #12]
 8009a26:	f106 001c 	add.w	r0, r6, #28
 8009a2a:	f7fe fb81 	bl	8008130 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009a2e:	4639      	mov	r1, r7
 8009a30:	f106 0016 	add.w	r0, r6, #22
 8009a34:	f7fe fb7c 	bl	8008130 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a3c:	74b5      	strb	r5, [r6, #18]
	*ptr++ = (BYTE)val;
 8009a3e:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8009a40:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a42:	f7ff f899 	bl	8008b78 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009a46:	7d23      	ldrb	r3, [r4, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a48:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a4e:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8009a50:	4628      	mov	r0, r5
 8009a52:	b003      	add	sp, #12
 8009a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009a56:	2501      	movs	r5, #1
 8009a58:	e7fa      	b.n	8009a50 <f_sync+0x86>

08009a5a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009a5a:	b513      	push	{r0, r1, r4, lr}
 8009a5c:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009a5e:	f7ff ffb4 	bl	80099ca <f_sync>
	if (res == FR_OK)
 8009a62:	b948      	cbnz	r0, 8009a78 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009a64:	a901      	add	r1, sp, #4
 8009a66:	4620      	mov	r0, r4
 8009a68:	f7fe fc4e 	bl	8008308 <validate>
		if (res == FR_OK) {
 8009a6c:	b920      	cbnz	r0, 8009a78 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009a6e:	6920      	ldr	r0, [r4, #16]
 8009a70:	f7fe fbe6 	bl	8008240 <dec_lock>
			if (res == FR_OK)
 8009a74:	b900      	cbnz	r0, 8009a78 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009a76:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009a78:	b002      	add	sp, #8
 8009a7a:	bd10      	pop	{r4, pc}

08009a7c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009a7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a80:	460d      	mov	r5, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009a82:	a901      	add	r1, sp, #4
{
 8009a84:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009a86:	f7fe fc3f 	bl	8008308 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	b9d0      	cbnz	r0, 8009ac4 <f_lseek+0x48>
 8009a8e:	7d66      	ldrb	r6, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009a90:	b9c6      	cbnz	r6, 8009ac4 <f_lseek+0x48>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009a92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d076      	beq.n	8009b86 <f_lseek+0x10a>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009a98:	1c6a      	adds	r2, r5, #1
 8009a9a:	d137      	bne.n	8009b0c <f_lseek+0x90>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009a9c:	68a7      	ldr	r7, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009a9e:	f103 0904 	add.w	r9, r3, #4
 8009aa2:	f8d3 a000 	ldr.w	sl, [r3]
 8009aa6:	2502      	movs	r5, #2
			if (cl) {
 8009aa8:	b33f      	cbz	r7, 8009afa <f_lseek+0x7e>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009aaa:	f04f 0800 	mov.w	r8, #0
 8009aae:	eb07 0108 	add.w	r1, r7, r8
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
 8009ab2:	6820      	ldr	r0, [r4, #0]
 8009ab4:	f7fe fec3 	bl	800883e <get_fat.isra.7>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009ab8:	2801      	cmp	r0, #1
						cl = get_fat(&fp->obj, cl);
 8009aba:	f108 0801 	add.w	r8, r8, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009abe:	d807      	bhi.n	8009ad0 <f_lseek+0x54>
 8009ac0:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ac2:	7566      	strb	r6, [r4, #21]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	b002      	add	sp, #8
 8009ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009acc:	4607      	mov	r7, r0
 8009ace:	e7ec      	b.n	8009aaa <f_lseek+0x2e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	d101      	bne.n	8009ad8 <f_lseek+0x5c>
 8009ad4:	2601      	movs	r6, #1
 8009ad6:	e7f4      	b.n	8009ac2 <f_lseek+0x46>
					} while (cl == pcl + 1);
 8009ad8:	eb07 0308 	add.w	r3, r7, r8
 8009adc:	4283      	cmp	r3, r0
 8009ade:	d0e6      	beq.n	8009aae <f_lseek+0x32>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009ae0:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009ae2:	45aa      	cmp	sl, r5
						*tbl++ = ncl; *tbl++ = tcl;
 8009ae4:	bf21      	itttt	cs
 8009ae6:	464b      	movcs	r3, r9
 8009ae8:	f843 8b08 	strcs.w	r8, [r3], #8
 8009aec:	f8c9 7004 	strcs.w	r7, [r9, #4]
 8009af0:	4699      	movcs	r9, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009af2:	9b01      	ldr	r3, [sp, #4]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	4283      	cmp	r3, r0
 8009af8:	d8e8      	bhi.n	8009acc <f_lseek+0x50>
			*fp->cltbl = ulen;	/* Number of items used */
 8009afa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
 8009afc:	4555      	cmp	r5, sl
			*fp->cltbl = ulen;	/* Number of items used */
 8009afe:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen) {
 8009b00:	f200 80d4 	bhi.w	8009cac <f_lseek+0x230>
				*tbl = 0;		/* Terminate table */
 8009b04:	2300      	movs	r3, #0
 8009b06:	f8c9 3000 	str.w	r3, [r9]
 8009b0a:	e7db      	b.n	8009ac4 <f_lseek+0x48>
 8009b0c:	68e0      	ldr	r0, [r4, #12]
 8009b0e:	4285      	cmp	r5, r0
 8009b10:	bf28      	it	cs
 8009b12:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 8009b14:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 8009b16:	2d00      	cmp	r5, #0
 8009b18:	d0d4      	beq.n	8009ac4 <f_lseek+0x48>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009b1a:	f105 38ff 	add.w	r8, r5, #4294967295
 8009b1e:	4620      	mov	r0, r4
 8009b20:	4641      	mov	r1, r8
 8009b22:	f7fe fbb4 	bl	800828e <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 8009b26:	9f01      	ldr	r7, [sp, #4]
				fp->clust = clmt_clust(fp, ofs - 1);
 8009b28:	4601      	mov	r1, r0
 8009b2a:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	f7fe fba3 	bl	8008278 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d0c4      	beq.n	8009ac0 <f_lseek+0x44>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009b36:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8009b3a:	2d00      	cmp	r5, #0
 8009b3c:	d0c2      	beq.n	8009ac4 <f_lseek+0x48>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009b3e:	897d      	ldrh	r5, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009b40:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009b42:	3d01      	subs	r5, #1
 8009b44:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 8009b48:	4405      	add	r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009b4a:	42aa      	cmp	r2, r5
 8009b4c:	d0ba      	beq.n	8009ac4 <f_lseek+0x48>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009b4e:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009b52:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	da0a      	bge.n	8009b70 <f_lseek+0xf4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	4641      	mov	r1, r8
 8009b5e:	7878      	ldrb	r0, [r7, #1]
 8009b60:	f7fe fac0 	bl	80080e4 <disk_write>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d1b5      	bne.n	8009ad4 <f_lseek+0x58>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009b68:	7d23      	ldrb	r3, [r4, #20]
 8009b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b6e:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009b70:	9801      	ldr	r0, [sp, #4]
 8009b72:	2301      	movs	r3, #1
 8009b74:	462a      	mov	r2, r5
 8009b76:	4641      	mov	r1, r8
 8009b78:	7840      	ldrb	r0, [r0, #1]
 8009b7a:	f7fe faa5 	bl	80080c8 <disk_read>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d1a8      	bne.n	8009ad4 <f_lseek+0x58>
					fp->sect = dsc;
 8009b82:	6225      	str	r5, [r4, #32]
 8009b84:	e79e      	b.n	8009ac4 <f_lseek+0x48>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009b86:	68e3      	ldr	r3, [r4, #12]
 8009b88:	42ab      	cmp	r3, r5
 8009b8a:	d204      	bcs.n	8009b96 <f_lseek+0x11a>
 8009b8c:	7d22      	ldrb	r2, [r4, #20]
 8009b8e:	f012 0f02 	tst.w	r2, #2
 8009b92:	bf08      	it	eq
 8009b94:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8009b96:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8009b98:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 8009b9a:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 8009b9c:	b90d      	cbnz	r5, 8009ba2 <f_lseek+0x126>
		fp->fptr = nsect = 0;
 8009b9e:	462f      	mov	r7, r5
 8009ba0:	e01d      	b.n	8009bde <f_lseek+0x162>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009ba2:	9a01      	ldr	r2, [sp, #4]
 8009ba4:	8957      	ldrh	r7, [r2, #10]
 8009ba6:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d040      	beq.n	8009c2e <f_lseek+0x1b2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009bac:	3b01      	subs	r3, #1
 8009bae:	1e6a      	subs	r2, r5, #1
 8009bb0:	fbb3 f1f7 	udiv	r1, r3, r7
 8009bb4:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8009bb8:	428a      	cmp	r2, r1
 8009bba:	d338      	bcc.n	8009c2e <f_lseek+0x1b2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009bbc:	427a      	negs	r2, r7
				clst = fp->clust;
 8009bbe:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009bc0:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 8009bc2:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009bc4:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 8009bc6:	2900      	cmp	r1, #0
 8009bc8:	d15d      	bne.n	8009c86 <f_lseek+0x20a>
		fp->fptr = nsect = 0;
 8009bca:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009bcc:	68e3      	ldr	r3, [r4, #12]
 8009bce:	69a5      	ldr	r5, [r4, #24]
 8009bd0:	429d      	cmp	r5, r3
			fp->flag |= FA_MODIFIED;
 8009bd2:	bf81      	itttt	hi
 8009bd4:	7d23      	ldrbhi	r3, [r4, #20]
			fp->obj.objsize = fp->fptr;
 8009bd6:	60e5      	strhi	r5, [r4, #12]
			fp->flag |= FA_MODIFIED;
 8009bd8:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 8009bdc:	7523      	strbhi	r3, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009bde:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8009be2:	2d00      	cmp	r5, #0
 8009be4:	f43f af6e 	beq.w	8009ac4 <f_lseek+0x48>
 8009be8:	6a22      	ldr	r2, [r4, #32]
 8009bea:	42ba      	cmp	r2, r7
 8009bec:	f43f af6a 	beq.w	8009ac4 <f_lseek+0x48>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009bf0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009bf4:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	da0c      	bge.n	8009c16 <f_lseek+0x19a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009bfc:	9801      	ldr	r0, [sp, #4]
 8009bfe:	2301      	movs	r3, #1
 8009c00:	4629      	mov	r1, r5
 8009c02:	7840      	ldrb	r0, [r0, #1]
 8009c04:	f7fe fa6e 	bl	80080e4 <disk_write>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	f47f af63 	bne.w	8009ad4 <f_lseek+0x58>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c0e:	7d23      	ldrb	r3, [r4, #20]
 8009c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c14:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009c16:	9801      	ldr	r0, [sp, #4]
 8009c18:	2301      	movs	r3, #1
 8009c1a:	463a      	mov	r2, r7
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	7840      	ldrb	r0, [r0, #1]
 8009c20:	f7fe fa52 	bl	80080c8 <disk_read>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	f47f af55 	bne.w	8009ad4 <f_lseek+0x58>
			fp->sect = nsect;
 8009c2a:	6227      	str	r7, [r4, #32]
 8009c2c:	e74a      	b.n	8009ac4 <f_lseek+0x48>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009c2e:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009c30:	b951      	cbnz	r1, 8009c48 <f_lseek+0x1cc>
					clst = create_chain(&fp->obj, 0);
 8009c32:	4620      	mov	r0, r4
 8009c34:	f7fe fe9f 	bl	8008976 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009c38:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 8009c3a:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009c3c:	f43f af40 	beq.w	8009ac0 <f_lseek+0x44>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009c40:	3001      	adds	r0, #1
 8009c42:	f43f af47 	beq.w	8009ad4 <f_lseek+0x58>
					fp->obj.sclust = clst;
 8009c46:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 8009c48:	61e1      	str	r1, [r4, #28]
 8009c4a:	e7bc      	b.n	8009bc6 <f_lseek+0x14a>
					ofs -= bcs; fp->fptr += bcs;
 8009c4c:	443b      	add	r3, r7
 8009c4e:	1bed      	subs	r5, r5, r7
 8009c50:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009c52:	7d23      	ldrb	r3, [r4, #20]
 8009c54:	079a      	lsls	r2, r3, #30
 8009c56:	d506      	bpl.n	8009c66 <f_lseek+0x1ea>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f7fe fe8c 	bl	8008976 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009c5e:	4601      	mov	r1, r0
 8009c60:	b928      	cbnz	r0, 8009c6e <f_lseek+0x1f2>
							ofs = 0; break;
 8009c62:	4605      	mov	r5, r0
 8009c64:	e012      	b.n	8009c8c <f_lseek+0x210>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009c66:	6820      	ldr	r0, [r4, #0]
 8009c68:	f7fe fde9 	bl	800883e <get_fat.isra.7>
 8009c6c:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009c6e:	1c4b      	adds	r3, r1, #1
 8009c70:	f43f af30 	beq.w	8009ad4 <f_lseek+0x58>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009c74:	2901      	cmp	r1, #1
 8009c76:	f67f af23 	bls.w	8009ac0 <f_lseek+0x44>
 8009c7a:	9b01      	ldr	r3, [sp, #4]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	428b      	cmp	r3, r1
 8009c80:	f67f af1e 	bls.w	8009ac0 <f_lseek+0x44>
					fp->clust = clst;
 8009c84:	61e1      	str	r1, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009c86:	42bd      	cmp	r5, r7
 8009c88:	69a3      	ldr	r3, [r4, #24]
 8009c8a:	d8df      	bhi.n	8009c4c <f_lseek+0x1d0>
				fp->fptr += ofs;
 8009c8c:	69a3      	ldr	r3, [r4, #24]
 8009c8e:	442b      	add	r3, r5
 8009c90:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8009c92:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d097      	beq.n	8009bca <f_lseek+0x14e>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009c9a:	9801      	ldr	r0, [sp, #4]
 8009c9c:	f7fe faec 	bl	8008278 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	f43f af0d 	beq.w	8009ac0 <f_lseek+0x44>
					nsect += (DWORD)(ofs / SS(fs));
 8009ca6:	eb00 2755 	add.w	r7, r0, r5, lsr #9
 8009caa:	e78f      	b.n	8009bcc <f_lseek+0x150>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009cac:	2611      	movs	r6, #17
 8009cae:	e709      	b.n	8009ac4 <f_lseek+0x48>

08009cb0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009cb2:	4605      	mov	r5, r0
{
 8009cb4:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d049      	beq.n	8009d4e <f_opendir+0x9e>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8009cba:	2200      	movs	r2, #0
 8009cbc:	a903      	add	r1, sp, #12
 8009cbe:	a801      	add	r0, sp, #4
 8009cc0:	f7fe fbe4 	bl	800848c <find_volume>
	if (res == FR_OK) {
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d136      	bne.n	8009d38 <f_opendir+0x88>
		obj->fs = fs;
 8009cca:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8009ccc:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
 8009cd0:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 8009cd2:	f000 f971 	bl	8009fb8 <ff_memalloc>
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d03a      	beq.n	8009d52 <f_opendir+0xa2>
 8009cdc:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009cde:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8009ce0:	60d8      	str	r0, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	f7ff fa80 	bl	80091e8 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8009ce8:	4604      	mov	r4, r0
 8009cea:	b9f8      	cbnz	r0, 8009d2c <f_opendir+0x7c>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009cec:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	db08      	blt.n	8009d06 <f_opendir+0x56>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009cf4:	79ab      	ldrb	r3, [r5, #6]
 8009cf6:	06db      	lsls	r3, r3, #27
 8009cf8:	d525      	bpl.n	8009d46 <f_opendir+0x96>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8009cfa:	9b03      	ldr	r3, [sp, #12]
 8009cfc:	6a29      	ldr	r1, [r5, #32]
 8009cfe:	7818      	ldrb	r0, [r3, #0]
 8009d00:	f7fe fb25 	bl	800834e <ld_clust.isra.1>
 8009d04:	60a8      	str	r0, [r5, #8]
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				obj->id = fs->id;
 8009d06:	9b03      	ldr	r3, [sp, #12]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009d08:	2100      	movs	r1, #0
 8009d0a:	4628      	mov	r0, r5
				obj->id = fs->id;
 8009d0c:	88db      	ldrh	r3, [r3, #6]
 8009d0e:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009d10:	f7fe fdef 	bl	80088f2 <dir_sdi>
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8009d14:	4604      	mov	r4, r0
 8009d16:	b948      	cbnz	r0, 8009d2c <f_opendir+0x7c>
					if (obj->sclust) {
 8009d18:	68ab      	ldr	r3, [r5, #8]
 8009d1a:	b193      	cbz	r3, 8009d42 <f_opendir+0x92>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009d1c:	4601      	mov	r1, r0
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f7fe fa4e 	bl	80081c0 <inc_lock>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009d24:	2800      	cmp	r0, #0
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009d26:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009d28:	bf08      	it	eq
 8009d2a:	2412      	moveq	r4, #18
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f000 f945 	bl	8009fbc <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009d32:	2c04      	cmp	r4, #4
 8009d34:	d009      	beq.n	8009d4a <f_opendir+0x9a>
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009d36:	b10c      	cbz	r4, 8009d3c <f_opendir+0x8c>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	b004      	add	sp, #16
 8009d40:	bd70      	pop	{r4, r5, r6, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009d42:	6128      	str	r0, [r5, #16]
 8009d44:	e7f2      	b.n	8009d2c <f_opendir+0x7c>
					res = FR_NO_PATH;
 8009d46:	2405      	movs	r4, #5
 8009d48:	e7f0      	b.n	8009d2c <f_opendir+0x7c>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009d4a:	2405      	movs	r4, #5
 8009d4c:	e7f4      	b.n	8009d38 <f_opendir+0x88>
	if (!dp) return FR_INVALID_OBJECT;
 8009d4e:	2409      	movs	r4, #9
 8009d50:	e7f4      	b.n	8009d3c <f_opendir+0x8c>
		INIT_NAMBUF(fs);
 8009d52:	2411      	movs	r4, #17
 8009d54:	e7f2      	b.n	8009d3c <f_opendir+0x8c>

08009d56 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8009d56:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8009d58:	a901      	add	r1, sp, #4
{
 8009d5a:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8009d5c:	f7fe fad4 	bl	8008308 <validate>
	if (res == FR_OK) {
 8009d60:	4604      	mov	r4, r0
 8009d62:	b918      	cbnz	r0, 8009d6c <f_closedir+0x16>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8009d64:	6928      	ldr	r0, [r5, #16]
 8009d66:	b920      	cbnz	r0, 8009d72 <f_closedir+0x1c>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8009d68:	2300      	movs	r3, #0
 8009d6a:	602b      	str	r3, [r5, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	b003      	add	sp, #12
 8009d70:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
 8009d72:	f7fe fa65 	bl	8008240 <dec_lock>
		if (res == FR_OK)
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d0f6      	beq.n	8009d68 <f_closedir+0x12>
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	e7f6      	b.n	8009d6c <f_closedir+0x16>

08009d7e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009d7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009d82:	460f      	mov	r7, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009d84:	a901      	add	r1, sp, #4
{
 8009d86:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009d88:	f7fe fabe 	bl	8008308 <validate>
	if (res == FR_OK) {
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	b928      	cbnz	r0, 8009d9c <f_readdir+0x1e>
		if (!fno) {
 8009d90:	b947      	cbnz	r7, 8009da4 <f_readdir+0x26>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009d92:	4601      	mov	r1, r0
 8009d94:	4628      	mov	r0, r5
 8009d96:	f7fe fdac 	bl	80088f2 <dir_sdi>
 8009d9a:	4604      	mov	r4, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	b002      	add	sp, #8
 8009da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			INIT_NAMBUF(fs);
 8009da4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009da8:	f000 f906 	bl	8009fb8 <ff_memalloc>
 8009dac:	4606      	mov	r6, r0
 8009dae:	b1c0      	cbz	r0, 8009de2 <f_readdir+0x64>
 8009db0:	9b01      	ldr	r3, [sp, #4]
 8009db2:	60d8      	str	r0, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8009db4:	4628      	mov	r0, r5
 8009db6:	f7ff f983 	bl	80090c0 <dir_read.constprop.10>
			if (res == FR_OK) {				/* A valid entry is found */
 8009dba:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 8009dbe:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
 8009dc0:	d10b      	bne.n	8009dda <f_readdir+0x5c>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	f7fe fe65 	bl	8008a94 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009dca:	4641      	mov	r1, r8
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f7fe ff1e 	bl	8008c0e <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8009dd2:	2804      	cmp	r0, #4
 8009dd4:	bf14      	ite	ne
 8009dd6:	4604      	movne	r4, r0
 8009dd8:	2400      	moveq	r4, #0
			FREE_NAMBUF();
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f000 f8ee 	bl	8009fbc <ff_memfree>
 8009de0:	e7dc      	b.n	8009d9c <f_readdir+0x1e>
			INIT_NAMBUF(fs);
 8009de2:	2411      	movs	r4, #17
 8009de4:	e7da      	b.n	8009d9c <f_readdir+0x1e>
	...

08009de8 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009de8:	4b0f      	ldr	r3, [pc, #60]	; (8009e28 <FATFS_LinkDriverEx+0x40>)
{
 8009dea:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8009dec:	7b9c      	ldrb	r4, [r3, #14]
 8009dee:	2c01      	cmp	r4, #1
 8009df0:	d818      	bhi.n	8009e24 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009df2:	7b9d      	ldrb	r5, [r3, #14]
 8009df4:	2400      	movs	r4, #0
 8009df6:	b2ed      	uxtb	r5, r5
 8009df8:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8009dfa:	7b9d      	ldrb	r5, [r3, #14]
 8009dfc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009e00:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8009e02:	7b98      	ldrb	r0, [r3, #14]
 8009e04:	4418      	add	r0, r3
 8009e06:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 8009e08:	7b9a      	ldrb	r2, [r3, #14]
 8009e0a:	b2d2      	uxtb	r2, r2
 8009e0c:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8009e0e:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8009e10:	b2c0      	uxtb	r0, r0
 8009e12:	7398      	strb	r0, [r3, #14]
    path[1] = ':';
 8009e14:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
 8009e16:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8009e18:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8009e1a:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8009e1c:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8009e1e:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 8009e20:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 8009e22:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8009e24:	2001      	movs	r0, #1
 8009e26:	e7fc      	b.n	8009e22 <FATFS_LinkDriverEx+0x3a>
 8009e28:	20006f44 	.word	0x20006f44

08009e2c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f7ff bfdb 	b.w	8009de8 <FATFS_LinkDriverEx>
	...

08009e34 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8009e34:	4a0a      	ldr	r2, [pc, #40]	; (8009e60 <FATFS_UnLinkDriverEx+0x2c>)
 8009e36:	7b93      	ldrb	r3, [r2, #14]
 8009e38:	b17b      	cbz	r3, 8009e5a <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8009e3a:	7803      	ldrb	r3, [r0, #0]
 8009e3c:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009e44:	6848      	ldr	r0, [r1, #4]
 8009e46:	b140      	cbz	r0, 8009e5a <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
 8009e48:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8009e4a:	4413      	add	r3, r2
 8009e4c:	7318      	strb	r0, [r3, #12]
      disk.nbr--;
 8009e4e:	7b93      	ldrb	r3, [r2, #14]
      disk.drv[DiskNum] = 0;
 8009e50:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	7393      	strb	r3, [r2, #14]
 8009e58:	4770      	bx	lr
  uint8_t ret = 1;
 8009e5a:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	20006f44 	.word	0x20006f44

08009e64 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8009e64:	2100      	movs	r1, #0
 8009e66:	f7ff bfe5 	b.w	8009e34 <FATFS_UnLinkDriverEx>

08009e6a <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	4770      	bx	lr
	...

08009e70 <USBH_status>:
  */
DSTATUS USBH_status(BYTE lun)
{
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
 8009e70:	4601      	mov	r1, r0
 8009e72:	4804      	ldr	r0, [pc, #16]	; (8009e84 <USBH_status+0x14>)
{
 8009e74:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
 8009e76:	f000 fbe9 	bl	800a64c <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 8009e7a:	fab0 f080 	clz	r0, r0
 8009e7e:	0940      	lsrs	r0, r0, #5
 8009e80:	bd08      	pop	{r3, pc}
 8009e82:	bf00      	nop
 8009e84:	2000756c 	.word	0x2000756c

08009e88 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	4614      	mov	r4, r2
 8009e8c:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 8009e8e:	2903      	cmp	r1, #3
 8009e90:	d803      	bhi.n	8009e9a <USBH_ioctl+0x12>
 8009e92:	e8df f001 	tbb	[pc, r1]
 8009e96:	0525      	.short	0x0525
 8009e98:	1a10      	.short	0x1a10
      res = RES_ERROR;
    }
    break;

  default:
    res = RES_PARERR;
 8009e9a:	2004      	movs	r0, #4
  }

  return res;
}
 8009e9c:	b00e      	add	sp, #56	; 0x38
 8009e9e:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8009ea0:	4601      	mov	r1, r0
 8009ea2:	aa01      	add	r2, sp, #4
 8009ea4:	480f      	ldr	r0, [pc, #60]	; (8009ee4 <USBH_ioctl+0x5c>)
 8009ea6:	f000 fbe2 	bl	800a66e <USBH_MSC_GetLUNInfo>
 8009eaa:	b108      	cbz	r0, 8009eb0 <USBH_ioctl+0x28>
      res = RES_ERROR;
 8009eac:	2001      	movs	r0, #1
 8009eae:	e7f5      	b.n	8009e9c <USBH_ioctl+0x14>
      *(DWORD*)buff = info.capacity.block_nbr;
 8009eb0:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size;
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	e7f2      	b.n	8009e9c <USBH_ioctl+0x14>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8009eb6:	4601      	mov	r1, r0
 8009eb8:	aa01      	add	r2, sp, #4
 8009eba:	480a      	ldr	r0, [pc, #40]	; (8009ee4 <USBH_ioctl+0x5c>)
 8009ebc:	f000 fbd7 	bl	800a66e <USBH_MSC_GetLUNInfo>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d1f3      	bne.n	8009eac <USBH_ioctl+0x24>
      *(DWORD*)buff = info.capacity.block_size;
 8009ec4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009ec8:	e7f3      	b.n	8009eb2 <USBH_ioctl+0x2a>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8009eca:	4601      	mov	r1, r0
 8009ecc:	aa01      	add	r2, sp, #4
 8009ece:	4805      	ldr	r0, [pc, #20]	; (8009ee4 <USBH_ioctl+0x5c>)
 8009ed0:	f000 fbcd 	bl	800a66e <USBH_MSC_GetLUNInfo>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d1e9      	bne.n	8009eac <USBH_ioctl+0x24>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009ed8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009edc:	0a5b      	lsrs	r3, r3, #9
 8009ede:	e7e8      	b.n	8009eb2 <USBH_ioctl+0x2a>
    res = RES_OK;
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	e7db      	b.n	8009e9c <USBH_ioctl+0x14>
 8009ee4:	2000756c 	.word	0x2000756c

08009ee8 <USBH_read>:
{
 8009ee8:	b510      	push	{r4, lr}
 8009eea:	b090      	sub	sp, #64	; 0x40
 8009eec:	4604      	mov	r4, r0
  if(USBH_MSC_Read(&hUSBHost, lun, sector, buff, count) == USBH_OK)
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	4601      	mov	r1, r0
 8009ef4:	480f      	ldr	r0, [pc, #60]	; (8009f34 <USBH_read+0x4c>)
 8009ef6:	f000 fbd2 	bl	800a69e <USBH_MSC_Read>
 8009efa:	b1b0      	cbz	r0, 8009f2a <USBH_read+0x42>
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 8009efc:	aa03      	add	r2, sp, #12
 8009efe:	4621      	mov	r1, r4
 8009f00:	480c      	ldr	r0, [pc, #48]	; (8009f34 <USBH_read+0x4c>)
 8009f02:	f000 fbb4 	bl	800a66e <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8009f06:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8009f0a:	2b28      	cmp	r3, #40	; 0x28
 8009f0c:	d003      	beq.n	8009f16 <USBH_read+0x2e>
 8009f0e:	2b3a      	cmp	r3, #58	; 0x3a
 8009f10:	d001      	beq.n	8009f16 <USBH_read+0x2e>
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	d10b      	bne.n	8009f2e <USBH_read+0x46>
      USBH_ErrLog ("USB Disk is not ready!");
 8009f16:	4808      	ldr	r0, [pc, #32]	; (8009f38 <USBH_read+0x50>)
 8009f18:	f001 ffb4 	bl	800be84 <iprintf>
 8009f1c:	4807      	ldr	r0, [pc, #28]	; (8009f3c <USBH_read+0x54>)
 8009f1e:	f001 ffb1 	bl	800be84 <iprintf>
 8009f22:	200a      	movs	r0, #10
 8009f24:	f001 ffc6 	bl	800beb4 <putchar>
 8009f28:	2003      	movs	r0, #3
}
 8009f2a:	b010      	add	sp, #64	; 0x40
 8009f2c:	bd10      	pop	{r4, pc}
      res = RES_ERROR;
 8009f2e:	2001      	movs	r0, #1
 8009f30:	e7fb      	b.n	8009f2a <USBH_read+0x42>
 8009f32:	bf00      	nop
 8009f34:	2000756c 	.word	0x2000756c
 8009f38:	0801126c 	.word	0x0801126c
 8009f3c:	0801151f 	.word	0x0801151f

08009f40 <USBH_write>:
{
 8009f40:	b510      	push	{r4, lr}
 8009f42:	b090      	sub	sp, #64	; 0x40
 8009f44:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSBHost, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4601      	mov	r1, r0
 8009f4c:	4816      	ldr	r0, [pc, #88]	; (8009fa8 <USBH_write+0x68>)
 8009f4e:	f000 fbe9 	bl	800a724 <USBH_MSC_Write>
 8009f52:	b320      	cbz	r0, 8009f9e <USBH_write+0x5e>
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 8009f54:	aa03      	add	r2, sp, #12
 8009f56:	4621      	mov	r1, r4
 8009f58:	4813      	ldr	r0, [pc, #76]	; (8009fa8 <USBH_write+0x68>)
 8009f5a:	f000 fb88 	bl	800a66e <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8009f5e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8009f62:	2b27      	cmp	r3, #39	; 0x27
 8009f64:	d011      	beq.n	8009f8a <USBH_write+0x4a>
 8009f66:	d80c      	bhi.n	8009f82 <USBH_write+0x42>
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	d11a      	bne.n	8009fa2 <USBH_write+0x62>
      USBH_ErrLog ("USB Disk is not ready!");
 8009f6c:	480f      	ldr	r0, [pc, #60]	; (8009fac <USBH_write+0x6c>)
 8009f6e:	f001 ff89 	bl	800be84 <iprintf>
 8009f72:	480f      	ldr	r0, [pc, #60]	; (8009fb0 <USBH_write+0x70>)
 8009f74:	f001 ff86 	bl	800be84 <iprintf>
 8009f78:	200a      	movs	r0, #10
 8009f7a:	f001 ff9b 	bl	800beb4 <putchar>
 8009f7e:	2003      	movs	r0, #3
 8009f80:	e00d      	b.n	8009f9e <USBH_write+0x5e>
    switch (info.sense.asc)
 8009f82:	2b28      	cmp	r3, #40	; 0x28
 8009f84:	d0f2      	beq.n	8009f6c <USBH_write+0x2c>
 8009f86:	2b3a      	cmp	r3, #58	; 0x3a
 8009f88:	e7ef      	b.n	8009f6a <USBH_write+0x2a>
      USBH_ErrLog("USB Disk is Write protected!");
 8009f8a:	4808      	ldr	r0, [pc, #32]	; (8009fac <USBH_write+0x6c>)
 8009f8c:	f001 ff7a 	bl	800be84 <iprintf>
 8009f90:	4808      	ldr	r0, [pc, #32]	; (8009fb4 <USBH_write+0x74>)
 8009f92:	f001 ff77 	bl	800be84 <iprintf>
 8009f96:	200a      	movs	r0, #10
 8009f98:	f001 ff8c 	bl	800beb4 <putchar>
      res = RES_WRPRT;
 8009f9c:	2002      	movs	r0, #2
}
 8009f9e:	b010      	add	sp, #64	; 0x40
 8009fa0:	bd10      	pop	{r4, pc}
      res = RES_ERROR;
 8009fa2:	2001      	movs	r0, #1
 8009fa4:	e7fb      	b.n	8009f9e <USBH_write+0x5e>
 8009fa6:	bf00      	nop
 8009fa8:	2000756c 	.word	0x2000756c
 8009fac:	0801126c 	.word	0x0801126c
 8009fb0:	0801151f 	.word	0x0801151f
 8009fb4:	08011536 	.word	0x08011536

08009fb8 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8009fb8:	f001 bea4 	b.w	800bd04 <malloc>

08009fbc <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8009fbc:	f001 beaa 	b.w	800bd14 <free>

08009fc0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009fc0:	287f      	cmp	r0, #127	; 0x7f
{
 8009fc2:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8009fc4:	d906      	bls.n	8009fd4 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009fc6:	b131      	cbz	r1, 8009fd6 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009fc8:	28ff      	cmp	r0, #255	; 0xff
 8009fca:	d812      	bhi.n	8009ff2 <ff_convert+0x32>
 8009fcc:	3880      	subs	r0, #128	; 0x80
 8009fce:	4b0a      	ldr	r3, [pc, #40]	; (8009ff8 <ff_convert+0x38>)
 8009fd0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8009fd4:	bd10      	pop	{r4, pc}
				if (chr == Tbl[c]) break;
 8009fd6:	4a08      	ldr	r2, [pc, #32]	; (8009ff8 <ff_convert+0x38>)
 8009fd8:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 8009fdc:	b28b      	uxth	r3, r1
 8009fde:	4284      	cmp	r4, r0
 8009fe0:	d003      	beq.n	8009fea <ff_convert+0x2a>
 8009fe2:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 8009fe4:	2980      	cmp	r1, #128	; 0x80
 8009fe6:	d1f7      	bne.n	8009fd8 <ff_convert+0x18>
 8009fe8:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 8009fea:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8009fee:	b2c0      	uxtb	r0, r0
 8009ff0:	e7f0      	b.n	8009fd4 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	e7ee      	b.n	8009fd4 <ff_convert+0x14>
 8009ff6:	bf00      	nop
 8009ff8:	08010e88 	.word	0x08010e88

08009ffc <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009ffc:	4b1e      	ldr	r3, [pc, #120]	; (800a078 <ff_wtoupper+0x7c>)
 8009ffe:	f1a3 02bc 	sub.w	r2, r3, #188	; 0xbc
 800a002:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a006:	bf28      	it	cs
 800a008:	4613      	movcs	r3, r2
{
 800a00a:	b570      	push	{r4, r5, r6, lr}
 800a00c:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 800a00e:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 800a012:	460a      	mov	r2, r1
		if (!bc || chr < bc) break;
 800a014:	b1a3      	cbz	r3, 800a040 <ff_wtoupper+0x44>
 800a016:	4298      	cmp	r0, r3
 800a018:	d312      	bcc.n	800a040 <ff_wtoupper+0x44>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a01a:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 800a01e:	0a25      	lsrs	r5, r4, #8
 800a020:	b2e4      	uxtb	r4, r4
		if (chr < bc + nc) {	/* In the block? */
 800a022:	18e6      	adds	r6, r4, r3
 800a024:	42b0      	cmp	r0, r6
 800a026:	da21      	bge.n	800a06c <ff_wtoupper+0x70>
			switch (cmd) {
 800a028:	2d08      	cmp	r5, #8
 800a02a:	d809      	bhi.n	800a040 <ff_wtoupper+0x44>
 800a02c:	e8df f005 	tbb	[pc, r5]
 800a030:	110f0905 	.word	0x110f0905
 800a034:	19171513 	.word	0x19171513
 800a038:	1b          	.byte	0x1b
 800a039:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a03a:	1ac0      	subs	r0, r0, r3
 800a03c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 800a040:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a042:	1ac3      	subs	r3, r0, r3
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a04a:	b280      	uxth	r0, r0
 800a04c:	e7f8      	b.n	800a040 <ff_wtoupper+0x44>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a04e:	3810      	subs	r0, #16
 800a050:	e7fb      	b.n	800a04a <ff_wtoupper+0x4e>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a052:	3820      	subs	r0, #32
 800a054:	e7f9      	b.n	800a04a <ff_wtoupper+0x4e>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a056:	3830      	subs	r0, #48	; 0x30
 800a058:	e7f7      	b.n	800a04a <ff_wtoupper+0x4e>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a05a:	381a      	subs	r0, #26
 800a05c:	e7f5      	b.n	800a04a <ff_wtoupper+0x4e>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a05e:	3008      	adds	r0, #8
 800a060:	e7f3      	b.n	800a04a <ff_wtoupper+0x4e>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a062:	3850      	subs	r0, #80	; 0x50
 800a064:	e7f1      	b.n	800a04a <ff_wtoupper+0x4e>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a066:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800a06a:	e7ee      	b.n	800a04a <ff_wtoupper+0x4e>
 800a06c:	3104      	adds	r1, #4
		if (!cmd) p += nc;
 800a06e:	2d00      	cmp	r5, #0
 800a070:	d1cd      	bne.n	800a00e <ff_wtoupper+0x12>
 800a072:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 800a076:	e7c9      	b.n	800a00c <ff_wtoupper+0x10>
 800a078:	08011044 	.word	0x08011044

0800a07c <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 800a07c:	2000      	movs	r0, #0
 800a07e:	4770      	bx	lr

0800a080 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a080:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
 800a084:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a086:	69dc      	ldr	r4, [r3, #28]
{
 800a088:	4606      	mov	r6, r0
  switch (MSC_Handle->state)
 800a08a:	7b23      	ldrb	r3, [r4, #12]
 800a08c:	b123      	cbz	r3, 800a098 <USBH_MSC_Process+0x18>
 800a08e:	2b01      	cmp	r3, #1
 800a090:	f000 8178 	beq.w	800a384 <USBH_MSC_Process+0x304>
  USBH_StatusTypeDef error = USBH_BUSY;
 800a094:	2001      	movs	r0, #1
            break;
 800a096:	e0b2      	b.n	800a1fe <USBH_MSC_Process+0x17e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a098:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 800a09c:	2501      	movs	r5, #1
 800a09e:	7822      	ldrb	r2, [r4, #0]
 800a0a0:	428a      	cmp	r2, r1
 800a0a2:	f240 8167 	bls.w	800a374 <USBH_MSC_Process+0x2f4>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a0a6:	2234      	movs	r2, #52	; 0x34
 800a0a8:	fb02 4301 	mla	r3, r2, r1, r4
 800a0ac:	f883 5091 	strb.w	r5, [r3, #145]	; 0x91
 800a0b0:	4615      	mov	r5, r2
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a0b2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a0b6:	2b08      	cmp	r3, #8
 800a0b8:	d8ec      	bhi.n	800a094 <USBH_MSC_Process+0x14>
 800a0ba:	a201      	add	r2, pc, #4	; (adr r2, 800a0c0 <USBH_MSC_Process+0x40>)
 800a0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c0:	0800a0e5 	.word	0x0800a0e5
 800a0c4:	0800a095 	.word	0x0800a095
 800a0c8:	0800a16f 	.word	0x0800a16f
 800a0cc:	0800a227 	.word	0x0800a227
 800a0d0:	0800a10b 	.word	0x0800a10b
 800a0d4:	0800a2c9 	.word	0x0800a2c9
 800a0d8:	0800a095 	.word	0x0800a095
 800a0dc:	0800a095 	.word	0x0800a095
 800a0e0:	0800a36d 	.word	0x0800a36d
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 800a0e4:	48a8      	ldr	r0, [pc, #672]	; (800a388 <USBH_MSC_Process+0x308>)
 800a0e6:	f001 fecd 	bl	800be84 <iprintf>
 800a0ea:	200a      	movs	r0, #10
 800a0ec:	f001 fee2 	bl	800beb4 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a0f0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a0f4:	2234      	movs	r2, #52	; 0x34
 800a0f6:	fb02 4303 	mla	r3, r2, r3, r4
 800a0fa:	2204      	movs	r2, #4
 800a0fc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 800a100:	f8d6 34b0 	ldr.w	r3, [r6, #1200]	; 0x4b0
 800a104:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 800a108:	e7c4      	b.n	800a094 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a10a:	fb05 4201 	mla	r2, r5, r1, r4
 800a10e:	b2c9      	uxtb	r1, r1
 800a110:	329f      	adds	r2, #159	; 0x9f
 800a112:	f000 fcb5 	bl	800aa80 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 800a116:	2800      	cmp	r0, #0
 800a118:	f040 80c6 	bne.w	800a2a8 <USBH_MSC_Process+0x228>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 800a11c:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 800a120:	489a      	ldr	r0, [pc, #616]	; (800a38c <USBH_MSC_Process+0x30c>)
 800a122:	fb05 4101 	mla	r1, r5, r1, r4
 800a126:	31a2      	adds	r1, #162	; 0xa2
 800a128:	f001 feac 	bl	800be84 <iprintf>
 800a12c:	200a      	movs	r0, #10
 800a12e:	f001 fec1 	bl	800beb4 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 800a132:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 800a136:	4896      	ldr	r0, [pc, #600]	; (800a390 <USBH_MSC_Process+0x310>)
 800a138:	fb05 4101 	mla	r1, r5, r1, r4
 800a13c:	31ab      	adds	r1, #171	; 0xab
 800a13e:	f001 fea1 	bl	800be84 <iprintf>
 800a142:	200a      	movs	r0, #10
 800a144:	f001 feb6 	bl	800beb4 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 800a148:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 800a14c:	4891      	ldr	r0, [pc, #580]	; (800a394 <USBH_MSC_Process+0x314>)
 800a14e:	fb05 4101 	mla	r1, r5, r1, r4
 800a152:	31bc      	adds	r1, #188	; 0xbc
 800a154:	f001 fe96 	bl	800be84 <iprintf>
 800a158:	200a      	movs	r0, #10
 800a15a:	f001 feab 	bl	800beb4 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a15e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a162:	fb05 4403 	mla	r4, r5, r3, r4
 800a166:	2302      	movs	r3, #2
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a168:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 800a16c:	e792      	b.n	800a094 <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a16e:	b2c9      	uxtb	r1, r1
 800a170:	f000 fc2c 	bl	800a9cc <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 800a174:	bb08      	cbnz	r0, 800a1ba <USBH_MSC_Process+0x13a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a176:	2234      	movs	r2, #52	; 0x34
 800a178:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a17c:	fb02 4303 	mla	r3, r2, r3, r4
 800a180:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800a184:	b1b2      	cbz	r2, 800a1b4 <USBH_MSC_Process+0x134>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a186:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device ready");
 800a188:	4883      	ldr	r0, [pc, #524]	; (800a398 <USBH_MSC_Process+0x318>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a18a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device ready");
 800a18e:	f001 fe79 	bl	800be84 <iprintf>
 800a192:	200a      	movs	r0, #10
 800a194:	f001 fe8e 	bl	800beb4 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a198:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a19c:	2234      	movs	r2, #52	; 0x34
 800a19e:	fb02 4403 	mla	r4, r2, r3, r4
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a1ae:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
 800a1b2:	e76f      	b.n	800a094 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a1b4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 800a1b8:	e7ee      	b.n	800a198 <USBH_MSC_Process+0x118>
            if (ready_status == USBH_FAIL)
 800a1ba:	2802      	cmp	r0, #2
 800a1bc:	d124      	bne.n	800a208 <USBH_MSC_Process+0x188>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a1be:	2234      	movs	r2, #52	; 0x34
 800a1c0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a1c4:	fb02 4303 	mla	r3, r2, r3, r4
 800a1c8:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800a1cc:	2a02      	cmp	r2, #2
 800a1ce:	d017      	beq.n	800a200 <USBH_MSC_Process+0x180>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a1d0:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device NOT ready");
 800a1d2:	4872      	ldr	r0, [pc, #456]	; (800a39c <USBH_MSC_Process+0x31c>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a1d4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device NOT ready");
 800a1d8:	f001 fe54 	bl	800be84 <iprintf>
 800a1dc:	200a      	movs	r0, #10
 800a1de:	f001 fe69 	bl	800beb4 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a1e2:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a1e6:	2234      	movs	r2, #52	; 0x34
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a1e8:	2001      	movs	r0, #1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a1ea:	fb02 4403 	mla	r4, r2, r3, r4
 800a1ee:	2305      	movs	r3, #5
 800a1f0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a1f4:	2302      	movs	r3, #2
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a1f6:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a1fa:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
}
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a200:	2200      	movs	r2, #0
 800a202:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 800a206:	e7ec      	b.n	800a1e2 <USBH_MSC_Process+0x162>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a208:	2804      	cmp	r0, #4
 800a20a:	f47f af43 	bne.w	800a094 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a20e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a212:	2234      	movs	r2, #52	; 0x34
 800a214:	fb02 4403 	mla	r4, r2, r3, r4
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a218:	2001      	movs	r0, #1
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a21a:	2302      	movs	r3, #2
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a21c:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a220:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
 800a224:	e7eb      	b.n	800a1fe <USBH_MSC_Process+0x17e>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a226:	fb05 4201 	mla	r2, r5, r1, r4
 800a22a:	b2c9      	uxtb	r1, r1
 800a22c:	3294      	adds	r2, #148	; 0x94
 800a22e:	f000 fbf3 	bl	800aa18 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 800a232:	bbc8      	cbnz	r0, 800a2a8 <USBH_MSC_Process+0x228>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 800a234:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a238:	fb05 4303 	mla	r3, r5, r3, r4
 800a23c:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
 800a240:	2a01      	cmp	r2, #1
 800a242:	d122      	bne.n	800a28a <USBH_MSC_Process+0x20a>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 800a244:	f8b3 2098 	ldrh.w	r2, [r3, #152]	; 0x98
 800a248:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a24c:	4854      	ldr	r0, [pc, #336]	; (800a3a0 <USBH_MSC_Process+0x320>)
 800a24e:	4351      	muls	r1, r2
 800a250:	f001 fe18 	bl	800be84 <iprintf>
 800a254:	200a      	movs	r0, #10
 800a256:	f001 fe2d 	bl	800beb4 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 800a25a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a25e:	4851      	ldr	r0, [pc, #324]	; (800a3a4 <USBH_MSC_Process+0x324>)
 800a260:	fb05 4303 	mla	r3, r5, r3, r4
 800a264:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a268:	f001 fe0c 	bl	800be84 <iprintf>
 800a26c:	200a      	movs	r0, #10
 800a26e:	f001 fe21 	bl	800beb4 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 800a272:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a276:	484c      	ldr	r0, [pc, #304]	; (800a3a8 <USBH_MSC_Process+0x328>)
 800a278:	fb05 4503 	mla	r5, r5, r3, r4
 800a27c:	f8b5 1098 	ldrh.w	r1, [r5, #152]	; 0x98
 800a280:	f001 fe00 	bl	800be84 <iprintf>
 800a284:	200a      	movs	r0, #10
 800a286:	f001 fe15 	bl	800beb4 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a28a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a28e:	2234      	movs	r2, #52	; 0x34
 800a290:	2001      	movs	r0, #1
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a292:	2100      	movs	r1, #0
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a294:	fb02 4203 	mla	r2, r2, r3, r4
 800a298:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a29c:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
              MSC_Handle->current_lun++;
 800a2a0:	4403      	add	r3, r0
 800a2a2:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
 800a2a6:	e7aa      	b.n	800a1fe <USBH_MSC_Process+0x17e>
            else if (scsi_status == USBH_FAIL)
 800a2a8:	2802      	cmp	r0, #2
 800a2aa:	d105      	bne.n	800a2b8 <USBH_MSC_Process+0x238>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a2ac:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a2b0:	fb05 4403 	mla	r4, r5, r3, r4
 800a2b4:	2305      	movs	r3, #5
 800a2b6:	e757      	b.n	800a168 <USBH_MSC_Process+0xe8>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a2b8:	2804      	cmp	r0, #4
 800a2ba:	f47f aeeb 	bne.w	800a094 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a2be:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a2c2:	fb05 4403 	mla	r4, r5, r3, r4
 800a2c6:	e7a7      	b.n	800a218 <USBH_MSC_Process+0x198>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a2c8:	fb05 4201 	mla	r2, r5, r1, r4
 800a2cc:	b2c9      	uxtb	r1, r1
 800a2ce:	329c      	adds	r2, #156	; 0x9c
 800a2d0:	f000 fc42 	bl	800ab58 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 800a2d4:	bbe0      	cbnz	r0, 800a350 <USBH_MSC_Process+0x2d0>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a2d6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a2da:	fb05 4503 	mla	r5, r5, r3, r4
 800a2de:	f895 109c 	ldrb.w	r1, [r5, #156]	; 0x9c
 800a2e2:	f001 02fb 	and.w	r2, r1, #251	; 0xfb
 800a2e6:	2a02      	cmp	r2, #2
 800a2e8:	d10b      	bne.n	800a302 <USBH_MSC_Process+0x282>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a2ea:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 800a2ee:	f8d6 34b0 	ldr.w	r3, [r6, #1200]	; 0x4b0
 800a2f2:	1a1b      	subs	r3, r3, r0
 800a2f4:	f242 700f 	movw	r0, #9999	; 0x270f
 800a2f8:	4283      	cmp	r3, r0
 800a2fa:	d802      	bhi.n	800a302 <USBH_MSC_Process+0x282>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a2fc:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
 800a300:	e6c8      	b.n	800a094 <USBH_MSC_Process+0x14>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800a302:	482a      	ldr	r0, [pc, #168]	; (800a3ac <USBH_MSC_Process+0x32c>)
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 800a304:	2534      	movs	r5, #52	; 0x34
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800a306:	f001 fdbd 	bl	800be84 <iprintf>
 800a30a:	200a      	movs	r0, #10
 800a30c:	f001 fdd2 	bl	800beb4 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 800a310:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a314:	4826      	ldr	r0, [pc, #152]	; (800a3b0 <USBH_MSC_Process+0x330>)
 800a316:	fb05 4303 	mla	r3, r5, r3, r4
 800a31a:	f893 109d 	ldrb.w	r1, [r3, #157]	; 0x9d
 800a31e:	f001 fdb1 	bl	800be84 <iprintf>
 800a322:	200a      	movs	r0, #10
 800a324:	f001 fdc6 	bl	800beb4 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 800a328:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a32c:	4821      	ldr	r0, [pc, #132]	; (800a3b4 <USBH_MSC_Process+0x334>)
 800a32e:	fb05 4303 	mla	r3, r5, r3, r4
 800a332:	f893 109e 	ldrb.w	r1, [r3, #158]	; 0x9e
 800a336:	f001 fda5 	bl	800be84 <iprintf>
 800a33a:	200a      	movs	r0, #10
 800a33c:	f001 fdba 	bl	800beb4 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a340:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a344:	2001      	movs	r0, #1
 800a346:	fb05 4503 	mla	r5, r5, r3, r4
 800a34a:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
 800a34e:	e7a7      	b.n	800a2a0 <USBH_MSC_Process+0x220>
            if (scsi_status == USBH_FAIL)
 800a350:	2802      	cmp	r0, #2
 800a352:	d1b1      	bne.n	800a2b8 <USBH_MSC_Process+0x238>
              USBH_UsrLog("MSC Device NOT ready");
 800a354:	4811      	ldr	r0, [pc, #68]	; (800a39c <USBH_MSC_Process+0x31c>)
 800a356:	f001 fd95 	bl	800be84 <iprintf>
 800a35a:	200a      	movs	r0, #10
 800a35c:	f001 fdaa 	bl	800beb4 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a360:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800a364:	fb05 4403 	mla	r4, r5, r3, r4
 800a368:	2308      	movs	r3, #8
 800a36a:	e6fd      	b.n	800a168 <USBH_MSC_Process+0xe8>
            MSC_Handle->current_lun++;
 800a36c:	3101      	adds	r1, #1
 800a36e:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
 800a372:	e68f      	b.n	800a094 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
 800a374:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a378:	2102      	movs	r1, #2
        MSC_Handle->state = MSC_IDLE;
 800a37a:	7325      	strb	r5, [r4, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a37c:	f8d0 34c0 	ldr.w	r3, [r0, #1216]	; 0x4c0
 800a380:	4798      	blx	r3
 800a382:	e687      	b.n	800a094 <USBH_MSC_Process+0x14>
      error = USBH_OK;
 800a384:	2000      	movs	r0, #0
 800a386:	e73a      	b.n	800a1fe <USBH_MSC_Process+0x17e>
 800a388:	08011553 	.word	0x08011553
 800a38c:	0801155d 	.word	0x0801155d
 800a390:	08011572 	.word	0x08011572
 800a394:	08011587 	.word	0x08011587
 800a398:	0801159c 	.word	0x0801159c
 800a39c:	080115ad 	.word	0x080115ad
 800a3a0:	080115c2 	.word	0x080115c2
 800a3a4:	080115e2 	.word	0x080115e2
 800a3a8:	080115f5 	.word	0x080115f5
 800a3ac:	08011608 	.word	0x08011608
 800a3b0:	08011618 	.word	0x08011618
 800a3b4:	08011633 	.word	0x08011633

0800a3b8 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3b8:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
 800a3bc:	4602      	mov	r2, r0
 800a3be:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3c0:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 800a3c2:	7ba3      	ldrb	r3, [r4, #14]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d002      	beq.n	800a3ce <USBH_MSC_ClassRequest+0x16>
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d027      	beq.n	800a41c <USBH_MSC_ClassRequest+0x64>
 800a3cc:	bb63      	cbnz	r3, 800a428 <USBH_MSC_ClassRequest+0x70>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	f000 f9f2 	bl	800a7ba <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 800a3d6:	2803      	cmp	r0, #3
 800a3d8:	d11d      	bne.n	800a416 <USBH_MSC_ClassRequest+0x5e>
        MSC_Handle->max_lun = 0U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a3de:	7821      	ldrb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 800a3e0:	4813      	ldr	r0, [pc, #76]	; (800a430 <USBH_MSC_ClassRequest+0x78>)
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a3e2:	2902      	cmp	r1, #2
 800a3e4:	bf96      	itet	ls
 800a3e6:	3101      	addls	r1, #1
 800a3e8:	2102      	movhi	r1, #2
 800a3ea:	b2c9      	uxtbls	r1, r1
 800a3ec:	7021      	strb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 800a3ee:	f001 fd49 	bl	800be84 <iprintf>
 800a3f2:	200a      	movs	r0, #10
 800a3f4:	f001 fd5e 	bl	800beb4 <putchar>
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a3f8:	7823      	ldrb	r3, [r4, #0]
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	b1b3      	cbz	r3, 800a42c <USBH_MSC_ClassRequest+0x74>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a3fe:	2202      	movs	r2, #2
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a400:	2b01      	cmp	r3, #1
          MSC_Handle->unit[i].state_changed = 0U;
 800a402:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a406:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a40a:	d906      	bls.n	800a41a <USBH_MSC_ClassRequest+0x62>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a40c:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
 800a410:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
 800a414:	e001      	b.n	800a41a <USBH_MSC_ClassRequest+0x62>
      if (status == USBH_OK)
 800a416:	2800      	cmp	r0, #0
 800a418:	d0e1      	beq.n	800a3de <USBH_MSC_ClassRequest+0x26>
}
 800a41a:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a41c:	2100      	movs	r1, #0
 800a41e:	f001 fa54 	bl	800b8ca <USBH_ClrFeature>
 800a422:	b908      	cbnz	r0, 800a428 <USBH_MSC_ClassRequest+0x70>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a424:	7be3      	ldrb	r3, [r4, #15]
 800a426:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a428:	2001      	movs	r0, #1
 800a42a:	e7f6      	b.n	800a41a <USBH_MSC_ClassRequest+0x62>
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a42c:	4618      	mov	r0, r3
 800a42e:	e7f4      	b.n	800a41a <USBH_MSC_ClassRequest+0x62>
 800a430:	08011657 	.word	0x08011657

0800a434 <USBH_MSC_InterfaceDeInit>:
{
 800a434:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a436:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
 800a43a:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a43c:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
 800a43e:	7969      	ldrb	r1, [r5, #5]
 800a440:	b139      	cbz	r1, 800a452 <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a442:	f001 fabd 	bl	800b9c0 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a446:	7969      	ldrb	r1, [r5, #5]
 800a448:	4620      	mov	r0, r4
 800a44a:	f001 fad6 	bl	800b9fa <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a44e:	2300      	movs	r3, #0
 800a450:	716b      	strb	r3, [r5, #5]
  if (MSC_Handle->InPipe)
 800a452:	7929      	ldrb	r1, [r5, #4]
 800a454:	b141      	cbz	r1, 800a468 <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a456:	4620      	mov	r0, r4
 800a458:	f001 fab2 	bl	800b9c0 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a45c:	7929      	ldrb	r1, [r5, #4]
 800a45e:	4620      	mov	r0, r4
 800a460:	f001 facb 	bl	800b9fa <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a464:	2300      	movs	r3, #0
 800a466:	712b      	strb	r3, [r5, #4]
  if (phost->pActiveClass->pData)
 800a468:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
 800a46c:	69d8      	ldr	r0, [r3, #28]
 800a46e:	b128      	cbz	r0, 800a47c <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
 800a470:	f001 fc50 	bl	800bd14 <free>
    phost->pActiveClass->pData = 0U;
 800a474:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
 800a478:	2200      	movs	r2, #0
 800a47a:	61da      	str	r2, [r3, #28]
}
 800a47c:	2000      	movs	r0, #0
 800a47e:	bd38      	pop	{r3, r4, r5, pc}

0800a480 <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a480:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
 800a484:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a486:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a488:	2634      	movs	r6, #52	; 0x34
 800a48a:	fb06 5401 	mla	r4, r6, r1, r5
 800a48e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800a492:	2b06      	cmp	r3, #6
 800a494:	d028      	beq.n	800a4e8 <USBH_MSC_RdWrProcess+0x68>
 800a496:	2b07      	cmp	r3, #7
 800a498:	d031      	beq.n	800a4fe <USBH_MSC_RdWrProcess+0x7e>
 800a49a:	2b05      	cmp	r3, #5
 800a49c:	d13a      	bne.n	800a514 <USBH_MSC_RdWrProcess+0x94>
#endif
#endif
      break;

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a49e:	fb06 5201 	mla	r2, r6, r1, r5
 800a4a2:	329c      	adds	r2, #156	; 0x9c
 800a4a4:	f000 fb58 	bl	800ab58 <USBH_MSC_SCSI_RequestSense>

      if (scsi_status == USBH_OK)
 800a4a8:	bbb0      	cbnz	r0, 800a518 <USBH_MSC_RdWrProcess+0x98>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 800a4aa:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 800a4ae:	4822      	ldr	r0, [pc, #136]	; (800a538 <USBH_MSC_RdWrProcess+0xb8>)
 800a4b0:	f001 fce8 	bl	800be84 <iprintf>
 800a4b4:	200a      	movs	r0, #10
 800a4b6:	f001 fcfd 	bl	800beb4 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 800a4ba:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
 800a4be:	481f      	ldr	r0, [pc, #124]	; (800a53c <USBH_MSC_RdWrProcess+0xbc>)
 800a4c0:	f001 fce0 	bl	800be84 <iprintf>
 800a4c4:	200a      	movs	r0, #10
 800a4c6:	f001 fcf5 	bl	800beb4 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 800a4ca:	f894 109e 	ldrb.w	r1, [r4, #158]	; 0x9e
 800a4ce:	481c      	ldr	r0, [pc, #112]	; (800a540 <USBH_MSC_RdWrProcess+0xc0>)
 800a4d0:	f001 fcd8 	bl	800be84 <iprintf>
 800a4d4:	200a      	movs	r0, #10
 800a4d6:	f001 fced 	bl	800beb4 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a4da:	2301      	movs	r3, #1
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a4dc:	2002      	movs	r0, #2
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a4de:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a4e2:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
 800a4e6:	e008      	b.n	800a4fa <USBH_MSC_RdWrProcess+0x7a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	f000 fbc0 	bl	800ac72 <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 800a4f2:	b950      	cbnz	r0, 800a50a <USBH_MSC_RdWrProcess+0x8a>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    default:
      break;

  }
  return error;
}
 800a4fa:	b002      	add	sp, #8
 800a4fc:	bd70      	pop	{r4, r5, r6, pc}
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a4fe:	2300      	movs	r3, #0
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	461a      	mov	r2, r3
 800a504:	f000 fb71 	bl	800abea <USBH_MSC_SCSI_Write>
 800a508:	e7f3      	b.n	800a4f2 <USBH_MSC_RdWrProcess+0x72>
      else if (scsi_status == USBH_FAIL)
 800a50a:	2802      	cmp	r0, #2
 800a50c:	d10d      	bne.n	800a52a <USBH_MSC_RdWrProcess+0xaa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a50e:	2305      	movs	r3, #5
 800a510:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a514:	2001      	movs	r0, #1
 800a516:	e7f0      	b.n	800a4fa <USBH_MSC_RdWrProcess+0x7a>
      if (scsi_status == USBH_FAIL)
 800a518:	2802      	cmp	r0, #2
 800a51a:	d106      	bne.n	800a52a <USBH_MSC_RdWrProcess+0xaa>
        USBH_UsrLog("MSC Device NOT ready");
 800a51c:	4809      	ldr	r0, [pc, #36]	; (800a544 <USBH_MSC_RdWrProcess+0xc4>)
 800a51e:	f001 fcb1 	bl	800be84 <iprintf>
 800a522:	200a      	movs	r0, #10
 800a524:	f001 fcc6 	bl	800beb4 <putchar>
 800a528:	e7f4      	b.n	800a514 <USBH_MSC_RdWrProcess+0x94>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a52a:	2804      	cmp	r0, #4
 800a52c:	d1f2      	bne.n	800a514 <USBH_MSC_RdWrProcess+0x94>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a52e:	2308      	movs	r3, #8
          error = USBH_FAIL;
 800a530:	2002      	movs	r0, #2
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a532:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 800a536:	e7e0      	b.n	800a4fa <USBH_MSC_RdWrProcess+0x7a>
 800a538:	08011608 	.word	0x08011608
 800a53c:	08011618 	.word	0x08011618
 800a540:	08011633 	.word	0x08011633
 800a544:	080115ad 	.word	0x080115ad

0800a548 <USBH_MSC_InterfaceInit>:
{
 800a548:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a54c:	f8d0 1468 	ldr.w	r1, [r0, #1128]	; 0x468
 800a550:	2350      	movs	r3, #80	; 0x50
 800a552:	2206      	movs	r2, #6
{
 800a554:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a556:	7909      	ldrb	r1, [r1, #4]
 800a558:	f000 fc84 	bl	800ae64 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a55c:	4601      	mov	r1, r0
 800a55e:	b120      	cbz	r0, 800a56a <USBH_MSC_InterfaceInit+0x22>
    return USBH_FAIL;
 800a560:	2702      	movs	r7, #2
}
 800a562:	4638      	mov	r0, r7
 800a564:	b004      	add	sp, #16
 800a566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = USBH_SelectInterface(phost, interface);
 800a56a:	4628      	mov	r0, r5
 800a56c:	f000 fc36 	bl	800addc <USBH_SelectInterface>
  if (status != USBH_OK)
 800a570:	4607      	mov	r7, r0
 800a572:	2800      	cmp	r0, #0
 800a574:	d1f4      	bne.n	800a560 <USBH_MSC_InterfaceInit+0x18>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a576:	f8d5 6468 	ldr.w	r6, [r5, #1128]	; 0x468
 800a57a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a57e:	f001 fbc1 	bl	800bd04 <malloc>
 800a582:	4604      	mov	r4, r0
 800a584:	61f0      	str	r0, [r6, #28]
  if (MSC_Handle == NULL)
 800a586:	2800      	cmp	r0, #0
 800a588:	d0ea      	beq.n	800a560 <USBH_MSC_InterfaceInit+0x18>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a58a:	4639      	mov	r1, r7
 800a58c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a590:	f001 fbc8 	bl	800bd24 <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a594:	f895 344e 	ldrb.w	r3, [r5, #1102]	; 0x44e
 800a598:	f8b5 2450 	ldrh.w	r2, [r5, #1104]	; 0x450
  MSC_Handle->state = MSC_INIT;
 800a59c:	2600      	movs	r6, #0
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a59e:	0618      	lsls	r0, r3, #24
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a5a0:	4628      	mov	r0, r5
  MSC_Handle->state = MSC_INIT;
 800a5a2:	7326      	strb	r6, [r4, #12]
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a5a4:	f04f 0802 	mov.w	r8, #2
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a5a8:	bf54      	ite	pl
 800a5aa:	71a3      	strbpl	r3, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a5ac:	71e3      	strbmi	r3, [r4, #7]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a5ae:	f895 3456 	ldrb.w	r3, [r5, #1110]	; 0x456
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a5b2:	bf4c      	ite	mi
 800a5b4:	8162      	strhmi	r2, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a5b6:	8122      	strhpl	r2, [r4, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a5b8:	0619      	lsls	r1, r3, #24
 800a5ba:	f8b5 2458 	ldrh.w	r2, [r5, #1112]	; 0x458
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a5be:	bf58      	it	pl
 800a5c0:	71a3      	strbpl	r3, [r4, #6]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a5c2:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a5c4:	bf46      	itte	mi
 800a5c6:	71e3      	strbmi	r3, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a5c8:	8162      	strhmi	r2, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a5ca:	8122      	strhpl	r2, [r4, #8]
  MSC_Handle->error = MSC_OK;
 800a5cc:	7366      	strb	r6, [r4, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a5ce:	73a6      	strb	r6, [r4, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a5d0:	f001 f9fb 	bl	800b9ca <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a5d4:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a5d6:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a5d8:	4628      	mov	r0, r5
 800a5da:	f001 f9f6 	bl	800b9ca <USBH_AllocPipe>
 800a5de:	7120      	strb	r0, [r4, #4]
  USBH_MSC_BOT_Init(phost);
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f000 f8f3 	bl	800a7cc <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a5e6:	8920      	ldrh	r0, [r4, #8]
 800a5e8:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 800a5ec:	9002      	str	r0, [sp, #8]
 800a5ee:	f895 041d 	ldrb.w	r0, [r5, #1053]	; 0x41d
 800a5f2:	79a2      	ldrb	r2, [r4, #6]
 800a5f4:	7961      	ldrb	r1, [r4, #5]
 800a5f6:	9000      	str	r0, [sp, #0]
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f8cd 8004 	str.w	r8, [sp, #4]
 800a5fe:	f001 f9d0 	bl	800b9a2 <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a602:	8960      	ldrh	r0, [r4, #10]
 800a604:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 800a608:	79e2      	ldrb	r2, [r4, #7]
 800a60a:	7921      	ldrb	r1, [r4, #4]
 800a60c:	e9cd 8001 	strd	r8, r0, [sp, #4]
 800a610:	f895 041d 	ldrb.w	r0, [r5, #1053]	; 0x41d
 800a614:	9000      	str	r0, [sp, #0]
 800a616:	4628      	mov	r0, r5
 800a618:	f001 f9c3 	bl	800b9a2 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a61c:	4632      	mov	r2, r6
 800a61e:	7921      	ldrb	r1, [r4, #4]
 800a620:	4628      	mov	r0, r5
 800a622:	f7f6 fdc7 	bl	80011b4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a626:	4632      	mov	r2, r6
 800a628:	7961      	ldrb	r1, [r4, #5]
 800a62a:	4628      	mov	r0, r5
 800a62c:	f7f6 fdc2 	bl	80011b4 <USBH_LL_SetToggle>
 800a630:	e797      	b.n	800a562 <USBH_MSC_InterfaceInit+0x1a>

0800a632 <USBH_MSC_IsReady>:
uint8_t  USBH_MSC_IsReady(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
 800a632:	7803      	ldrb	r3, [r0, #0]
 800a634:	2b0b      	cmp	r3, #11
 800a636:	d107      	bne.n	800a648 <USBH_MSC_IsReady+0x16>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a638:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
 800a63c:	69db      	ldr	r3, [r3, #28]
 800a63e:	7b18      	ldrb	r0, [r3, #12]
  {
    res = 1U;
 800a640:	1e43      	subs	r3, r0, #1
 800a642:	4258      	negs	r0, r3
 800a644:	4158      	adcs	r0, r3
 800a646:	4770      	bx	lr
  }
  else
  {
    res = 0U;
 800a648:	2000      	movs	r0, #0
  }

  return res;
}
 800a64a:	4770      	bx	lr

0800a64c <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a64c:	7803      	ldrb	r3, [r0, #0]
 800a64e:	2b0b      	cmp	r3, #11
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a650:	bf01      	itttt	eq
 800a652:	f8d0 3468 	ldreq.w	r3, [r0, #1128]	; 0x468
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a656:	2234      	moveq	r2, #52	; 0x34
 800a658:	69db      	ldreq	r3, [r3, #28]
 800a65a:	fb02 3101 	mlaeq	r1, r2, r1, r3
 800a65e:	bf03      	ittte	eq
 800a660:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
  {
    res = 1U;
 800a664:	fab0 f080 	clzeq	r0, r0
 800a668:	0940      	lsreq	r0, r0, #5
  }
  else
  {
    res = 0U;
 800a66a:	2000      	movne	r0, #0
  }

  return res;
}
 800a66c:	4770      	bx	lr

0800a66e <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 800a66e:	7803      	ldrb	r3, [r0, #0]
 800a670:	2b0b      	cmp	r3, #11
{
 800a672:	b510      	push	{r4, lr}
  if (phost->gState == HOST_CLASS)
 800a674:	d111      	bne.n	800a69a <USBH_MSC_GetLUNInfo+0x2c>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a676:	f8d0 0468 	ldr.w	r0, [r0, #1128]	; 0x468
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a67a:	2334      	movs	r3, #52	; 0x34
 800a67c:	2490      	movs	r4, #144	; 0x90
 800a67e:	fb13 4301 	smlabb	r3, r3, r1, r4
 800a682:	69c1      	ldr	r1, [r0, #28]
 800a684:	4419      	add	r1, r3
 800a686:	f101 0334 	add.w	r3, r1, #52	; 0x34
 800a68a:	f851 0b04 	ldr.w	r0, [r1], #4
 800a68e:	4299      	cmp	r1, r3
 800a690:	f842 0b04 	str.w	r0, [r2], #4
 800a694:	d1f9      	bne.n	800a68a <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
 800a696:	2000      	movs	r0, #0
  }
  else
  {
    return USBH_FAIL;
  }
}
 800a698:	bd10      	pop	{r4, pc}
    return USBH_FAIL;
 800a69a:	2002      	movs	r0, #2
 800a69c:	e7fc      	b.n	800a698 <USBH_MSC_GetLUNInfo+0x2a>

0800a69e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a69e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 800a6a2:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	460f      	mov	r7, r1
 800a6aa:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if ((phost->device.is_connected == 0U) ||
 800a6ae:	b3bd      	cbz	r5, 800a720 <USBH_MSC_Read+0x82>
      (phost->gState != HOST_CLASS) ||
 800a6b0:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 800a6b2:	2d0b      	cmp	r5, #11
 800a6b4:	d134      	bne.n	800a720 <USBH_MSC_Read+0x82>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6b6:	f8d0 5468 	ldr.w	r5, [r0, #1128]	; 0x468
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a6ba:	2634      	movs	r6, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6bc:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a6be:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) ||
 800a6c2:	f896 c090 	ldrb.w	ip, [r6, #144]	; 0x90
 800a6c6:	f1bc 0f01 	cmp.w	ip, #1
 800a6ca:	d129      	bne.n	800a720 <USBH_MSC_Read+0x82>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_READ;
 800a6cc:	f04f 0c06 	mov.w	ip, #6
 800a6d0:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a6d4:	f886 c090 	strb.w	ip, [r6, #144]	; 0x90

  timeout = phost->Timer;

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a6d8:	f242 7610 	movw	r6, #10000	; 0x2710
  MSC_Handle->rw_lun = lun;
 800a6dc:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a6e0:	f8cd 8000 	str.w	r8, [sp]
 800a6e4:	f000 fac5 	bl	800ac72 <USBH_MSC_SCSI_Read>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a6e8:	fb06 f608 	mul.w	r6, r6, r8
  timeout = phost->Timer;
 800a6ec:	f8d4 94b0 	ldr.w	r9, [r4, #1200]	; 0x4b0
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f7ff fec4 	bl	800a480 <USBH_MSC_RdWrProcess>
 800a6f8:	2801      	cmp	r0, #1
 800a6fa:	d005      	beq.n	800a708 <USBH_MSC_Read+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a6fc:	2301      	movs	r3, #1

  return USBH_OK;
 800a6fe:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 800a700:	732b      	strb	r3, [r5, #12]
}
 800a702:	b003      	add	sp, #12
 800a704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a708:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
 800a70c:	eba3 0309 	sub.w	r3, r3, r9
 800a710:	42b3      	cmp	r3, r6
 800a712:	d803      	bhi.n	800a71c <USBH_MSC_Read+0x7e>
 800a714:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1e9      	bne.n	800a6f0 <USBH_MSC_Read+0x52>
      MSC_Handle->state = MSC_IDLE;
 800a71c:	2301      	movs	r3, #1
 800a71e:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 800a720:	2002      	movs	r0, #2
 800a722:	e7ee      	b.n	800a702 <USBH_MSC_Read+0x64>

0800a724 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 800a728:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
 800a72c:	4604      	mov	r4, r0
 800a72e:	460f      	mov	r7, r1
 800a730:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if ((phost->device.is_connected == 0U) ||
 800a734:	b3bd      	cbz	r5, 800a7a6 <USBH_MSC_Write+0x82>
      (phost->gState != HOST_CLASS) ||
 800a736:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 800a738:	2d0b      	cmp	r5, #11
 800a73a:	d134      	bne.n	800a7a6 <USBH_MSC_Write+0x82>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a73c:	f8d0 5468 	ldr.w	r5, [r0, #1128]	; 0x468
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a740:	2634      	movs	r6, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a742:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a744:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) ||
 800a748:	f896 c090 	ldrb.w	ip, [r6, #144]	; 0x90
 800a74c:	f1bc 0f01 	cmp.w	ip, #1
 800a750:	d129      	bne.n	800a7a6 <USBH_MSC_Write+0x82>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_WRITE;
 800a752:	f04f 0c07 	mov.w	ip, #7
 800a756:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a75a:	f886 c090 	strb.w	ip, [r6, #144]	; 0x90
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);

  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a75e:	f242 7610 	movw	r6, #10000	; 0x2710
  MSC_Handle->rw_lun = lun;
 800a762:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a766:	f8cd 8000 	str.w	r8, [sp]
 800a76a:	f000 fa3e 	bl	800abea <USBH_MSC_SCSI_Write>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a76e:	fb06 f608 	mul.w	r6, r6, r8
  timeout = phost->Timer;
 800a772:	f8d4 94b0 	ldr.w	r9, [r4, #1200]	; 0x4b0
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a776:	4639      	mov	r1, r7
 800a778:	4620      	mov	r0, r4
 800a77a:	f7ff fe81 	bl	800a480 <USBH_MSC_RdWrProcess>
 800a77e:	2801      	cmp	r0, #1
 800a780:	d005      	beq.n	800a78e <USBH_MSC_Write+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a782:	2301      	movs	r3, #1
  return USBH_OK;
 800a784:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 800a786:	732b      	strb	r3, [r5, #12]
}
 800a788:	b003      	add	sp, #12
 800a78a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a78e:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
 800a792:	eba3 0309 	sub.w	r3, r3, r9
 800a796:	42b3      	cmp	r3, r6
 800a798:	d803      	bhi.n	800a7a2 <USBH_MSC_Write+0x7e>
 800a79a:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1e9      	bne.n	800a776 <USBH_MSC_Write+0x52>
      MSC_Handle->state = MSC_IDLE;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 800a7a6:	2002      	movs	r0, #2
 800a7a8:	e7ee      	b.n	800a788 <USBH_MSC_Write+0x64>

0800a7aa <USBH_MSC_BOT_REQ_Reset>:

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
 800a7aa:	f64f 7121 	movw	r1, #65313	; 0xff21
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, 0U, 0U);
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	f000 be89 	b.w	800b4cc <USBH_CtlReq>

0800a7ba <USBH_MSC_BOT_REQ_GetMaxLUN>:
{
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
 800a7ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a7be:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
 800a7c2:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f000 be80 	b.w	800b4cc <USBH_CtlReq>

0800a7cc <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7cc:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
  MSC_Handle->hbot.state = BOT_SEND_CBW;
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;

  return USBH_OK;
}
 800a7d0:	2000      	movs	r0, #0
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a7d2:	4905      	ldr	r1, [pc, #20]	; (800a7e8 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7d4:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a7d6:	4a05      	ldr	r2, [pc, #20]	; (800a7ec <USBH_MSC_BOT_Init+0x20>)
 800a7d8:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a7dc:	2201      	movs	r2, #1
 800a7de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a7e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 800a7e6:	4770      	bx	lr
 800a7e8:	43425355 	.word	0x43425355
 800a7ec:	20304050 	.word	0x20304050

0800a7f0 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7f0:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
 800a7f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7f6:	69dc      	ldr	r4, [r3, #28]
{
 800a7f8:	4606      	mov	r6, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 800a7fa:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800a7fe:	3b01      	subs	r3, #1
 800a800:	2b0a      	cmp	r3, #10
 800a802:	d859      	bhi.n	800a8b8 <USBH_MSC_BOT_Process+0xc8>
 800a804:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a808:	001a000b 	.word	0x001a000b
 800a80c:	003d0033 	.word	0x003d0033
 800a810:	0068005e 	.word	0x0068005e
 800a814:	0093008b 	.word	0x0093008b
 800a818:	00be00b4 	.word	0x00be00b4
 800a81c:	00d6      	.short	0x00d6
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a81e:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a822:	2302      	movs	r3, #2
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a824:	2501      	movs	r5, #1
 800a826:	221f      	movs	r2, #31
 800a828:	f104 0154 	add.w	r1, r4, #84	; 0x54
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a82c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a830:	7963      	ldrb	r3, [r4, #5]
 800a832:	9500      	str	r5, [sp, #0]
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a834:	4630      	mov	r0, r6
 800a836:	f001 f88d 	bl	800b954 <USBH_BulkSendData>
 800a83a:	e03d      	b.n	800a8b8 <USBH_MSC_BOT_Process+0xc8>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a83c:	7961      	ldrb	r1, [r4, #5]
 800a83e:	f7f6 fca5 	bl	800118c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a842:	2801      	cmp	r0, #1
 800a844:	d10c      	bne.n	800a860 <USBH_MSC_BOT_Process+0x70>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a846:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a848:	b143      	cbz	r3, 800a85c <USBH_MSC_BOT_Process+0x6c>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a84a:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 800a84e:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a850:	bfb4      	ite	lt
 800a852:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a854:	2305      	movge	r3, #5

    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
      if (status == USBH_OK)
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a856:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800a85a:	e006      	b.n	800a86a <USBH_MSC_BOT_Process+0x7a>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a85c:	2307      	movs	r3, #7
 800a85e:	e7fa      	b.n	800a856 <USBH_MSC_BOT_Process+0x66>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a860:	2802      	cmp	r0, #2
 800a862:	d158      	bne.n	800a916 <USBH_MSC_BOT_Process+0x126>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a864:	2001      	movs	r0, #1
 800a866:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50

    default:
      break;
  }
  return status;
}
 800a86a:	b002      	add	sp, #8
 800a86c:	bd70      	pop	{r4, r5, r6, pc}
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a86e:	7923      	ldrb	r3, [r4, #4]
 800a870:	8962      	ldrh	r2, [r4, #10]
 800a872:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a876:	f001 f884 	bl	800b982 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a87a:	2304      	movs	r3, #4
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a87c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800a880:	e01a      	b.n	800a8b8 <USBH_MSC_BOT_Process+0xc8>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a882:	7921      	ldrb	r1, [r4, #4]
 800a884:	f7f6 fc82 	bl	800118c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a888:	2801      	cmp	r0, #1
 800a88a:	d117      	bne.n	800a8bc <USBH_MSC_BOT_Process+0xcc>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a88c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a88e:	8962      	ldrh	r2, [r4, #10]
 800a890:	4293      	cmp	r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a892:	bf85      	ittet	hi
 800a894:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a898:	1a9b      	subhi	r3, r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a89a:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a89c:	1889      	addhi	r1, r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a89e:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a8a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a8a2:	bf88      	it	hi
 800a8a4:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d065      	beq.n	800a978 <USBH_MSC_BOT_Process+0x188>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a8ac:	7923      	ldrb	r3, [r4, #4]
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a8b4:	f001 f865 	bl	800b982 <USBH_BulkReceiveData>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	e7d6      	b.n	800a86a <USBH_MSC_BOT_Process+0x7a>
      else if (URB_Status == USBH_URB_STALL)
 800a8bc:	2805      	cmp	r0, #5
 800a8be:	d1fb      	bne.n	800a8b8 <USBH_MSC_BOT_Process+0xc8>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a8c0:	2309      	movs	r3, #9
 800a8c2:	e7db      	b.n	800a87c <USBH_MSC_BOT_Process+0x8c>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a8c4:	2501      	movs	r5, #1
 800a8c6:	7963      	ldrb	r3, [r4, #5]
 800a8c8:	8922      	ldrh	r2, [r4, #8]
 800a8ca:	9500      	str	r5, [sp, #0]
 800a8cc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a8d0:	f001 f840 	bl	800b954 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a8d4:	2306      	movs	r3, #6
 800a8d6:	e7d1      	b.n	800a87c <USBH_MSC_BOT_Process+0x8c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a8d8:	7961      	ldrb	r1, [r4, #5]
 800a8da:	f7f6 fc57 	bl	800118c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a8de:	2801      	cmp	r0, #1
 800a8e0:	d115      	bne.n	800a90e <USBH_MSC_BOT_Process+0x11e>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a8e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a8e4:	2501      	movs	r5, #1
 800a8e6:	8922      	ldrh	r2, [r4, #8]
 800a8e8:	4293      	cmp	r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a8ea:	bf85      	ittet	hi
 800a8ec:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a8f0:	1a9b      	subhi	r3, r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a8f2:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a8f4:	1889      	addhi	r1, r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a8f6:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a8f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a8fa:	bf88      	it	hi
 800a8fc:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a900:	2b00      	cmp	r3, #0
 800a902:	d039      	beq.n	800a978 <USBH_MSC_BOT_Process+0x188>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a904:	7963      	ldrb	r3, [r4, #5]
 800a906:	9500      	str	r5, [sp, #0]
 800a908:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a90c:	e792      	b.n	800a834 <USBH_MSC_BOT_Process+0x44>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a90e:	2802      	cmp	r0, #2
 800a910:	d101      	bne.n	800a916 <USBH_MSC_BOT_Process+0x126>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a912:	2305      	movs	r3, #5
 800a914:	e7b2      	b.n	800a87c <USBH_MSC_BOT_Process+0x8c>
      else if (URB_Status == USBH_URB_STALL)
 800a916:	2805      	cmp	r0, #5
 800a918:	d1ce      	bne.n	800a8b8 <USBH_MSC_BOT_Process+0xc8>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a91a:	230a      	movs	r3, #10
 800a91c:	e7ae      	b.n	800a87c <USBH_MSC_BOT_Process+0x8c>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a91e:	7923      	ldrb	r3, [r4, #4]
 800a920:	220d      	movs	r2, #13
 800a922:	f104 0178 	add.w	r1, r4, #120	; 0x78
 800a926:	f001 f82c 	bl	800b982 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a92a:	2308      	movs	r3, #8
 800a92c:	e7a6      	b.n	800a87c <USBH_MSC_BOT_Process+0x8c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a92e:	7921      	ldrb	r1, [r4, #4]
 800a930:	f7f6 fc2c 	bl	800118c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800a934:	2801      	cmp	r0, #1
 800a936:	d1c1      	bne.n	800a8bc <USBH_MSC_BOT_Process+0xcc>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a938:	f8d6 3468 	ldr.w	r3, [r6, #1128]	; 0x468
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a93c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a940:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a944:	4630      	mov	r0, r6
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a946:	69dc      	ldr	r4, [r3, #28]
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a948:	7921      	ldrb	r1, [r4, #4]
 800a94a:	f7f6 fbf0 	bl	800112e <USBH_LL_GetLastXferSize>
 800a94e:	280d      	cmp	r0, #13
 800a950:	d137      	bne.n	800a9c2 <USBH_MSC_BOT_Process+0x1d2>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a952:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a954:	4b1c      	ldr	r3, [pc, #112]	; (800a9c8 <USBH_MSC_BOT_Process+0x1d8>)
 800a956:	429a      	cmp	r2, r3
 800a958:	d133      	bne.n	800a9c2 <USBH_MSC_BOT_Process+0x1d2>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a95a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a95c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a95e:	429a      	cmp	r2, r3
 800a960:	d12f      	bne.n	800a9c2 <USBH_MSC_BOT_Process+0x1d2>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a962:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
          status = USBH_OK;
 800a966:	2b00      	cmp	r3, #0
 800a968:	bf14      	ite	ne
 800a96a:	2002      	movne	r0, #2
 800a96c:	2000      	moveq	r0, #0
 800a96e:	e77c      	b.n	800a86a <USBH_MSC_BOT_Process+0x7a>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a970:	79e1      	ldrb	r1, [r4, #7]
 800a972:	f000 ffaa 	bl	800b8ca <USBH_ClrFeature>
      if (error == USBH_OK)
 800a976:	b908      	cbnz	r0, 800a97c <USBH_MSC_BOT_Process+0x18c>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a978:	2307      	movs	r3, #7
 800a97a:	e77f      	b.n	800a87c <USBH_MSC_BOT_Process+0x8c>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a97c:	2804      	cmp	r0, #4
 800a97e:	d19b      	bne.n	800a8b8 <USBH_MSC_BOT_Process+0xc8>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a980:	230b      	movs	r3, #11
 800a982:	e77b      	b.n	800a87c <USBH_MSC_BOT_Process+0x8c>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a984:	79a1      	ldrb	r1, [r4, #6]
 800a986:	f000 ffa0 	bl	800b8ca <USBH_ClrFeature>
      if (error == USBH_OK)
 800a98a:	4605      	mov	r5, r0
 800a98c:	b980      	cbnz	r0, 800a9b0 <USBH_MSC_BOT_Process+0x1c0>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a98e:	7961      	ldrb	r1, [r4, #5]
 800a990:	4630      	mov	r0, r6
 800a992:	f7f6 fc1f 	bl	80011d4 <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a996:	f1c0 0201 	rsb	r2, r0, #1
 800a99a:	7961      	ldrb	r1, [r4, #5]
 800a99c:	4630      	mov	r0, r6
 800a99e:	b2d2      	uxtb	r2, r2
 800a9a0:	f7f6 fc08 	bl	80011b4 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a9a4:	462a      	mov	r2, r5
 800a9a6:	7921      	ldrb	r1, [r4, #4]
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f7f6 fc03 	bl	80011b4 <USBH_LL_SetToggle>
 800a9ae:	e787      	b.n	800a8c0 <USBH_MSC_BOT_Process+0xd0>
        if (error == USBH_UNRECOVERED_ERROR)
 800a9b0:	2804      	cmp	r0, #4
 800a9b2:	e7e4      	b.n	800a97e <USBH_MSC_BOT_Process+0x18e>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a9b4:	f7ff fef9 	bl	800a7aa <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	f47f af56 	bne.w	800a86a <USBH_MSC_BOT_Process+0x7a>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e749      	b.n	800a856 <USBH_MSC_BOT_Process+0x66>
          status = USBH_FAIL;
 800a9c2:	2002      	movs	r0, #2
 800a9c4:	e751      	b.n	800a86a <USBH_MSC_BOT_Process+0x7a>
 800a9c6:	bf00      	nop
 800a9c8:	53425355 	.word	0x53425355

0800a9cc <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9cc:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
 800a9d0:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9d2:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800a9d4:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800a9d8:	2d01      	cmp	r5, #1
 800a9da:	d003      	beq.n	800a9e4 <USBH_MSC_SCSI_TestUnitReady+0x18>
 800a9dc:	2d02      	cmp	r5, #2
 800a9de:	d017      	beq.n	800aa10 <USBH_MSC_SCSI_TestUnitReady+0x44>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a9e0:	2002      	movs	r0, #2
 800a9e2:	e014      	b.n	800aa0e <USBH_MSC_SCSI_TestUnitReady+0x42>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a9e4:	2600      	movs	r6, #0
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a9e6:	230a      	movs	r3, #10

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a9e8:	2210      	movs	r2, #16
 800a9ea:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a9ee:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a9f2:	4631      	mov	r1, r6
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a9f4:	65e6      	str	r6, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a9f6:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a9fa:	f001 f993 	bl	800bd24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;

      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a9fe:	2302      	movs	r3, #2
      error = USBH_BUSY;
 800aa00:	4628      	mov	r0, r5
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800aa02:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa06:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aa0a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    default:
      break;
  }

  return error;
}
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}
 800aa10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 800aa14:	f7ff beec 	b.w	800a7f0 <USBH_MSC_BOT_Process>

0800aa18 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa18:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
 800aa1c:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa1e:	69dc      	ldr	r4, [r3, #28]
{
 800aa20:	4616      	mov	r6, r2

  switch (MSC_Handle->hbot.cmd_state)
 800aa22:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800aa26:	2d01      	cmp	r5, #1
 800aa28:	d003      	beq.n	800aa32 <USBH_MSC_SCSI_ReadCapacity+0x1a>
 800aa2a:	2d02      	cmp	r5, #2
 800aa2c:	d01c      	beq.n	800aa68 <USBH_MSC_SCSI_ReadCapacity+0x50>
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800aa2e:	2001      	movs	r0, #1
 800aa30:	e025      	b.n	800aa7e <USBH_MSC_SCSI_ReadCapacity+0x66>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800aa32:	2308      	movs	r3, #8
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aa34:	2210      	movs	r2, #16
 800aa36:	2100      	movs	r1, #0
 800aa38:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800aa3c:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aa3e:	2380      	movs	r3, #128	; 0x80
 800aa40:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aa44:	230a      	movs	r3, #10
 800aa46:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aa4a:	f001 f96b 	bl	800bd24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800aa4e:	2325      	movs	r3, #37	; 0x25

      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa50:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800aa54:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aa58:	2302      	movs	r3, #2
 800aa5a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800aa5e:	f104 0310 	add.w	r3, r4, #16
 800aa62:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800aa66:	e7e2      	b.n	800aa2e <USBH_MSC_SCSI_ReadCapacity+0x16>
      error = USBH_BUSY;
      break;

    case BOT_CMD_WAIT:

      error = USBH_MSC_BOT_Process(phost, lun);
 800aa68:	f7ff fec2 	bl	800a7f0 <USBH_MSC_BOT_Process>

      if (error == USBH_OK)
 800aa6c:	b938      	cbnz	r0, 800aa7e <USBH_MSC_SCSI_ReadCapacity+0x66>
      {
        /*assign the capacity*/
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aa6e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800aa72:	6813      	ldr	r3, [r2, #0]
 800aa74:	ba1b      	rev	r3, r3
 800aa76:	6033      	str	r3, [r6, #0]
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);

        /*assign the page length*/
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800aa78:	88d3      	ldrh	r3, [r2, #6]
 800aa7a:	ba5b      	rev16	r3, r3
 800aa7c:	80b3      	strh	r3, [r6, #4]
    default:
      break;
  }

  return error;
}
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}

0800aa80 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa82:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
 800aa86:	460f      	mov	r7, r1
 800aa88:	4616      	mov	r6, r2
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa8a:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800aa8c:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800aa90:	2d01      	cmp	r5, #1
 800aa92:	d003      	beq.n	800aa9c <USBH_MSC_SCSI_Inquiry+0x1c>
 800aa94:	2d02      	cmp	r5, #2
 800aa96:	d025      	beq.n	800aae4 <USBH_MSC_SCSI_Inquiry+0x64>
  USBH_StatusTypeDef error = USBH_FAIL;
 800aa98:	2502      	movs	r5, #2
 800aa9a:	e021      	b.n	800aae0 <USBH_MSC_SCSI_Inquiry+0x60>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aa9c:	2380      	movs	r3, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800aa9e:	2224      	movs	r2, #36	; 0x24
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800aaa0:	2112      	movs	r1, #18
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800aaa2:	017f      	lsls	r7, r7, #5
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aaa4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aaa8:	230a      	movs	r3, #10
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800aaaa:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aaac:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800aab0:	2300      	movs	r3, #0
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800aab2:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800aab6:	f8c4 3069 	str.w	r3, [r4, #105]	; 0x69
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800aaba:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800aabe:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800aac2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

      MSC_Handle->hbot.state = BOT_SEND_CBW;

      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aac6:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800aac8:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aacc:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800aad0:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800aad4:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aad8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800aadc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    default:
      break;
  }

  return error;
}
 800aae0:	4628      	mov	r0, r5
 800aae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      error = USBH_MSC_BOT_Process(phost, lun);
 800aae4:	f7ff fe84 	bl	800a7f0 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 800aae8:	4605      	mov	r5, r0
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d1f8      	bne.n	800aae0 <USBH_MSC_SCSI_Inquiry+0x60>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800aaee:	4601      	mov	r1, r0
 800aaf0:	2222      	movs	r2, #34	; 0x22
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f001 f916 	bl	800bd24 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800aaf8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	f003 031f 	and.w	r3, r3, #31
 800ab02:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800ab04:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	095b      	lsrs	r3, r3, #5
 800ab0c:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800ab0e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ab12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ab16:	2b00      	cmp	r3, #0
          inquiry->RemovableMedia = 1U;
 800ab18:	bfb6      	itet	lt
 800ab1a:	2301      	movlt	r3, #1
          inquiry->RemovableMedia = 0U;
 800ab1c:	70b5      	strbge	r5, [r6, #2]
          inquiry->RemovableMedia = 1U;
 800ab1e:	70b3      	strblt	r3, [r6, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ab20:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800ab24:	f852 3f08 	ldr.w	r3, [r2, #8]!
 800ab28:	f8c6 3003 	str.w	r3, [r6, #3]
 800ab2c:	6853      	ldr	r3, [r2, #4]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800ab2e:	f106 020c 	add.w	r2, r6, #12
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ab32:	f8c6 3007 	str.w	r3, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800ab36:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ab3a:	3310      	adds	r3, #16
 800ab3c:	f103 0110 	add.w	r1, r3, #16
 800ab40:	f853 0b04 	ldr.w	r0, [r3], #4
 800ab44:	428b      	cmp	r3, r1
 800ab46:	f842 0b04 	str.w	r0, [r2], #4
 800ab4a:	d1f9      	bne.n	800ab40 <USBH_MSC_SCSI_Inquiry+0xc0>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800ab4c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	f8c6 301d 	str.w	r3, [r6, #29]
 800ab56:	e7c3      	b.n	800aae0 <USBH_MSC_SCSI_Inquiry+0x60>

0800ab58 <USBH_MSC_SCSI_RequestSense>:
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab58:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
 800ab5c:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab5e:	69dc      	ldr	r4, [r3, #28]
{
 800ab60:	460e      	mov	r6, r1
 800ab62:	4615      	mov	r5, r2

  switch (MSC_Handle->hbot.cmd_state)
 800ab64:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d003      	beq.n	800ab74 <USBH_MSC_SCSI_RequestSense+0x1c>
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d029      	beq.n	800abc4 <USBH_MSC_SCSI_RequestSense+0x6c>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ab70:	2002      	movs	r0, #2
 800ab72:	e026      	b.n	800abc2 <USBH_MSC_SCSI_RequestSense+0x6a>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ab74:	2280      	movs	r2, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ab76:	2003      	movs	r0, #3
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ab78:	210e      	movs	r1, #14
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ab7a:	0176      	lsls	r6, r6, #5
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ab7c:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ab80:	220a      	movs	r2, #10
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ab82:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;

      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
      error = USBH_BUSY;
 800ab86:	4618      	mov	r0, r3
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ab88:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ab8c:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ab8e:	65e1      	str	r1, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ab90:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
 800ab94:	f8c4 206d 	str.w	r2, [r4, #109]	; 0x6d
 800ab98:	f8a4 2071 	strh.w	r2, [r4, #113]	; 0x71
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ab9c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800aba0:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800aba4:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aba8:	2202      	movs	r2, #2
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800abaa:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800abae:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800abb2:	f104 0210 	add.w	r2, r4, #16
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800abb6:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800abba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800abbe:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    default:
      break;
  }

  return error;
}
 800abc2:	bd70      	pop	{r4, r5, r6, pc}
      error = USBH_MSC_BOT_Process(phost, lun);
 800abc4:	f7ff fe14 	bl	800a7f0 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 800abc8:	2800      	cmp	r0, #0
 800abca:	d1fa      	bne.n	800abc2 <USBH_MSC_SCSI_RequestSense+0x6a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800abcc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800abd0:	789b      	ldrb	r3, [r3, #2]
 800abd2:	f003 030f 	and.w	r3, r3, #15
 800abd6:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800abd8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800abdc:	7b1b      	ldrb	r3, [r3, #12]
 800abde:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800abe0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800abe4:	7b5b      	ldrb	r3, [r3, #13]
 800abe6:	70ab      	strb	r3, [r5, #2]
 800abe8:	e7eb      	b.n	800abc2 <USBH_MSC_SCSI_RequestSense+0x6a>

0800abea <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800abea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abee:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800abf0:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
 800abf4:	4616      	mov	r6, r2
 800abf6:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800abf8:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800abfa:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800abfe:	2d01      	cmp	r5, #1
 800ac00:	d003      	beq.n	800ac0a <USBH_MSC_SCSI_Write+0x20>
 800ac02:	2d02      	cmp	r5, #2
 800ac04:	d031      	beq.n	800ac6a <USBH_MSC_SCSI_Write+0x80>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ac06:	2002      	movs	r0, #2
 800ac08:	e02d      	b.n	800ac66 <USBH_MSC_SCSI_Write+0x7c>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ac0a:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ac0e:	230a      	movs	r3, #10
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ac10:	2100      	movs	r1, #0

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ac12:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ac16:	437a      	muls	r2, r7
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ac18:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ac1c:	65e2      	str	r2, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ac1e:	2210      	movs	r2, #16
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ac20:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ac24:	f001 f87e 	bl	800bd24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800ac28:	232a      	movs	r3, #42	; 0x2a


      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
      MSC_Handle->hbot.pbuf = pbuf;
      error = USBH_BUSY;
 800ac2a:	4628      	mov	r0, r5
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ac2c:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800ac30:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ac34:	f3c6 6307 	ubfx	r3, r6, #24, #8
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ac38:	f884 706b 	strb.w	r7, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ac3c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ac40:	f3c6 4307 	ubfx	r3, r6, #16, #8
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac44:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ac48:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ac4c:	f3c6 2307 	ubfx	r3, r6, #8, #8
      MSC_Handle->hbot.pbuf = pbuf;
 800ac50:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ac54:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ac58:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800ac5c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ac60:	2302      	movs	r3, #2
 800ac62:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    default:
      break;
  }

  return error;
}
 800ac66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 800ac6e:	f7ff bdbf 	b.w	800a7f0 <USBH_MSC_BOT_Process>

0800ac72 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800ac72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac76:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac78:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
 800ac7c:	4616      	mov	r6, r2
 800ac7e:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac80:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800ac82:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800ac86:	2d01      	cmp	r5, #1
 800ac88:	d003      	beq.n	800ac92 <USBH_MSC_SCSI_Read+0x20>
 800ac8a:	2d02      	cmp	r5, #2
 800ac8c:	d032      	beq.n	800acf4 <USBH_MSC_SCSI_Read+0x82>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ac8e:	2002      	movs	r0, #2
 800ac90:	e02e      	b.n	800acf0 <USBH_MSC_SCSI_Read+0x7e>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ac92:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ac96:	2380      	movs	r3, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ac98:	2100      	movs	r1, #0
 800ac9a:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ac9e:	437a      	muls	r2, r7
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aca0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aca4:	230a      	movs	r3, #10
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800aca6:	65e2      	str	r2, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aca8:	2210      	movs	r2, #16
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800acaa:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800acae:	f001 f839 	bl	800bd24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800acb2:	2328      	movs	r3, #40	; 0x28


      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
      MSC_Handle->hbot.pbuf = pbuf;
      error = USBH_BUSY;
 800acb4:	4628      	mov	r0, r5
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800acb6:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800acba:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800acbe:	f3c6 6307 	ubfx	r3, r6, #24, #8
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800acc2:	f884 706b 	strb.w	r7, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800acc6:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800acca:	f3c6 4307 	ubfx	r3, r6, #16, #8
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800acce:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800acd2:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800acd6:	f3c6 2307 	ubfx	r3, r6, #8, #8
      MSC_Handle->hbot.pbuf = pbuf;
 800acda:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800acde:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ace2:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800ace6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800acea:	2302      	movs	r3, #2
 800acec:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    default:
      break;
  }

  return error;
}
 800acf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 800acf8:	f7ff bd7a 	b.w	800a7f0 <USBH_MSC_BOT_Process>

0800acfc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800acfc:	f500 638e 	add.w	r3, r0, #1136	; 0x470
 800ad00:	f200 42ac 	addw	r2, r0, #1196	; 0x4ac
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 800ad04:	2100      	movs	r1, #0
 800ad06:	f843 1b04 	str.w	r1, [r3], #4
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d1fb      	bne.n	800ad06 <DeInitStateMachine+0xa>
 800ad0e:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 800ad12:	f200 411c 	addw	r1, r0, #1052	; 0x41c
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 800ad16:	2300      	movs	r3, #0
 800ad18:	f802 3b01 	strb.w	r3, [r2], #1
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ad1c:	4291      	cmp	r1, r2
 800ad1e:	d1fb      	bne.n	800ad18 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 800ad20:	2201      	movs	r2, #1
  phost->gState = HOST_IDLE;
 800ad22:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 800ad24:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 800ad26:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 800ad28:	f8c0 34b0 	str.w	r3, [r0, #1200]	; 0x4b0

  phost->Control.state = CTRL_SETUP;
 800ad2c:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ad2e:	2240      	movs	r2, #64	; 0x40
  phost->Control.errorcount = 0U;
 800ad30:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ad32:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ad36:	7182      	strb	r2, [r0, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ad38:	f8c0 341c 	str.w	r3, [r0, #1052]	; 0x41c
  phost->device.speed = USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  return USBH_OK;
}
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	4770      	bx	lr

0800ad40 <USBH_Init>:
{
 800ad40:	b570      	push	{r4, r5, r6, lr}
 800ad42:	460e      	mov	r6, r1
  if (phost == NULL)
 800ad44:	4604      	mov	r4, r0
 800ad46:	b950      	cbnz	r0, 800ad5e <USBH_Init+0x1e>
    USBH_ErrLog("Invalid Host handle");
 800ad48:	4811      	ldr	r0, [pc, #68]	; (800ad90 <USBH_Init+0x50>)
 800ad4a:	f001 f89b 	bl	800be84 <iprintf>
 800ad4e:	4811      	ldr	r0, [pc, #68]	; (800ad94 <USBH_Init+0x54>)
 800ad50:	f001 f898 	bl	800be84 <iprintf>
 800ad54:	200a      	movs	r0, #10
 800ad56:	f001 f8ad 	bl	800beb4 <putchar>
    return USBH_FAIL;
 800ad5a:	2002      	movs	r0, #2
}
 800ad5c:	bd70      	pop	{r4, r5, r6, pc}
  phost->pActiveClass = NULL;
 800ad5e:	2500      	movs	r5, #0
  phost->id = id;
 800ad60:	f880 24b8 	strb.w	r2, [r0, #1208]	; 0x4b8
  phost->pActiveClass = NULL;
 800ad64:	f8c0 5468 	str.w	r5, [r0, #1128]	; 0x468
  phost->ClassNumber = 0U;
 800ad68:	f8c0 546c 	str.w	r5, [r0, #1132]	; 0x46c
  DeInitStateMachine(phost);
 800ad6c:	f7ff ffc6 	bl	800acfc <DeInitStateMachine>
  phost->device.is_connected = 0U;
 800ad70:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
 800ad74:	f884 5423 	strb.w	r5, [r4, #1059]	; 0x423
  phost->device.is_disconnected = 0U;
 800ad78:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 800ad7c:	f884 5422 	strb.w	r5, [r4, #1058]	; 0x422
  if (pUsrFunc != NULL)
 800ad80:	b10e      	cbz	r6, 800ad86 <USBH_Init+0x46>
    phost->pUser = pUsrFunc;
 800ad82:	f8c4 64c0 	str.w	r6, [r4, #1216]	; 0x4c0
  USBH_LL_Init(phost);
 800ad86:	4620      	mov	r0, r4
 800ad88:	f7f6 f98a 	bl	80010a0 <USBH_LL_Init>
  return USBH_OK;
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	e7e5      	b.n	800ad5c <USBH_Init+0x1c>
 800ad90:	0801126c 	.word	0x0801126c
 800ad94:	08011677 	.word	0x08011677

0800ad98 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ad98:	b508      	push	{r3, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 800ad9a:	b1a1      	cbz	r1, 800adc6 <USBH_RegisterClass+0x2e>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ad9c:	f8d0 346c 	ldr.w	r3, [r0, #1132]	; 0x46c
 800ada0:	b933      	cbnz	r3, 800adb0 <USBH_RegisterClass+0x18>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ada2:	2201      	movs	r2, #1
 800ada4:	f8c0 1464 	str.w	r1, [r0, #1124]	; 0x464
 800ada8:	f8c0 246c 	str.w	r2, [r0, #1132]	; 0x46c
      status = USBH_OK;
 800adac:	4618      	mov	r0, r3
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 800adae:	bd08      	pop	{r3, pc}
      USBH_ErrLog("Max Class Number reached");
 800adb0:	4807      	ldr	r0, [pc, #28]	; (800add0 <USBH_RegisterClass+0x38>)
 800adb2:	f001 f867 	bl	800be84 <iprintf>
 800adb6:	4807      	ldr	r0, [pc, #28]	; (800add4 <USBH_RegisterClass+0x3c>)
    USBH_ErrLog("Invalid Class handle");
 800adb8:	f001 f864 	bl	800be84 <iprintf>
 800adbc:	200a      	movs	r0, #10
 800adbe:	f001 f879 	bl	800beb4 <putchar>
    status = USBH_FAIL;
 800adc2:	2002      	movs	r0, #2
 800adc4:	e7f3      	b.n	800adae <USBH_RegisterClass+0x16>
    USBH_ErrLog("Invalid Class handle");
 800adc6:	4802      	ldr	r0, [pc, #8]	; (800add0 <USBH_RegisterClass+0x38>)
 800adc8:	f001 f85c 	bl	800be84 <iprintf>
 800adcc:	4802      	ldr	r0, [pc, #8]	; (800add8 <USBH_RegisterClass+0x40>)
 800adce:	e7f3      	b.n	800adb8 <USBH_RegisterClass+0x20>
 800add0:	0801126c 	.word	0x0801126c
 800add4:	0801168b 	.word	0x0801168b
 800add8:	080116a4 	.word	0x080116a4

0800addc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800addc:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800adde:	f890 343c 	ldrb.w	r3, [r0, #1084]	; 0x43c
{
 800ade2:	4605      	mov	r5, r0
 800ade4:	460c      	mov	r4, r1
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ade6:	428b      	cmp	r3, r1
 800ade8:	d924      	bls.n	800ae34 <USBH_SelectInterface+0x58>
  {
    phost->device.current_interface = interface;
 800adea:	f885 1424 	strb.w	r1, [r5, #1060]	; 0x424
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800adee:	4817      	ldr	r0, [pc, #92]	; (800ae4c <USBH_SelectInterface+0x70>)
 800adf0:	f001 f848 	bl	800be84 <iprintf>
 800adf4:	200a      	movs	r0, #10
 800adf6:	f001 f85d 	bl	800beb4 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800adfa:	2322      	movs	r3, #34	; 0x22
 800adfc:	4814      	ldr	r0, [pc, #80]	; (800ae50 <USBH_SelectInterface+0x74>)
 800adfe:	fb03 5404 	mla	r4, r3, r4, r5
 800ae02:	f894 1447 	ldrb.w	r1, [r4, #1095]	; 0x447
 800ae06:	f001 f83d 	bl	800be84 <iprintf>
 800ae0a:	200a      	movs	r0, #10
 800ae0c:	f001 f852 	bl	800beb4 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800ae10:	f894 1448 	ldrb.w	r1, [r4, #1096]	; 0x448
 800ae14:	480f      	ldr	r0, [pc, #60]	; (800ae54 <USBH_SelectInterface+0x78>)
 800ae16:	f001 f835 	bl	800be84 <iprintf>
 800ae1a:	200a      	movs	r0, #10
 800ae1c:	f001 f84a 	bl	800beb4 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800ae20:	f894 1449 	ldrb.w	r1, [r4, #1097]	; 0x449
 800ae24:	480c      	ldr	r0, [pc, #48]	; (800ae58 <USBH_SelectInterface+0x7c>)
 800ae26:	f001 f82d 	bl	800be84 <iprintf>
 800ae2a:	200a      	movs	r0, #10
 800ae2c:	f001 f842 	bl	800beb4 <putchar>
  USBH_StatusTypeDef status = USBH_OK;
 800ae30:	2000      	movs	r0, #0
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
  }

  return status;
}
 800ae32:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ErrLog("Cannot Select This Interface.");
 800ae34:	4809      	ldr	r0, [pc, #36]	; (800ae5c <USBH_SelectInterface+0x80>)
 800ae36:	f001 f825 	bl	800be84 <iprintf>
 800ae3a:	4809      	ldr	r0, [pc, #36]	; (800ae60 <USBH_SelectInterface+0x84>)
 800ae3c:	f001 f822 	bl	800be84 <iprintf>
 800ae40:	200a      	movs	r0, #10
 800ae42:	f001 f837 	bl	800beb4 <putchar>
    status = USBH_FAIL;
 800ae46:	2002      	movs	r0, #2
 800ae48:	e7f3      	b.n	800ae32 <USBH_SelectInterface+0x56>
 800ae4a:	bf00      	nop
 800ae4c:	080116b9 	.word	0x080116b9
 800ae50:	080116d6 	.word	0x080116d6
 800ae54:	080116e5 	.word	0x080116e5
 800ae58:	080116f4 	.word	0x080116f4
 800ae5c:	0801126c 	.word	0x0801126c
 800ae60:	08011703 	.word	0x08011703

0800ae64 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ae64:	b510      	push	{r4, lr}
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ae66:	f890 4447 	ldrb.w	r4, [r0, #1095]	; 0x447
 800ae6a:	428c      	cmp	r4, r1
 800ae6c:	d001      	beq.n	800ae72 <USBH_FindInterface+0xe>
 800ae6e:	29ff      	cmp	r1, #255	; 0xff
 800ae70:	d10e      	bne.n	800ae90 <USBH_FindInterface+0x2c>
 800ae72:	f890 1448 	ldrb.w	r1, [r0, #1096]	; 0x448
 800ae76:	4291      	cmp	r1, r2
 800ae78:	d001      	beq.n	800ae7e <USBH_FindInterface+0x1a>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ae7a:	2aff      	cmp	r2, #255	; 0xff
 800ae7c:	d108      	bne.n	800ae90 <USBH_FindInterface+0x2c>
 800ae7e:	f890 2449 	ldrb.w	r2, [r0, #1097]	; 0x449
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d006      	beq.n	800ae94 <USBH_FindInterface+0x30>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ae86:	2bff      	cmp	r3, #255	; 0xff
 800ae88:	bf14      	ite	ne
 800ae8a:	20ff      	movne	r0, #255	; 0xff
 800ae8c:	2000      	moveq	r0, #0
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
}
 800ae8e:	bd10      	pop	{r4, pc}
  return 0xFFU;
 800ae90:	20ff      	movs	r0, #255	; 0xff
 800ae92:	e7fc      	b.n	800ae8e <USBH_FindInterface+0x2a>
      return  if_ix;
 800ae94:	2000      	movs	r0, #0
 800ae96:	e7fa      	b.n	800ae8e <USBH_FindInterface+0x2a>

0800ae98 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ae9c:	f7f6 f924 	bl	80010e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800aea0:	2101      	movs	r1, #1
 800aea2:	4620      	mov	r0, r4
 800aea4:	f7f6 f976 	bl	8001194 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 800aea8:	2000      	movs	r0, #0
 800aeaa:	bd10      	pop	{r4, pc}

0800aeac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800aeac:	b570      	push	{r4, r5, r6, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800aeae:	2302      	movs	r3, #2
{
 800aeb0:	b086      	sub	sp, #24
 800aeb2:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800aeb4:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800aeb8:	f890 3421 	ldrb.w	r3, [r0, #1057]	; 0x421
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d101      	bne.n	800aec4 <USBH_Process+0x18>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800aec0:	2303      	movs	r3, #3
 800aec2:	7003      	strb	r3, [r0, #0]
  }

  switch (phost->gState)
 800aec4:	7823      	ldrb	r3, [r4, #0]
 800aec6:	2b0b      	cmp	r3, #11
 800aec8:	d823      	bhi.n	800af12 <USBH_Process+0x66>
 800aeca:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aece:	000c      	.short	0x000c
 800aed0:	00530025 	.word	0x00530025
 800aed4:	0022027f 	.word	0x0022027f
 800aed8:	02560089 	.word	0x02560089
 800aedc:	01fe01f5 	.word	0x01fe01f5
 800aee0:	021f020c 	.word	0x021f020c
 800aee4:	0276      	.short	0x0276
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800aee6:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
 800aeea:	b193      	cbz	r3, 800af12 <USBH_Process+0x66>
      {
        USBH_UsrLog("USB Device Connected");
 800aeec:	48c4      	ldr	r0, [pc, #784]	; (800b200 <USBH_Process+0x354>)
 800aeee:	f000 ffc9 	bl	800be84 <iprintf>
 800aef2:	200a      	movs	r0, #10
 800aef4:	f000 ffde 	bl	800beb4 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aef8:	2301      	movs	r3, #1
        USBH_Delay(200U);
 800aefa:	20c8      	movs	r0, #200	; 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aefc:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
 800aefe:	f7f6 f979 	bl	80011f4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800af02:	4620      	mov	r0, r4
 800af04:	f7f6 f90c 	bl	8001120 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800af08:	2300      	movs	r3, #0
 800af0a:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
        phost->Timeout = 0U;
 800af0e:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 800af12:	2000      	movs	r0, #0
 800af14:	b006      	add	sp, #24
 800af16:	bd70      	pop	{r4, r5, r6, pc}
      if (phost->device.PortEnabled == 1U)
 800af18:	f894 3423 	ldrb.w	r3, [r4, #1059]	; 0x423
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d10b      	bne.n	800af38 <USBH_Process+0x8c>
        USBH_UsrLog("USB Device Reset Completed");
 800af20:	48b8      	ldr	r0, [pc, #736]	; (800b204 <USBH_Process+0x358>)
 800af22:	f000 ffaf 	bl	800be84 <iprintf>
 800af26:	200a      	movs	r0, #10
 800af28:	f000 ffc4 	bl	800beb4 <putchar>
        phost->device.RstCnt = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
        phost->gState = HOST_DEV_ATTACHED;
 800af32:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
 800af34:	7023      	strb	r3, [r4, #0]
 800af36:	e7ec      	b.n	800af12 <USBH_Process+0x66>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800af38:	f8d4 34b4 	ldr.w	r3, [r4, #1204]	; 0x4b4
 800af3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af40:	d911      	bls.n	800af66 <USBH_Process+0xba>
          phost->device.RstCnt++;
 800af42:	f894 341f 	ldrb.w	r3, [r4, #1055]	; 0x41f
 800af46:	3301      	adds	r3, #1
 800af48:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 800af4a:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 800af4c:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
          if (phost->device.RstCnt > 3U)
 800af50:	d907      	bls.n	800af62 <USBH_Process+0xb6>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800af52:	48ad      	ldr	r0, [pc, #692]	; (800b208 <USBH_Process+0x35c>)
 800af54:	f000 ff96 	bl	800be84 <iprintf>
 800af58:	200a      	movs	r0, #10
 800af5a:	f000 ffab 	bl	800beb4 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800af5e:	230d      	movs	r3, #13
 800af60:	e7e8      	b.n	800af34 <USBH_Process+0x88>
            phost->gState = HOST_IDLE;
 800af62:	2300      	movs	r3, #0
 800af64:	e7e6      	b.n	800af34 <USBH_Process+0x88>
          phost->Timeout += 10U;
 800af66:	330a      	adds	r3, #10
          USBH_Delay(10U);
 800af68:	200a      	movs	r0, #10
          phost->Timeout += 10U;
 800af6a:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
          USBH_Delay(10U);
 800af6e:	f7f6 f941 	bl	80011f4 <USBH_Delay>
 800af72:	e7ce      	b.n	800af12 <USBH_Process+0x66>
      if (phost->pUser != NULL)
 800af74:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
 800af78:	b113      	cbz	r3, 800af80 <USBH_Process+0xd4>
        phost->pUser(phost, HOST_USER_CONNECTION);
 800af7a:	2104      	movs	r1, #4
 800af7c:	4620      	mov	r0, r4
 800af7e:	4798      	blx	r3
      USBH_Delay(100U);
 800af80:	2064      	movs	r0, #100	; 0x64
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800af82:	2500      	movs	r5, #0
      USBH_Delay(100U);
 800af84:	f7f6 f936 	bl	80011f4 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 800af88:	4620      	mov	r0, r4
 800af8a:	f7f6 f8bb 	bl	8001104 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 800af8e:	2305      	movs	r3, #5
      phost->device.speed = USBH_LL_GetSpeed(phost);
 800af90:	f884 041d 	strb.w	r0, [r4, #1053]	; 0x41d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800af94:	2100      	movs	r1, #0
      phost->gState = HOST_ENUMERATION;
 800af96:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800af98:	4620      	mov	r0, r4
 800af9a:	f000 fd16 	bl	800b9ca <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800af9e:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800afa0:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800afa2:	4620      	mov	r0, r4
 800afa4:	f000 fd11 	bl	800b9ca <USBH_AllocPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800afa8:	79a2      	ldrb	r2, [r4, #6]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800afaa:	4601      	mov	r1, r0
 800afac:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800afae:	9202      	str	r2, [sp, #8]
 800afb0:	4620      	mov	r0, r4
 800afb2:	f894 241d 	ldrb.w	r2, [r4, #1053]	; 0x41d
 800afb6:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 800afba:	9200      	str	r2, [sp, #0]
 800afbc:	2280      	movs	r2, #128	; 0x80
 800afbe:	9501      	str	r5, [sp, #4]
 800afc0:	f000 fcef 	bl	800b9a2 <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800afc4:	79a2      	ldrb	r2, [r4, #6]
 800afc6:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 800afca:	4620      	mov	r0, r4
 800afcc:	7961      	ldrb	r1, [r4, #5]
 800afce:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800afd2:	f894 241d 	ldrb.w	r2, [r4, #1053]	; 0x41d
 800afd6:	9200      	str	r2, [sp, #0]
 800afd8:	462a      	mov	r2, r5
 800afda:	f000 fce2 	bl	800b9a2 <USBH_OpenPipe>
      break;
 800afde:	e798      	b.n	800af12 <USBH_Process+0x66>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 800afe0:	7863      	ldrb	r3, [r4, #1]
 800afe2:	2b07      	cmp	r3, #7
 800afe4:	d84e      	bhi.n	800b084 <USBH_Process+0x1d8>
 800afe6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800afea:	0008      	.short	0x0008
 800afec:	00a90073 	.word	0x00a90073
 800aff0:	00df00d8 	.word	0x00df00d8
 800aff4:	012b00ef 	.word	0x012b00ef
 800aff8:	0146      	.short	0x0146
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800affa:	2108      	movs	r1, #8
 800affc:	4620      	mov	r0, r4
 800affe:	f000 fb52 	bl	800b6a6 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800b002:	4606      	mov	r6, r0
 800b004:	2800      	cmp	r0, #0
 800b006:	d13b      	bne.n	800b080 <USBH_Process+0x1d4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b008:	f894 242d 	ldrb.w	r2, [r4, #1069]	; 0x42d

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b00c:	2501      	movs	r5, #1

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b00e:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 800b012:	7921      	ldrb	r1, [r4, #4]
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b014:	71a2      	strb	r2, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b016:	7065      	strb	r5, [r4, #1]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b018:	4620      	mov	r0, r4
 800b01a:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800b01e:	f894 241d 	ldrb.w	r2, [r4, #1053]	; 0x41d
 800b022:	9200      	str	r2, [sp, #0]
 800b024:	2280      	movs	r2, #128	; 0x80
 800b026:	f000 fcbc 	bl	800b9a2 <USBH_OpenPipe>
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b02a:	79a2      	ldrb	r2, [r4, #6]
 800b02c:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 800b030:	4620      	mov	r0, r4
 800b032:	7961      	ldrb	r1, [r4, #5]
 800b034:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800b038:	f894 241d 	ldrb.w	r2, [r4, #1053]	; 0x41d
 800b03c:	9200      	str	r2, [sp, #0]
 800b03e:	4632      	mov	r2, r6
 800b040:	f000 fcaf 	bl	800b9a2 <USBH_OpenPipe>
      status = USBH_HandleEnum(phost);
 800b044:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
 800b048:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b04c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800b050:	2b00      	cmp	r3, #0
 800b052:	f47f af5e 	bne.w	800af12 <USBH_Process+0x66>
        USBH_UsrLog("Enumeration done.");
 800b056:	486d      	ldr	r0, [pc, #436]	; (800b20c <USBH_Process+0x360>)
 800b058:	f000 ff14 	bl	800be84 <iprintf>
 800b05c:	200a      	movs	r0, #10
 800b05e:	f000 ff29 	bl	800beb4 <putchar>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b062:	f894 3437 	ldrb.w	r3, [r4, #1079]	; 0x437
        phost->device.current_interface = 0U;
 800b066:	f884 5424 	strb.w	r5, [r4, #1060]	; 0x424
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	f040 8122 	bne.w	800b2b4 <USBH_Process+0x408>
          USBH_UsrLog("This device has only 1 configuration.");
 800b070:	4867      	ldr	r0, [pc, #412]	; (800b210 <USBH_Process+0x364>)
 800b072:	f000 ff07 	bl	800be84 <iprintf>
 800b076:	200a      	movs	r0, #10
 800b078:	f000 ff1c 	bl	800beb4 <putchar>
        phost->gState = HOST_SET_CONFIGURATION;
 800b07c:	2308      	movs	r3, #8
 800b07e:	e759      	b.n	800af34 <USBH_Process+0x88>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b080:	2803      	cmp	r0, #3
 800b082:	d001      	beq.n	800b088 <USBH_Process+0x1dc>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b084:	2501      	movs	r5, #1
 800b086:	e7dd      	b.n	800b044 <USBH_Process+0x198>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800b088:	4862      	ldr	r0, [pc, #392]	; (800b214 <USBH_Process+0x368>)
 800b08a:	f000 fefb 	bl	800be84 <iprintf>
 800b08e:	4862      	ldr	r0, [pc, #392]	; (800b218 <USBH_Process+0x36c>)
 800b090:	f000 fef8 	bl	800be84 <iprintf>
 800b094:	200a      	movs	r0, #10
 800b096:	f000 ff0d 	bl	800beb4 <putchar>
        phost->device.EnumCnt++;
 800b09a:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800b09e:	3301      	adds	r3, #1
 800b0a0:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800b0a2:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800b0a4:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 800b0a8:	d907      	bls.n	800b0ba <USBH_Process+0x20e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b0aa:	485c      	ldr	r0, [pc, #368]	; (800b21c <USBH_Process+0x370>)
 800b0ac:	f000 feea 	bl	800be84 <iprintf>
 800b0b0:	200a      	movs	r0, #10
 800b0b2:	f000 feff 	bl	800beb4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b0b6:	230d      	movs	r3, #13
 800b0b8:	e008      	b.n	800b0cc <USBH_Process+0x220>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0ba:	7961      	ldrb	r1, [r4, #5]
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f000 fc9c 	bl	800b9fa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0c2:	7921      	ldrb	r1, [r4, #4]
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f000 fc98 	bl	800b9fa <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b0ca:	2300      	movs	r3, #0
          USBH_FreePipe(phost, phost->Control.pipe_out);
          USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
 800b0cc:	7023      	strb	r3, [r4, #0]
 800b0ce:	e7d9      	b.n	800b084 <USBH_Process+0x1d8>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b0d0:	2112      	movs	r1, #18
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 fae7 	bl	800b6a6 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800b0d8:	b990      	cbnz	r0, 800b100 <USBH_Process+0x254>
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800b0da:	f8b4 1430 	ldrh.w	r1, [r4, #1072]	; 0x430
 800b0de:	4850      	ldr	r0, [pc, #320]	; (800b220 <USBH_Process+0x374>)
 800b0e0:	f000 fed0 	bl	800be84 <iprintf>
 800b0e4:	200a      	movs	r0, #10
 800b0e6:	f000 fee5 	bl	800beb4 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800b0ea:	f8b4 142e 	ldrh.w	r1, [r4, #1070]	; 0x42e
 800b0ee:	484d      	ldr	r0, [pc, #308]	; (800b224 <USBH_Process+0x378>)
 800b0f0:	f000 fec8 	bl	800be84 <iprintf>
 800b0f4:	200a      	movs	r0, #10
 800b0f6:	f000 fedd 	bl	800beb4 <putchar>
        phost->EnumState = ENUM_SET_ADDR;
 800b0fa:	2302      	movs	r3, #2
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b0fc:	7063      	strb	r3, [r4, #1]
 800b0fe:	e7c1      	b.n	800b084 <USBH_Process+0x1d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b100:	2803      	cmp	r0, #3
 800b102:	d1bf      	bne.n	800b084 <USBH_Process+0x1d8>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800b104:	4843      	ldr	r0, [pc, #268]	; (800b214 <USBH_Process+0x368>)
 800b106:	f000 febd 	bl	800be84 <iprintf>
 800b10a:	4847      	ldr	r0, [pc, #284]	; (800b228 <USBH_Process+0x37c>)
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800b10c:	f000 feba 	bl	800be84 <iprintf>
 800b110:	200a      	movs	r0, #10
 800b112:	f000 fecf 	bl	800beb4 <putchar>
        phost->device.EnumCnt++;
 800b116:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800b11a:	3301      	adds	r3, #1
 800b11c:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800b11e:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800b120:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 800b124:	d8c1      	bhi.n	800b0aa <USBH_Process+0x1fe>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b126:	7961      	ldrb	r1, [r4, #5]
 800b128:	4620      	mov	r0, r4
 800b12a:	f000 fc66 	bl	800b9fa <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b12e:	7921      	ldrb	r1, [r4, #4]
 800b130:	4620      	mov	r0, r4
 800b132:	f000 fc62 	bl	800b9fa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b136:	2300      	movs	r3, #0
 800b138:	7063      	strb	r3, [r4, #1]
 800b13a:	e7c7      	b.n	800b0cc <USBH_Process+0x220>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b13c:	2101      	movs	r1, #1
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 fb9c 	bl	800b87c <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 800b144:	4606      	mov	r6, r0
 800b146:	b998      	cbnz	r0, 800b170 <USBH_Process+0x2c4>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b148:	2501      	movs	r5, #1
        USBH_Delay(2U);
 800b14a:	2002      	movs	r0, #2
 800b14c:	f7f6 f852 	bl	80011f4 <USBH_Delay>
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800b150:	4836      	ldr	r0, [pc, #216]	; (800b22c <USBH_Process+0x380>)
 800b152:	4629      	mov	r1, r5
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b154:	f884 541c 	strb.w	r5, [r4, #1052]	; 0x41c
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800b158:	f000 fe94 	bl	800be84 <iprintf>
 800b15c:	200a      	movs	r0, #10
 800b15e:	f000 fea9 	bl	800beb4 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b162:	2303      	movs	r3, #3
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b164:	7921      	ldrb	r1, [r4, #4]
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b166:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b168:	79a2      	ldrb	r2, [r4, #6]
 800b16a:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 800b16e:	e753      	b.n	800b018 <USBH_Process+0x16c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b170:	2803      	cmp	r0, #3
 800b172:	d187      	bne.n	800b084 <USBH_Process+0x1d8>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800b174:	4827      	ldr	r0, [pc, #156]	; (800b214 <USBH_Process+0x368>)
 800b176:	f000 fe85 	bl	800be84 <iprintf>
 800b17a:	482d      	ldr	r0, [pc, #180]	; (800b230 <USBH_Process+0x384>)
 800b17c:	f000 fe82 	bl	800be84 <iprintf>
 800b180:	200a      	movs	r0, #10
 800b182:	f000 fe97 	bl	800beb4 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b186:	4825      	ldr	r0, [pc, #148]	; (800b21c <USBH_Process+0x370>)
 800b188:	f000 fe7c 	bl	800be84 <iprintf>
 800b18c:	200a      	movs	r0, #10
 800b18e:	f000 fe91 	bl	800beb4 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800b192:	230d      	movs	r3, #13
 800b194:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 800b196:	2300      	movs	r3, #0
 800b198:	e7b0      	b.n	800b0fc <USBH_Process+0x250>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b19a:	2109      	movs	r1, #9
 800b19c:	4620      	mov	r0, r4
 800b19e:	f000 faca 	bl	800b736 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800b1a2:	b948      	cbnz	r0, 800b1b8 <USBH_Process+0x30c>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b1a4:	2304      	movs	r3, #4
 800b1a6:	e7a9      	b.n	800b0fc <USBH_Process+0x250>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b1a8:	f8b4 143a 	ldrh.w	r1, [r4, #1082]	; 0x43a
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f000 fac2 	bl	800b736 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800b1b2:	b908      	cbnz	r0, 800b1b8 <USBH_Process+0x30c>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b1b4:	2305      	movs	r3, #5
 800b1b6:	e7a1      	b.n	800b0fc <USBH_Process+0x250>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1b8:	2803      	cmp	r0, #3
 800b1ba:	f47f af63 	bne.w	800b084 <USBH_Process+0x1d8>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800b1be:	4815      	ldr	r0, [pc, #84]	; (800b214 <USBH_Process+0x368>)
 800b1c0:	f000 fe60 	bl	800be84 <iprintf>
 800b1c4:	481b      	ldr	r0, [pc, #108]	; (800b234 <USBH_Process+0x388>)
 800b1c6:	e7a1      	b.n	800b10c <USBH_Process+0x260>
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b1c8:	f894 1434 	ldrb.w	r1, [r4, #1076]	; 0x434
 800b1cc:	b199      	cbz	r1, 800b1f6 <USBH_Process+0x34a>
                                        phost->device.Data, 0xFFU);
 800b1ce:	f504 7507 	add.w	r5, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b1d2:	23ff      	movs	r3, #255	; 0xff
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	462a      	mov	r2, r5
 800b1d8:	f000 fb29 	bl	800b82e <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800b1dc:	b940      	cbnz	r0, 800b1f0 <USBH_Process+0x344>
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800b1de:	4629      	mov	r1, r5
 800b1e0:	4815      	ldr	r0, [pc, #84]	; (800b238 <USBH_Process+0x38c>)
 800b1e2:	f000 fe4f 	bl	800be84 <iprintf>
 800b1e6:	200a      	movs	r0, #10
 800b1e8:	f000 fe64 	bl	800beb4 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b1ec:	2306      	movs	r3, #6
 800b1ee:	e785      	b.n	800b0fc <USBH_Process+0x250>
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1f0:	2803      	cmp	r0, #3
 800b1f2:	f47f af47 	bne.w	800b084 <USBH_Process+0x1d8>
        {
          USBH_UsrLog("Manufacturer : N/A");
 800b1f6:	4811      	ldr	r0, [pc, #68]	; (800b23c <USBH_Process+0x390>)
 800b1f8:	f000 fe44 	bl	800be84 <iprintf>
 800b1fc:	e7f3      	b.n	800b1e6 <USBH_Process+0x33a>
 800b1fe:	bf00      	nop
 800b200:	08011721 	.word	0x08011721
 800b204:	08011736 	.word	0x08011736
 800b208:	08011751 	.word	0x08011751
 800b20c:	08011920 	.word	0x08011920
 800b210:	08011932 	.word	0x08011932
 800b214:	0801126c 	.word	0x0801126c
 800b218:	0801177d 	.word	0x0801177d
 800b21c:	080117b1 	.word	0x080117b1
 800b220:	080117f0 	.word	0x080117f0
 800b224:	080117f9 	.word	0x080117f9
 800b228:	08011802 	.word	0x08011802
 800b22c:	0801183b 	.word	0x0801183b
 800b230:	08011853 	.word	0x08011853
 800b234:	08011884 	.word	0x08011884
 800b238:	080118c6 	.word	0x080118c6
 800b23c:	080118d8 	.word	0x080118d8
#endif
      }
      break;

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b240:	f894 1435 	ldrb.w	r1, [r4, #1077]	; 0x435
 800b244:	b199      	cbz	r1, 800b26e <USBH_Process+0x3c2>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
                                        phost->device.Data, 0xFFU);
 800b246:	f504 7507 	add.w	r5, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b24a:	23ff      	movs	r3, #255	; 0xff
 800b24c:	4620      	mov	r0, r4
 800b24e:	462a      	mov	r2, r5
 800b250:	f000 faed 	bl	800b82e <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800b254:	b940      	cbnz	r0, 800b268 <USBH_Process+0x3bc>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800b256:	4629      	mov	r1, r5
 800b258:	4871      	ldr	r0, [pc, #452]	; (800b420 <USBH_Process+0x574>)
 800b25a:	f000 fe13 	bl	800be84 <iprintf>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
        {
          USBH_UsrLog("Product : N/A");
 800b25e:	200a      	movs	r0, #10
 800b260:	f000 fe28 	bl	800beb4 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b264:	2307      	movs	r3, #7
 800b266:	e749      	b.n	800b0fc <USBH_Process+0x250>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b268:	2803      	cmp	r0, #3
 800b26a:	f47f af0b 	bne.w	800b084 <USBH_Process+0x1d8>
          USBH_UsrLog("Product : N/A");
 800b26e:	486d      	ldr	r0, [pc, #436]	; (800b424 <USBH_Process+0x578>)
 800b270:	f000 fe08 	bl	800be84 <iprintf>
 800b274:	e7f3      	b.n	800b25e <USBH_Process+0x3b2>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b276:	f894 1436 	ldrb.w	r1, [r4, #1078]	; 0x436
 800b27a:	b199      	cbz	r1, 800b2a4 <USBH_Process+0x3f8>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
                                        phost->device.Data, 0xFFU);
 800b27c:	f504 7607 	add.w	r6, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b280:	23ff      	movs	r3, #255	; 0xff
 800b282:	4620      	mov	r0, r4
 800b284:	4632      	mov	r2, r6
 800b286:	f000 fad2 	bl	800b82e <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800b28a:	4605      	mov	r5, r0
 800b28c:	b938      	cbnz	r0, 800b29e <USBH_Process+0x3f2>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800b28e:	4631      	mov	r1, r6
 800b290:	4865      	ldr	r0, [pc, #404]	; (800b428 <USBH_Process+0x57c>)
 800b292:	f000 fdf7 	bl	800be84 <iprintf>
 800b296:	200a      	movs	r0, #10
 800b298:	f000 fe0c 	bl	800beb4 <putchar>
 800b29c:	e6d2      	b.n	800b044 <USBH_Process+0x198>
          Status = USBH_OK;
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b29e:	2803      	cmp	r0, #3
 800b2a0:	f47f aef0 	bne.w	800b084 <USBH_Process+0x1d8>
        {
          USBH_UsrLog("Serial Number : N/A");
 800b2a4:	4861      	ldr	r0, [pc, #388]	; (800b42c <USBH_Process+0x580>)
          Status = USBH_OK;
 800b2a6:	2500      	movs	r5, #0
          USBH_UsrLog("Serial Number : N/A");
 800b2a8:	f000 fdec 	bl	800be84 <iprintf>
 800b2ac:	200a      	movs	r0, #10
 800b2ae:	f000 fe01 	bl	800beb4 <putchar>
 800b2b2:	e6c7      	b.n	800b044 <USBH_Process+0x198>
          phost->gState = HOST_INPUT;
 800b2b4:	2307      	movs	r3, #7
 800b2b6:	e63d      	b.n	800af34 <USBH_Process+0x88>
      if (phost->pUser != NULL)
 800b2b8:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f43f ae28 	beq.w	800af12 <USBH_Process+0x66>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b2c2:	2101      	movs	r1, #1
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	4798      	blx	r3
 800b2c8:	e6d8      	b.n	800b07c <USBH_Process+0x1d0>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b2ca:	f894 143d 	ldrb.w	r1, [r4, #1085]	; 0x43d
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f000 fae1 	bl	800b896 <USBH_SetCfg>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	f47f ae1c 	bne.w	800af12 <USBH_Process+0x66>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b2da:	2309      	movs	r3, #9
        USBH_UsrLog("Default configuration set.");
 800b2dc:	4854      	ldr	r0, [pc, #336]	; (800b430 <USBH_Process+0x584>)
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b2de:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800b2e0:	f000 fdd0 	bl	800be84 <iprintf>
 800b2e4:	e041      	b.n	800b36a <USBH_Process+0x4be>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b2e6:	f894 343f 	ldrb.w	r3, [r4, #1087]	; 0x43f
 800b2ea:	069b      	lsls	r3, r3, #26
 800b2ec:	d50c      	bpl.n	800b308 <USBH_Process+0x45c>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f000 fadd 	bl	800b8b0 <USBH_SetFeature>
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	f47f ae0b 	bne.w	800af12 <USBH_Process+0x66>
          USBH_UsrLog("Device remote wakeup enabled");
 800b2fc:	484d      	ldr	r0, [pc, #308]	; (800b434 <USBH_Process+0x588>)
 800b2fe:	f000 fdc1 	bl	800be84 <iprintf>
 800b302:	200a      	movs	r0, #10
 800b304:	f000 fdd6 	bl	800beb4 <putchar>
        phost->gState = HOST_CHECK_CLASS;
 800b308:	230a      	movs	r3, #10
 800b30a:	e613      	b.n	800af34 <USBH_Process+0x88>
      if (phost->ClassNumber == 0U)
 800b30c:	f8d4 346c 	ldr.w	r3, [r4, #1132]	; 0x46c
 800b310:	b90b      	cbnz	r3, 800b316 <USBH_Process+0x46a>
        USBH_UsrLog("No Class has been registered.");
 800b312:	4849      	ldr	r0, [pc, #292]	; (800b438 <USBH_Process+0x58c>)
 800b314:	e7e4      	b.n	800b2e0 <USBH_Process+0x434>
        phost->pActiveClass = NULL;
 800b316:	2300      	movs	r3, #0
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b318:	f894 2447 	ldrb.w	r2, [r4, #1095]	; 0x447
        phost->pActiveClass = NULL;
 800b31c:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b320:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
 800b324:	7919      	ldrb	r1, [r3, #4]
 800b326:	4291      	cmp	r1, r2
            phost->pActiveClass = phost->pClass[idx];
 800b328:	bf08      	it	eq
 800b32a:	f8c4 3468 	streq.w	r3, [r4, #1128]	; 0x468
        if (phost->pActiveClass != NULL)
 800b32e:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
 800b332:	b1f3      	cbz	r3, 800b372 <USBH_Process+0x4c6>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	4620      	mov	r0, r4
 800b338:	4798      	blx	r3
 800b33a:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
 800b33e:	b970      	cbnz	r0, 800b35e <USBH_Process+0x4b2>
            phost->gState = HOST_CLASS_REQUEST;
 800b340:	2206      	movs	r2, #6
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800b342:	6819      	ldr	r1, [r3, #0]
 800b344:	483d      	ldr	r0, [pc, #244]	; (800b43c <USBH_Process+0x590>)
            phost->gState = HOST_CLASS_REQUEST;
 800b346:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800b348:	f000 fd9c 	bl	800be84 <iprintf>
 800b34c:	200a      	movs	r0, #10
 800b34e:	f000 fdb1 	bl	800beb4 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b352:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
 800b356:	2103      	movs	r1, #3
 800b358:	4620      	mov	r0, r4
 800b35a:	4798      	blx	r3
 800b35c:	e5d9      	b.n	800af12 <USBH_Process+0x66>
            phost->gState = HOST_ABORT_STATE;
 800b35e:	220d      	movs	r2, #13
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800b360:	6819      	ldr	r1, [r3, #0]
 800b362:	4837      	ldr	r0, [pc, #220]	; (800b440 <USBH_Process+0x594>)
            phost->gState = HOST_ABORT_STATE;
 800b364:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800b366:	f000 fd8d 	bl	800be84 <iprintf>
        USBH_ErrLog("Invalid Class Driver.");
 800b36a:	200a      	movs	r0, #10
 800b36c:	f000 fda2 	bl	800beb4 <putchar>
 800b370:	e5cf      	b.n	800af12 <USBH_Process+0x66>
          phost->gState = HOST_ABORT_STATE;
 800b372:	230d      	movs	r3, #13
          USBH_UsrLog("No registered class for this device.");
 800b374:	4833      	ldr	r0, [pc, #204]	; (800b444 <USBH_Process+0x598>)
          phost->gState = HOST_ABORT_STATE;
 800b376:	7023      	strb	r3, [r4, #0]
 800b378:	e7b2      	b.n	800b2e0 <USBH_Process+0x434>
      if (phost->pActiveClass != NULL)
 800b37a:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
 800b37e:	b1ab      	cbz	r3, 800b3ac <USBH_Process+0x500>
        status = phost->pActiveClass->Requests(phost);
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	4620      	mov	r0, r4
 800b384:	4798      	blx	r3
 800b386:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800b38a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b38e:	b90b      	cbnz	r3, 800b394 <USBH_Process+0x4e8>
          phost->gState = HOST_CLASS;
 800b390:	230b      	movs	r3, #11
 800b392:	e5cf      	b.n	800af34 <USBH_Process+0x88>
        else if (status == USBH_FAIL)
 800b394:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b398:	2b02      	cmp	r3, #2
 800b39a:	f47f adba 	bne.w	800af12 <USBH_Process+0x66>
          phost->gState = HOST_ABORT_STATE;
 800b39e:	230d      	movs	r3, #13
          USBH_ErrLog("Device not responding Please Unplug.");
 800b3a0:	4829      	ldr	r0, [pc, #164]	; (800b448 <USBH_Process+0x59c>)
          phost->gState = HOST_ABORT_STATE;
 800b3a2:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800b3a4:	f000 fd6e 	bl	800be84 <iprintf>
 800b3a8:	4828      	ldr	r0, [pc, #160]	; (800b44c <USBH_Process+0x5a0>)
 800b3aa:	e799      	b.n	800b2e0 <USBH_Process+0x434>
        phost->gState = HOST_ABORT_STATE;
 800b3ac:	230d      	movs	r3, #13
        USBH_ErrLog("Invalid Class Driver.");
 800b3ae:	4826      	ldr	r0, [pc, #152]	; (800b448 <USBH_Process+0x59c>)
        phost->gState = HOST_ABORT_STATE;
 800b3b0:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800b3b2:	f000 fd67 	bl	800be84 <iprintf>
 800b3b6:	4826      	ldr	r0, [pc, #152]	; (800b450 <USBH_Process+0x5a4>)
 800b3b8:	e792      	b.n	800b2e0 <USBH_Process+0x434>
      if (phost->pActiveClass != NULL)
 800b3ba:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f43f ada7 	beq.w	800af12 <USBH_Process+0x66>
        phost->pActiveClass->BgndProcess(phost);
 800b3c4:	695b      	ldr	r3, [r3, #20]
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	4798      	blx	r3
 800b3ca:	e5a2      	b.n	800af12 <USBH_Process+0x66>
      phost->device.is_disconnected = 0U;
 800b3cc:	2500      	movs	r5, #0
      DeInitStateMachine(phost);
 800b3ce:	4620      	mov	r0, r4
      phost->device.is_disconnected = 0U;
 800b3d0:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
      DeInitStateMachine(phost);
 800b3d4:	f7ff fc92 	bl	800acfc <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 800b3d8:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
 800b3dc:	b123      	cbz	r3, 800b3e8 <USBH_Process+0x53c>
        phost->pActiveClass->DeInit(phost);
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b3e4:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
      if (phost->pUser != NULL)
 800b3e8:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
 800b3ec:	b113      	cbz	r3, 800b3f4 <USBH_Process+0x548>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b3ee:	2105      	movs	r1, #5
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	4798      	blx	r3
      USBH_UsrLog("USB Device disconnected");
 800b3f4:	4817      	ldr	r0, [pc, #92]	; (800b454 <USBH_Process+0x5a8>)
 800b3f6:	f000 fd45 	bl	800be84 <iprintf>
 800b3fa:	200a      	movs	r0, #10
 800b3fc:	f000 fd5a 	bl	800beb4 <putchar>
      if (phost->device.is_ReEnumerated == 1U)
 800b400:	f894 3422 	ldrb.w	r3, [r4, #1058]	; 0x422
 800b404:	2b01      	cmp	r3, #1
 800b406:	d106      	bne.n	800b416 <USBH_Process+0x56a>
        phost->device.is_ReEnumerated = 0U;
 800b408:	2300      	movs	r3, #0
        USBH_Start(phost);
 800b40a:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
 800b40c:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
        USBH_Start(phost);
 800b410:	f7ff fd42 	bl	800ae98 <USBH_Start>
 800b414:	e57d      	b.n	800af12 <USBH_Process+0x66>
        USBH_LL_Start(phost);
 800b416:	4620      	mov	r0, r4
 800b418:	f7f5 fe66 	bl	80010e8 <USBH_LL_Start>
 800b41c:	e579      	b.n	800af12 <USBH_Process+0x66>
 800b41e:	bf00      	nop
 800b420:	0801157a 	.word	0x0801157a
 800b424:	080118eb 	.word	0x080118eb
 800b428:	080118f9 	.word	0x080118f9
 800b42c:	0801190c 	.word	0x0801190c
 800b430:	08011958 	.word	0x08011958
 800b434:	08011973 	.word	0x08011973
 800b438:	08011990 	.word	0x08011990
 800b43c:	080119ae 	.word	0x080119ae
 800b440:	080119c0 	.word	0x080119c0
 800b444:	080119e0 	.word	0x080119e0
 800b448:	0801126c 	.word	0x0801126c
 800b44c:	08011a05 	.word	0x08011a05
 800b450:	08011a2a 	.word	0x08011a2a
 800b454:	08011a40 	.word	0x08011a40

0800b458 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 800b458:	f8c0 14b0 	str.w	r1, [r0, #1200]	; 0x4b0
}
 800b45c:	4770      	bx	lr

0800b45e <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 800b45e:	f8d0 24b0 	ldr.w	r2, [r0, #1200]	; 0x4b0
 800b462:	3201      	adds	r2, #1
 800b464:	f8c0 24b0 	str.w	r2, [r0, #1200]	; 0x4b0
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b468:	7802      	ldrb	r2, [r0, #0]
 800b46a:	2a0b      	cmp	r2, #11
 800b46c:	d104      	bne.n	800b478 <USBH_LL_IncTimer+0x1a>
 800b46e:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
 800b472:	b10b      	cbz	r3, 800b478 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	4718      	bx	r3
}
 800b478:	4770      	bx	lr

0800b47a <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 800b47a:	2301      	movs	r3, #1
 800b47c:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 800b480:	4770      	bx	lr

0800b482 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 800b482:	2300      	movs	r3, #0
 800b484:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
 800b488:	4770      	bx	lr

0800b48a <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
 800b48a:	2301      	movs	r3, #1
 800b48c:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 800b490:	2300      	movs	r3, #0
 800b492:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 800b496:	f880 3422 	strb.w	r3, [r0, #1058]	; 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	4770      	bx	lr

0800b49e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b49e:	b538      	push	{r3, r4, r5, lr}
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b4a0:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 800b4a2:	2500      	movs	r5, #0
{
 800b4a4:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 800b4a6:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
 800b4aa:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
 800b4ae:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b4b2:	f7f5 fe20 	bl	80010f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4b6:	7921      	ldrb	r1, [r4, #4]
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f000 fa9e 	bl	800b9fa <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4be:	7961      	ldrb	r1, [r4, #5]
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f000 fa9a 	bl	800b9fa <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b4cc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b4cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4ce:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 800b4d0:	7880      	ldrb	r0, [r0, #2]
 800b4d2:	2801      	cmp	r0, #1
 800b4d4:	d003      	beq.n	800b4de <USBH_CtlReq+0x12>
 800b4d6:	2802      	cmp	r0, #2
 800b4d8:	d008      	beq.n	800b4ec <USBH_CtlReq+0x20>
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
        {
          phost->Control.state = CTRL_ERROR;
 800b4da:	2001      	movs	r0, #1
  return status;
 800b4dc:	e004      	b.n	800b4e8 <USBH_CtlReq+0x1c>
      phost->RequestState = CMD_WAIT;
 800b4de:	2302      	movs	r3, #2
      phost->Control.buff = buff;
 800b4e0:	60a1      	str	r1, [r4, #8]
      phost->Control.length = length;
 800b4e2:	81a2      	strh	r2, [r4, #12]
      phost->Control.state = CTRL_SETUP;
 800b4e4:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_WAIT;
 800b4e6:	70a3      	strb	r3, [r4, #2]
}
 800b4e8:	b003      	add	sp, #12
 800b4ea:	bd30      	pop	{r4, r5, pc}
  switch (phost->Control.state)
 800b4ec:	7e23      	ldrb	r3, [r4, #24]
 800b4ee:	2101      	movs	r1, #1
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	2b0a      	cmp	r3, #10
 800b4f4:	d8f1      	bhi.n	800b4da <USBH_CtlReq+0xe>
 800b4f6:	e8df f003 	tbb	[pc, r3]
 800b4fa:	0f06      	.short	0x0f06
 800b4fc:	4d41372c 	.word	0x4d41372c
 800b500:	897d6f64 	.word	0x897d6f64
 800b504:	92          	.byte	0x92
 800b505:	00          	.byte	0x00
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b506:	7962      	ldrb	r2, [r4, #5]
 800b508:	f104 0110 	add.w	r1, r4, #16
 800b50c:	4620      	mov	r0, r4
 800b50e:	f000 f9e9 	bl	800b8e4 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 800b512:	2302      	movs	r3, #2

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b514:	7623      	strb	r3, [r4, #24]
 800b516:	e7e0      	b.n	800b4da <USBH_CtlReq+0xe>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b518:	7961      	ldrb	r1, [r4, #5]
 800b51a:	4620      	mov	r0, r4
 800b51c:	f7f5 fe36 	bl	800118c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800b520:	2801      	cmp	r0, #1
 800b522:	d110      	bne.n	800b546 <USBH_CtlReq+0x7a>
        if (phost->Control.setup.b.wLength.w != 0U)
 800b524:	8ae2      	ldrh	r2, [r4, #22]
 800b526:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800b52a:	b132      	cbz	r2, 800b53a <USBH_CtlReq+0x6e>
          if (direction == USB_D2H)
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	da02      	bge.n	800b536 <USBH_CtlReq+0x6a>
            phost->Control.state = CTRL_DATA_IN;
 800b530:	2303      	movs	r3, #3
        phost->Control.state = CTRL_IDLE;
 800b532:	7623      	strb	r3, [r4, #24]
 800b534:	e7d8      	b.n	800b4e8 <USBH_CtlReq+0x1c>
            phost->Control.state = CTRL_DATA_OUT;
 800b536:	2305      	movs	r3, #5
 800b538:	e7ec      	b.n	800b514 <USBH_CtlReq+0x48>
          if (direction == USB_D2H)
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	da01      	bge.n	800b542 <USBH_CtlReq+0x76>
        phost->Control.state = CTRL_STATUS_OUT;
 800b53e:	2309      	movs	r3, #9
 800b540:	e7e8      	b.n	800b514 <USBH_CtlReq+0x48>
            phost->Control.state = CTRL_STATUS_IN;
 800b542:	2307      	movs	r3, #7
 800b544:	e7e6      	b.n	800b514 <USBH_CtlReq+0x48>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b546:	2804      	cmp	r0, #4
 800b548:	d001      	beq.n	800b54e <USBH_CtlReq+0x82>
 800b54a:	2802      	cmp	r0, #2
 800b54c:	d1c5      	bne.n	800b4da <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 800b54e:	230b      	movs	r3, #11
 800b550:	e7e0      	b.n	800b514 <USBH_CtlReq+0x48>
      phost->Control.timer = (uint16_t)phost->Timer;
 800b552:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b556:	4620      	mov	r0, r4
 800b558:	89a2      	ldrh	r2, [r4, #12]
      phost->Control.timer = (uint16_t)phost->Timer;
 800b55a:	81e3      	strh	r3, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b55c:	68a1      	ldr	r1, [r4, #8]
 800b55e:	7923      	ldrb	r3, [r4, #4]
 800b560:	f000 f9e8 	bl	800b934 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b564:	2304      	movs	r3, #4
 800b566:	e7d5      	b.n	800b514 <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b568:	7921      	ldrb	r1, [r4, #4]
 800b56a:	4620      	mov	r0, r4
 800b56c:	f7f5 fe0e 	bl	800118c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800b570:	2801      	cmp	r0, #1
 800b572:	d0e4      	beq.n	800b53e <USBH_CtlReq+0x72>
      if (URB_Status == USBH_URB_STALL)
 800b574:	2805      	cmp	r0, #5
 800b576:	d015      	beq.n	800b5a4 <USBH_CtlReq+0xd8>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 800b578:	2804      	cmp	r0, #4
 800b57a:	e7e7      	b.n	800b54c <USBH_CtlReq+0x80>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b57c:	7963      	ldrb	r3, [r4, #5]
 800b57e:	4620      	mov	r0, r4
 800b580:	9100      	str	r1, [sp, #0]
 800b582:	89a2      	ldrh	r2, [r4, #12]
 800b584:	68a1      	ldr	r1, [r4, #8]
 800b586:	f000 f9be 	bl	800b906 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800b58a:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
 800b58e:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b590:	2306      	movs	r3, #6
 800b592:	e7bf      	b.n	800b514 <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b594:	7961      	ldrb	r1, [r4, #5]
 800b596:	4620      	mov	r0, r4
 800b598:	f7f5 fdf8 	bl	800118c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800b59c:	2801      	cmp	r0, #1
 800b59e:	d0d0      	beq.n	800b542 <USBH_CtlReq+0x76>
      else if (URB_Status == USBH_URB_STALL)
 800b5a0:	2805      	cmp	r0, #5
 800b5a2:	d104      	bne.n	800b5ae <USBH_CtlReq+0xe2>
        status = USBH_OK;
 800b5a4:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e7c1      	b.n	800b532 <USBH_CtlReq+0x66>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b5ae:	2802      	cmp	r0, #2
 800b5b0:	d0c1      	beq.n	800b536 <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
 800b5b2:	2804      	cmp	r0, #4
 800b5b4:	d191      	bne.n	800b4da <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 800b5b6:	230b      	movs	r3, #11
 800b5b8:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 800b5ba:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 800b5bc:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 800b5be:	70a3      	strb	r3, [r4, #2]
 800b5c0:	e792      	b.n	800b4e8 <USBH_CtlReq+0x1c>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	7923      	ldrb	r3, [r4, #4]
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	4611      	mov	r1, r2
 800b5ca:	f000 f9b3 	bl	800b934 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800b5ce:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
 800b5d2:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b5d4:	2308      	movs	r3, #8
 800b5d6:	e79d      	b.n	800b514 <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b5d8:	7921      	ldrb	r1, [r4, #4]
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f7f5 fdd6 	bl	800118c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800b5e0:	2801      	cmp	r0, #1
 800b5e2:	d101      	bne.n	800b5e8 <USBH_CtlReq+0x11c>
        status = USBH_OK;
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	e7de      	b.n	800b5a6 <USBH_CtlReq+0xda>
      else if (URB_Status == USBH_URB_ERROR)
 800b5e8:	2804      	cmp	r0, #4
 800b5ea:	d0b0      	beq.n	800b54e <USBH_CtlReq+0x82>
        if (URB_Status == USBH_URB_STALL)
 800b5ec:	2805      	cmp	r0, #5
 800b5ee:	f47f af74 	bne.w	800b4da <USBH_CtlReq+0xe>
 800b5f2:	e7d7      	b.n	800b5a4 <USBH_CtlReq+0xd8>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	7963      	ldrb	r3, [r4, #5]
 800b5f8:	9100      	str	r1, [sp, #0]
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	f000 f982 	bl	800b906 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800b602:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
 800b606:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b608:	230a      	movs	r3, #10
 800b60a:	e783      	b.n	800b514 <USBH_CtlReq+0x48>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b60c:	7961      	ldrb	r1, [r4, #5]
 800b60e:	4620      	mov	r0, r4
 800b610:	f7f5 fdbc 	bl	800118c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800b614:	2801      	cmp	r0, #1
 800b616:	d0e5      	beq.n	800b5e4 <USBH_CtlReq+0x118>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b618:	2802      	cmp	r0, #2
 800b61a:	d1ad      	bne.n	800b578 <USBH_CtlReq+0xac>
 800b61c:	e78f      	b.n	800b53e <USBH_CtlReq+0x72>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b61e:	7e63      	ldrb	r3, [r4, #25]
 800b620:	3301      	adds	r3, #1
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b02      	cmp	r3, #2
 800b626:	7663      	strb	r3, [r4, #25]
 800b628:	d803      	bhi.n	800b632 <USBH_CtlReq+0x166>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b62a:	2001      	movs	r0, #1
 800b62c:	7620      	strb	r0, [r4, #24]
        phost->RequestState = CMD_SEND;
 800b62e:	70a0      	strb	r0, [r4, #2]
 800b630:	e75a      	b.n	800b4e8 <USBH_CtlReq+0x1c>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
 800b632:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b634:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
 800b638:	2106      	movs	r1, #6
 800b63a:	4620      	mov	r0, r4
 800b63c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b63e:	7665      	strb	r5, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");
 800b640:	4809      	ldr	r0, [pc, #36]	; (800b668 <USBH_CtlReq+0x19c>)
 800b642:	f000 fc1f 	bl	800be84 <iprintf>
 800b646:	4809      	ldr	r0, [pc, #36]	; (800b66c <USBH_CtlReq+0x1a0>)
 800b648:	f000 fc1c 	bl	800be84 <iprintf>
 800b64c:	200a      	movs	r0, #10
 800b64e:	f000 fc31 	bl	800beb4 <putchar>

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b652:	7961      	ldrb	r1, [r4, #5]
 800b654:	4620      	mov	r0, r4
 800b656:	f000 f9d0 	bl	800b9fa <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b65a:	7921      	ldrb	r1, [r4, #4]
 800b65c:	4620      	mov	r0, r4
 800b65e:	f000 f9cc 	bl	800b9fa <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 800b662:	7025      	strb	r5, [r4, #0]
 800b664:	e7a9      	b.n	800b5ba <USBH_CtlReq+0xee>
 800b666:	bf00      	nop
 800b668:	0801126c 	.word	0x0801126c
 800b66c:	08011a58 	.word	0x08011a58

0800b670 <USBH_GetDescriptor>:
{
 800b670:	b430      	push	{r4, r5}
  if (phost->RequestState == CMD_SEND)
 800b672:	7884      	ldrb	r4, [r0, #2]
{
 800b674:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 800b678:	2c01      	cmp	r4, #1
 800b67a:	d10f      	bne.n	800b69c <USBH_GetDescriptor+0x2c>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b67c:	f061 047f 	orn	r4, r1, #127	; 0x7f
    phost->Control.setup.b.wValue.w = value_idx;
 800b680:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b682:	2106      	movs	r1, #6
    phost->Control.setup.b.wLength.w = length;
 800b684:	82c5      	strh	r5, [r0, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b686:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b688:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b68c:	7441      	strb	r1, [r0, #17]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b68e:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b692:	bf0c      	ite	eq
 800b694:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 800b698:	2200      	movne	r2, #0
 800b69a:	8282      	strh	r2, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 800b69c:	462a      	mov	r2, r5
 800b69e:	4619      	mov	r1, r3
}
 800b6a0:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 800b6a2:	f7ff bf13 	b.w	800b4cc <USBH_CtlReq>

0800b6a6 <USBH_Get_DevDesc>:
{
 800b6a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((status = USBH_GetDescriptor(phost,
 800b6a8:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 800b6ac:	460d      	mov	r5, r1
 800b6ae:	9100      	str	r1, [sp, #0]
 800b6b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b6b4:	2100      	movs	r1, #0
{
 800b6b6:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
 800b6b8:	f7ff ffda 	bl	800b670 <USBH_GetDescriptor>
 800b6bc:	bbc8      	cbnz	r0, 800b732 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b6be:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
  if (length > 8U)
 800b6c2:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b6c4:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b6c8:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
 800b6cc:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b6d0:	f8b4 321e 	ldrh.w	r3, [r4, #542]	; 0x21e
 800b6d4:	f8a4 3428 	strh.w	r3, [r4, #1064]	; 0x428
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b6d8:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 800b6dc:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b6e0:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
 800b6e4:	f884 342b 	strb.w	r3, [r4, #1067]	; 0x42b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b6e8:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
 800b6ec:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b6f0:	f894 3223 	ldrb.w	r3, [r4, #547]	; 0x223
 800b6f4:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
  if (length > 8U)
 800b6f8:	d91b      	bls.n	800b732 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16(buf +  8);
 800b6fa:	f8b4 3224 	ldrh.w	r3, [r4, #548]	; 0x224
 800b6fe:	f8a4 342e 	strh.w	r3, [r4, #1070]	; 0x42e
    dev_desc->idProduct          = LE16(buf + 10);
 800b702:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
 800b706:	f8a4 3430 	strh.w	r3, [r4, #1072]	; 0x430
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b70a:	f8b4 3228 	ldrh.w	r3, [r4, #552]	; 0x228
 800b70e:	f8a4 3432 	strh.w	r3, [r4, #1074]	; 0x432
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b712:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
 800b716:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b71a:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
 800b71e:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b722:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
 800b726:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b72a:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 800b72e:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
}
 800b732:	b003      	add	sp, #12
 800b734:	bd30      	pop	{r4, r5, pc}

0800b736 <USBH_Get_CfgDesc>:
{
 800b736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b738:	f100 051c 	add.w	r5, r0, #28
{
 800b73c:	460e      	mov	r6, r1
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b73e:	9100      	str	r1, [sp, #0]
 800b740:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b744:	462b      	mov	r3, r5
 800b746:	2100      	movs	r1, #0
{
 800b748:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b74a:	f7ff ff91 	bl	800b670 <USBH_GetDescriptor>
 800b74e:	b9f0      	cbnz	r0, 800b78e <USBH_Get_CfgDesc+0x58>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b750:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b752:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b754:	8be7      	ldrh	r7, [r4, #30]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b756:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b75a:	7f63      	ldrb	r3, [r4, #29]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b75c:	f8a4 743a 	strh.w	r7, [r4, #1082]	; 0x43a
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b760:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b764:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b768:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b76c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800b770:	f884 343d 	strb.w	r3, [r4, #1085]	; 0x43d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b774:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800b778:	f884 343e 	strb.w	r3, [r4, #1086]	; 0x43e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b77c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800b780:	f884 343f 	strb.w	r3, [r4, #1087]	; 0x43f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b784:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800b788:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b78c:	d801      	bhi.n	800b792 <USBH_Get_CfgDesc+0x5c>
}
 800b78e:	b003      	add	sp, #12
 800b790:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ptr = USB_LEN_CFG_DESC;
 800b792:	2309      	movs	r3, #9
  uint8_t                      if_ix = 0U;
 800b794:	4602      	mov	r2, r0
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b796:	429f      	cmp	r7, r3
 800b798:	d9f9      	bls.n	800b78e <USBH_Get_CfgDesc+0x58>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b79a:	7829      	ldrb	r1, [r5, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b79c:	440d      	add	r5, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b79e:	440b      	add	r3, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b7a0:	7869      	ldrb	r1, [r5, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b7a2:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b7a4:	2904      	cmp	r1, #4
 800b7a6:	d1f6      	bne.n	800b796 <USBH_Get_CfgDesc+0x60>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b7a8:	7829      	ldrb	r1, [r5, #0]
 800b7aa:	f884 1442 	strb.w	r1, [r4, #1090]	; 0x442
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b7ae:	7869      	ldrb	r1, [r5, #1]
 800b7b0:	f884 1443 	strb.w	r1, [r4, #1091]	; 0x443
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b7b4:	78a9      	ldrb	r1, [r5, #2]
 800b7b6:	f884 1444 	strb.w	r1, [r4, #1092]	; 0x444
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b7ba:	78e9      	ldrb	r1, [r5, #3]
 800b7bc:	f884 1445 	strb.w	r1, [r4, #1093]	; 0x445
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b7c0:	792e      	ldrb	r6, [r5, #4]
 800b7c2:	f884 6446 	strb.w	r6, [r4, #1094]	; 0x446
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b7c6:	7969      	ldrb	r1, [r5, #5]
 800b7c8:	f884 1447 	strb.w	r1, [r4, #1095]	; 0x447
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b7cc:	79a9      	ldrb	r1, [r5, #6]
 800b7ce:	f884 1448 	strb.w	r1, [r4, #1096]	; 0x448
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b7d2:	79e9      	ldrb	r1, [r5, #7]
 800b7d4:	f884 1449 	strb.w	r1, [r4, #1097]	; 0x449
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b7d8:	7a29      	ldrb	r1, [r5, #8]
 800b7da:	f884 144a 	strb.w	r1, [r4, #1098]	; 0x44a
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b7de:	42b2      	cmp	r2, r6
 800b7e0:	d2d5      	bcs.n	800b78e <USBH_Get_CfgDesc+0x58>
 800b7e2:	429f      	cmp	r7, r3
 800b7e4:	d9d3      	bls.n	800b78e <USBH_Get_CfgDesc+0x58>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b7e6:	7829      	ldrb	r1, [r5, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b7e8:	440d      	add	r5, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b7ea:	440b      	add	r3, r1
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b7ec:	7869      	ldrb	r1, [r5, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b7ee:	b29b      	uxth	r3, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b7f0:	2905      	cmp	r1, #5
 800b7f2:	d1f4      	bne.n	800b7de <USBH_Get_CfgDesc+0xa8>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b7f4:	f895 c000 	ldrb.w	ip, [r5]
 800b7f8:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
            ep_ix++;
 800b7fc:	3201      	adds	r2, #1
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b7fe:	f881 c44c 	strb.w	ip, [r1, #1100]	; 0x44c
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b802:	f895 c001 	ldrb.w	ip, [r5, #1]
            ep_ix++;
 800b806:	b2d2      	uxtb	r2, r2
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b808:	f881 c44d 	strb.w	ip, [r1, #1101]	; 0x44d
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b80c:	f895 c002 	ldrb.w	ip, [r5, #2]
 800b810:	f881 c44e 	strb.w	ip, [r1, #1102]	; 0x44e
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b814:	f895 c003 	ldrb.w	ip, [r5, #3]
 800b818:	f881 c44f 	strb.w	ip, [r1, #1103]	; 0x44f
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b81c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800b820:	f8a1 c450 	strh.w	ip, [r1, #1104]	; 0x450
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b824:	f895 c006 	ldrb.w	ip, [r5, #6]
 800b828:	f881 c452 	strb.w	ip, [r1, #1106]	; 0x452
 800b82c:	e7d7      	b.n	800b7de <USBH_Get_CfgDesc+0xa8>

0800b82e <USBH_Get_StringDesc>:
{
 800b82e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                   phost->device.Data, length)) == USBH_OK)
 800b830:	f500 7507 	add.w	r5, r0, #540	; 0x21c
{
 800b834:	4614      	mov	r4, r2
 800b836:	461f      	mov	r7, r3
  if ((status = USBH_GetDescriptor(phost,
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 800b83e:	462b      	mov	r3, r5
 800b840:	2100      	movs	r1, #0
{
 800b842:	4606      	mov	r6, r0
  if ((status = USBH_GetDescriptor(phost,
 800b844:	f7ff ff14 	bl	800b670 <USBH_GetDescriptor>
 800b848:	b978      	cbnz	r0, 800b86a <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b84a:	f896 321d 	ldrb.w	r3, [r6, #541]	; 0x21d
 800b84e:	2b03      	cmp	r3, #3
 800b850:	d10b      	bne.n	800b86a <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b852:	f896 321c 	ldrb.w	r3, [r6, #540]	; 0x21c
    for (idx = 0U; idx < strlength; idx += 2U)
 800b856:	4602      	mov	r2, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b858:	3b02      	subs	r3, #2
 800b85a:	42bb      	cmp	r3, r7
 800b85c:	bf28      	it	cs
 800b85e:	463b      	movcs	r3, r7
 800b860:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 800b862:	4293      	cmp	r3, r2
 800b864:	d803      	bhi.n	800b86e <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 800b866:	2300      	movs	r3, #0
 800b868:	7023      	strb	r3, [r4, #0]
}
 800b86a:	b003      	add	sp, #12
 800b86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 800b86e:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 800b870:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 800b872:	7889      	ldrb	r1, [r1, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b874:	b292      	uxth	r2, r2
      *pdest =  psrc[idx];
 800b876:	f804 1b01 	strb.w	r1, [r4], #1
 800b87a:	e7f2      	b.n	800b862 <USBH_Get_StringDesc+0x34>

0800b87c <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 800b87c:	7883      	ldrb	r3, [r0, #2]
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d105      	bne.n	800b88e <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b882:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b886:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b888:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800b88a:	2300      	movs	r3, #0
 800b88c:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 800b88e:	2200      	movs	r2, #0
 800b890:	4611      	mov	r1, r2
 800b892:	f7ff be1b 	b.w	800b4cc <USBH_CtlReq>

0800b896 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 800b896:	7883      	ldrb	r3, [r0, #2]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d105      	bne.n	800b8a8 <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b89c:	f44f 6310 	mov.w	r3, #2304	; 0x900
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b8a0:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b8a2:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	f7ff be0e 	b.w	800b4cc <USBH_CtlReq>

0800b8b0 <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 800b8b0:	7883      	ldrb	r3, [r0, #2]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d105      	bne.n	800b8c2 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b8b6:	f44f 7340 	mov.w	r3, #768	; 0x300
    phost->Control.setup.b.wValue.w = wValue;
 800b8ba:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b8bc:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	f7ff be01 	b.w	800b4cc <USBH_CtlReq>

0800b8ca <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 800b8ca:	7883      	ldrb	r3, [r0, #2]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d105      	bne.n	800b8dc <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b8d0:	f44f 7381 	mov.w	r3, #258	; 0x102
    phost->Control.setup.b.wIndex.w = ep_num;
 800b8d4:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b8d6:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800b8dc:	2200      	movs	r2, #0
 800b8de:	4611      	mov	r1, r2
 800b8e0:	f7ff bdf4 	b.w	800b4cc <USBH_CtlReq>

0800b8e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b8e4:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8e6:	2308      	movs	r3, #8
{
 800b8e8:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8ea:	2400      	movs	r4, #0
{
 800b8ec:	4615      	mov	r5, r2
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b8f2:	e9cd 4100 	strd	r4, r1, [sp]
 800b8f6:	4623      	mov	r3, r4
 800b8f8:	4622      	mov	r2, r4
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	f7f5 fc33 	bl	8001166 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 800b900:	4620      	mov	r0, r4
 800b902:	b005      	add	sp, #20
 800b904:	bd30      	pop	{r4, r5, pc}

0800b906 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b906:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b908:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
 800b90c:	b085      	sub	sp, #20
 800b90e:	461c      	mov	r4, r3
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b910:	2d00      	cmp	r5, #0
{
 800b912:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b916:	9101      	str	r1, [sp, #4]
 800b918:	4621      	mov	r1, r4
    do_ping = 0U;
 800b91a:	bf18      	it	ne
 800b91c:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b91e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b922:	2301      	movs	r3, #1
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	2300      	movs	r3, #0
 800b928:	461a      	mov	r2, r3
 800b92a:	f7f5 fc1c 	bl	8001166 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 800b92e:	2000      	movs	r0, #0
 800b930:	b005      	add	sp, #20
 800b932:	bd30      	pop	{r4, r5, pc}

0800b934 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b934:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b936:	2400      	movs	r4, #0
{
 800b938:	b085      	sub	sp, #20
 800b93a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b93c:	9101      	str	r1, [sp, #4]
 800b93e:	4623      	mov	r3, r4
 800b940:	4629      	mov	r1, r5
 800b942:	e9cd 2402 	strd	r2, r4, [sp, #8]
 800b946:	2201      	movs	r2, #1
 800b948:	9200      	str	r2, [sp, #0]
 800b94a:	f7f5 fc0c 	bl	8001166 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 800b94e:	4620      	mov	r0, r4
 800b950:	b005      	add	sp, #20
 800b952:	bd30      	pop	{r4, r5, pc}

0800b954 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b954:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b956:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
 800b95a:	b085      	sub	sp, #20
 800b95c:	461c      	mov	r4, r3
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b95e:	2d00      	cmp	r5, #0
{
 800b960:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b964:	9101      	str	r1, [sp, #4]
 800b966:	4621      	mov	r1, r4
    do_ping = 0U;
 800b968:	bf18      	it	ne
 800b96a:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b96c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b970:	2301      	movs	r3, #1
 800b972:	2200      	movs	r2, #0
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	2302      	movs	r3, #2
 800b978:	f7f5 fbf5 	bl	8001166 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800b97c:	2000      	movs	r0, #0
 800b97e:	b005      	add	sp, #20
 800b980:	bd30      	pop	{r4, r5, pc}

0800b982 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b982:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b984:	2400      	movs	r4, #0
{
 800b986:	b085      	sub	sp, #20
 800b988:	461d      	mov	r5, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b98a:	2302      	movs	r3, #2
 800b98c:	9101      	str	r1, [sp, #4]
 800b98e:	4629      	mov	r1, r5
 800b990:	e9cd 2402 	strd	r2, r4, [sp, #8]
 800b994:	2201      	movs	r2, #1
 800b996:	9200      	str	r2, [sp, #0]
 800b998:	f7f5 fbe5 	bl	8001166 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 800b99c:	4620      	mov	r0, r4
 800b99e:	b005      	add	sp, #20
 800b9a0:	bd30      	pop	{r4, r5, pc}

0800b9a2 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b9a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b9a4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800b9a8:	9402      	str	r4, [sp, #8]
 800b9aa:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800b9ae:	9401      	str	r4, [sp, #4]
 800b9b0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800b9b4:	9400      	str	r4, [sp, #0]
 800b9b6:	f7f5 fbbe 	bl	8001136 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 800b9ba:	2000      	movs	r0, #0
 800b9bc:	b004      	add	sp, #16
 800b9be:	bd10      	pop	{r4, pc}

0800b9c0 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b9c0:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 800b9c2:	f7f5 fbc9 	bl	8001158 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	bd08      	pop	{r3, pc}

0800b9ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b9ca:	b530      	push	{r4, r5, lr}
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	f500 648e 	add.w	r4, r0, #1136	; 0x470
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b9d2:	f854 5b04 	ldr.w	r5, [r4], #4
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	042d      	lsls	r5, r5, #16
 800b9da:	d408      	bmi.n	800b9ee <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b9dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b9e0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
 800b9e4:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b9e6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
 800b9ea:	b2d0      	uxtb	r0, r2
 800b9ec:	bd30      	pop	{r4, r5, pc}
 800b9ee:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 800b9f0:	2b0b      	cmp	r3, #11
 800b9f2:	d1ee      	bne.n	800b9d2 <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
 800b9f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9f8:	e7f7      	b.n	800b9ea <USBH_AllocPipe+0x20>

0800b9fa <USBH_FreePipe>:
  if (idx < 11U)
 800b9fa:	290a      	cmp	r1, #10
 800b9fc:	bf9f      	itttt	ls
 800b9fe:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
    phost->Pipes[idx] &= 0x7FFFU;
 800ba02:	f8d0 3470 	ldrls.w	r3, [r0, #1136]	; 0x470
 800ba06:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 800ba0a:	f8c0 3470 	strls.w	r3, [r0, #1136]	; 0x470
}
 800ba0e:	2000      	movs	r0, #0
 800ba10:	4770      	bx	lr
	...

0800ba14 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800ba14:	4b0d      	ldr	r3, [pc, #52]	; (800ba4c <LCD_LOG_DeInit+0x38>)
 800ba16:	f04f 32ff 	mov.w	r2, #4294967295
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800ba1a:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800ba1c:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	4a0b      	ldr	r2, [pc, #44]	; (800ba50 <LCD_LOG_DeInit+0x3c>)
 800ba22:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top = 0;
 800ba24:	4a0b      	ldr	r2, [pc, #44]	; (800ba54 <LCD_LOG_DeInit+0x40>)
 800ba26:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 800ba28:	4a0b      	ldr	r2, [pc, #44]	; (800ba58 <LCD_LOG_DeInit+0x44>)
 800ba2a:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top_bak = 0;
 800ba2c:	4a0b      	ldr	r2, [pc, #44]	; (800ba5c <LCD_LOG_DeInit+0x48>)
 800ba2e:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 800ba30:	4a0b      	ldr	r2, [pc, #44]	; (800ba60 <LCD_LOG_DeInit+0x4c>)
 800ba32:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800ba34:	4a0b      	ldr	r2, [pc, #44]	; (800ba64 <LCD_LOG_DeInit+0x50>)
 800ba36:	7011      	strb	r1, [r2, #0]
  LCD_ScrollActive = DISABLE;
 800ba38:	4a0b      	ldr	r2, [pc, #44]	; (800ba68 <LCD_LOG_DeInit+0x54>)
 800ba3a:	7013      	strb	r3, [r2, #0]
  LCD_Lock = DISABLE;
 800ba3c:	4a0b      	ldr	r2, [pc, #44]	; (800ba6c <LCD_LOG_DeInit+0x58>)
 800ba3e:	7013      	strb	r3, [r2, #0]
  LCD_Scrolled = DISABLE;
 800ba40:	4a0b      	ldr	r2, [pc, #44]	; (800ba70 <LCD_LOG_DeInit+0x5c>)
 800ba42:	7013      	strb	r3, [r2, #0]
  LCD_ScrollBackStep = 0;
 800ba44:	4a0b      	ldr	r2, [pc, #44]	; (800ba74 <LCD_LOG_DeInit+0x60>)
 800ba46:	8013      	strh	r3, [r2, #0]
}
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	2000b9f0 	.word	0x2000b9f0
 800ba50:	2000812e 	.word	0x2000812e
 800ba54:	20008134 	.word	0x20008134
 800ba58:	2000812c 	.word	0x2000812c
 800ba5c:	2000812a 	.word	0x2000812a
 800ba60:	20008128 	.word	0x20008128
 800ba64:	20008130 	.word	0x20008130
 800ba68:	20008136 	.word	0x20008136
 800ba6c:	20008131 	.word	0x20008131
 800ba70:	20008132 	.word	0x20008132
 800ba74:	2000b9f4 	.word	0x2000b9f4

0800ba78 <LCD_LOG_Init>:
{
 800ba78:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 800ba7a:	f7ff ffcb 	bl	800ba14 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800ba7e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
}
 800ba82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800ba86:	f7f7 bd95 	b.w	80035b4 <BSP_LCD_Clear>
	...

0800ba8c <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 800ba8c:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800ba8e:	4c17      	ldr	r4, [pc, #92]	; (800baec <LCD_LOG_SetHeader+0x60>)
{
 800ba90:	4606      	mov	r6, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800ba92:	4d17      	ldr	r5, [pc, #92]	; (800baf0 <LCD_LOG_SetHeader+0x64>)
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800ba94:	4620      	mov	r0, r4
 800ba96:	f7f7 fd79 	bl	800358c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	f7f7 fd62 	bl	8003564 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 800baa0:	f7f7 fd0a 	bl	80034b8 <BSP_LCD_GetXSize>
 800baa4:	88e3      	ldrh	r3, [r4, #6]
 800baa6:	2100      	movs	r1, #0
 800baa8:	b282      	uxth	r2, r0
 800baaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800baae:	4608      	mov	r0, r1
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	f7f8 f81b 	bl	8003aec <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800bab6:	f04f 30ff 	mov.w	r0, #4294967295
 800baba:	f7f7 fd53 	bl	8003564 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800babe:	4628      	mov	r0, r5
 800bac0:	f7f7 fd5a 	bl	8003578 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 800bac4:	4632      	mov	r2, r6
 800bac6:	88e1      	ldrh	r1, [r4, #6]
 800bac8:	2301      	movs	r3, #1
 800baca:	2000      	movs	r0, #0
 800bacc:	f7f7 fe62 	bl	8003794 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 800bad0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800bad4:	f7f7 fd50 	bl	8003578 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295
 800badc:	f7f7 fd42 	bl	8003564 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800bae0:	4804      	ldr	r0, [pc, #16]	; (800baf4 <LCD_LOG_SetHeader+0x68>)
}
 800bae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800bae6:	f7f7 bd51 	b.w	800358c <BSP_LCD_SetFont>
 800baea:	bf00      	nop
 800baec:	200000a4 	.word	0x200000a4
 800baf0:	ff0000ff 	.word	0xff0000ff
 800baf4:	2000009c 	.word	0x2000009c

0800baf8 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 800baf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800bafc:	4d1c      	ldr	r5, [pc, #112]	; (800bb70 <LCD_LOG_UpdateDisplay+0x78>)
 800bafe:	4a1d      	ldr	r2, [pc, #116]	; (800bb74 <LCD_LOG_UpdateDisplay+0x7c>)
 800bb00:	882b      	ldrh	r3, [r5, #0]
 800bb02:	8812      	ldrh	r2, [r2, #0]
 800bb04:	2b08      	cmp	r3, #8
 800bb06:	4f1c      	ldr	r7, [pc, #112]	; (800bb78 <LCD_LOG_UpdateDisplay+0x80>)
 800bb08:	d811      	bhi.n	800bb2e <LCD_LOG_UpdateDisplay+0x36>
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d311      	bcc.n	800bb32 <LCD_LOG_UpdateDisplay+0x3a>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 800bb0e:	2484      	movs	r4, #132	; 0x84
 800bb10:	fb04 7303 	mla	r3, r4, r3, r7
 800bb14:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800bb18:	f7f7 fd24 	bl	8003564 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800bb1c:	8829      	ldrh	r1, [r5, #0]
 800bb1e:	1d08      	adds	r0, r1, #4
 800bb20:	fb04 7101 	mla	r1, r4, r1, r7
 800bb24:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 800bb26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800bb2a:	f7f7 be85 	b.w	8003838 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d201      	bcs.n	800bb36 <LCD_LOG_UpdateDisplay+0x3e>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 800bb32:	336e      	adds	r3, #110	; 0x6e
 800bb34:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 800bb36:	3b09      	subs	r3, #9
 800bb38:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800bb3a:	f04f 086e 	mov.w	r8, #110	; 0x6e
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800bb3e:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
 800bb42:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800bb44:	19a1      	adds	r1, r4, r6
 800bb46:	fb91 f5f8 	sdiv	r5, r1, r8
 800bb4a:	fb08 1515 	mls	r5, r8, r5, r1
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800bb4e:	fb09 7505 	mla	r5, r9, r5, r7
 800bb52:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 800bb56:	f7f7 fd05 	bl	8003564 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800bb5a:	1d30      	adds	r0, r6, #4
 800bb5c:	3601      	adds	r6, #1
 800bb5e:	4629      	mov	r1, r5
 800bb60:	b280      	uxth	r0, r0
 800bb62:	f7f7 fe69 	bl	8003838 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800bb66:	2e0a      	cmp	r6, #10
 800bb68:	d1ec      	bne.n	800bb44 <LCD_LOG_UpdateDisplay+0x4c>
}
 800bb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb6e:	bf00      	nop
 800bb70:	2000812c 	.word	0x2000812c
 800bb74:	20008134 	.word	0x20008134
 800bb78:	20008138 	.word	0x20008138

0800bb7c <__io_putchar>:
{
 800bb7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb80:	4607      	mov	r7, r0
  sFONT *cFont = BSP_LCD_GetFont();
 800bb82:	f7f7 fd0d 	bl	80035a0 <BSP_LCD_GetFont>
  if(LCD_Lock == DISABLE)
 800bb86:	4b3e      	ldr	r3, [pc, #248]	; (800bc80 <__io_putchar+0x104>)
  sFONT *cFont = BSP_LCD_GetFont();
 800bb88:	4680      	mov	r8, r0
  if(LCD_Lock == DISABLE)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	bb43      	cbnz	r3, 800bbe0 <__io_putchar+0x64>
    if(LCD_ScrollActive == ENABLE)
 800bb8e:	4a3d      	ldr	r2, [pc, #244]	; (800bc84 <__io_putchar+0x108>)
 800bb90:	4c3d      	ldr	r4, [pc, #244]	; (800bc88 <__io_putchar+0x10c>)
 800bb92:	7811      	ldrb	r1, [r2, #0]
 800bb94:	2901      	cmp	r1, #1
 800bb96:	d10b      	bne.n	800bbb0 <__io_putchar+0x34>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800bb98:	493c      	ldr	r1, [pc, #240]	; (800bc8c <__io_putchar+0x110>)
      LCD_ScrollActive = DISABLE;
 800bb9a:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800bb9c:	8809      	ldrh	r1, [r1, #0]
      LCD_Scrolled = DISABLE;
 800bb9e:	4a3c      	ldr	r2, [pc, #240]	; (800bc90 <__io_putchar+0x114>)
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800bba0:	8021      	strh	r1, [r4, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800bba2:	493c      	ldr	r1, [pc, #240]	; (800bc94 <__io_putchar+0x118>)
      LCD_Scrolled = DISABLE;
 800bba4:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800bba6:	8808      	ldrh	r0, [r1, #0]
      LCD_ScrollBackStep = 0;
 800bba8:	4a3b      	ldr	r2, [pc, #236]	; (800bc98 <__io_putchar+0x11c>)
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800bbaa:	493c      	ldr	r1, [pc, #240]	; (800bc9c <__io_putchar+0x120>)
      LCD_ScrollBackStep = 0;
 800bbac:	8013      	strh	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800bbae:	8008      	strh	r0, [r1, #0]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 800bbb0:	4e3b      	ldr	r6, [pc, #236]	; (800bca0 <__io_putchar+0x124>)
 800bbb2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800bcac <__io_putchar+0x130>
 800bbb6:	8835      	ldrh	r5, [r6, #0]
 800bbb8:	f7f7 fc7e 	bl	80034b8 <BSP_LCD_GetXSize>
 800bbbc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800bbc0:	fbb0 f0f3 	udiv	r0, r0, r3
 800bbc4:	4285      	cmp	r5, r0
 800bbc6:	4635      	mov	r5, r6
 800bbc8:	d20e      	bcs.n	800bbe8 <__io_putchar+0x6c>
 800bbca:	2f0a      	cmp	r7, #10
 800bbcc:	d00c      	beq.n	800bbe8 <__io_putchar+0x6c>
 800bbce:	8832      	ldrh	r2, [r6, #0]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800bbd0:	8823      	ldrh	r3, [r4, #0]
 800bbd2:	1c51      	adds	r1, r2, #1
 800bbd4:	8031      	strh	r1, [r6, #0]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800bbd6:	2184      	movs	r1, #132	; 0x84
 800bbd8:	fb01 9903 	mla	r9, r1, r3, r9
 800bbdc:	f809 7002 	strb.w	r7, [r9, r2]
}
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	b003      	add	sp, #12
 800bbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 800bbe8:	4e2c      	ldr	r6, [pc, #176]	; (800bc9c <__io_putchar+0x120>)
 800bbea:	8822      	ldrh	r2, [r4, #0]
 800bbec:	8833      	ldrh	r3, [r6, #0]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d809      	bhi.n	800bc06 <__io_putchar+0x8a>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 800bbf2:	4a2c      	ldr	r2, [pc, #176]	; (800bca4 <__io_putchar+0x128>)
 800bbf4:	7811      	ldrb	r1, [r2, #0]
 800bbf6:	2900      	cmp	r1, #0
 800bbf8:	d136      	bne.n	800bc68 <__io_putchar+0xec>
          LCD_CacheBuffer_yptr_top++;
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 800bbfe:	2b6e      	cmp	r3, #110	; 0x6e
          LCD_CacheBuffer_yptr_top++;
 800bc00:	bf14      	ite	ne
 800bc02:	8033      	strhne	r3, [r6, #0]
            LCD_CacheBuffer_yptr_top = 0;  
 800bc04:	8031      	strheq	r1, [r6, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800bc06:	f8b5 a000 	ldrh.w	sl, [r5]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800bc0a:	f04f 0b84 	mov.w	fp, #132	; 0x84
 800bc0e:	2220      	movs	r2, #32
 800bc10:	9201      	str	r2, [sp, #4]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800bc12:	f7f7 fc51 	bl	80034b8 <BSP_LCD_GetXSize>
 800bc16:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800bc1a:	9a01      	ldr	r2, [sp, #4]
 800bc1c:	fbb0 f0f3 	udiv	r0, r0, r3
 800bc20:	4550      	cmp	r0, sl
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800bc22:	8823      	ldrh	r3, [r4, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800bc24:	d823      	bhi.n	800bc6e <__io_putchar+0xf2>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800bc26:	2284      	movs	r2, #132	; 0x84
      LCD_CacheBuffer_xptr = 0;
 800bc28:	f04f 0800 	mov.w	r8, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800bc2c:	fb02 9303 	mla	r3, r2, r3, r9
 800bc30:	4a1d      	ldr	r2, [pc, #116]	; (800bca8 <__io_putchar+0x12c>)
      LCD_CacheBuffer_xptr = 0;
 800bc32:	f8a5 8000 	strh.w	r8, [r5]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800bc36:	6812      	ldr	r2, [r2, #0]
 800bc38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_LOG_UpdateDisplay (); 
 800bc3c:	f7ff ff5c 	bl	800baf8 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 800bc40:	8823      	ldrh	r3, [r4, #0]
 800bc42:	3301      	adds	r3, #1
 800bc44:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 800bc46:	2b6e      	cmp	r3, #110	; 0x6e
        LCD_CacheBuffer_yptr_top = 1;    
 800bc48:	bf05      	ittet	eq
 800bc4a:	2301      	moveq	r3, #1
        LCD_CacheBuffer_yptr_invert = ENABLE;
 800bc4c:	4a15      	ldreq	r2, [pc, #84]	; (800bca4 <__io_putchar+0x128>)
      LCD_CacheBuffer_yptr_bottom ++; 
 800bc4e:	8023      	strhne	r3, [r4, #0]
        LCD_CacheBuffer_yptr_bottom = 0;
 800bc50:	f8a4 8000 	strheq.w	r8, [r4]
        LCD_CacheBuffer_yptr_top = 1;    
 800bc54:	bf04      	itt	eq
 800bc56:	8033      	strheq	r3, [r6, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 800bc58:	7013      	strbeq	r3, [r2, #0]
      if( ch != '\n')
 800bc5a:	2f0a      	cmp	r7, #10
 800bc5c:	d0c0      	beq.n	800bbe0 <__io_putchar+0x64>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800bc5e:	882a      	ldrh	r2, [r5, #0]
 800bc60:	8823      	ldrh	r3, [r4, #0]
 800bc62:	1c51      	adds	r1, r2, #1
 800bc64:	8029      	strh	r1, [r5, #0]
 800bc66:	e7b6      	b.n	800bbd6 <__io_putchar+0x5a>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	7013      	strb	r3, [r2, #0]
 800bc6c:	e7cb      	b.n	800bc06 <__io_putchar+0x8a>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800bc6e:	8829      	ldrh	r1, [r5, #0]
 800bc70:	fb0b 9303 	mla	r3, fp, r3, r9
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800bc74:	f10a 0a01 	add.w	sl, sl, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800bc78:	1c48      	adds	r0, r1, #1
 800bc7a:	545a      	strb	r2, [r3, r1]
 800bc7c:	8028      	strh	r0, [r5, #0]
 800bc7e:	e7c7      	b.n	800bc10 <__io_putchar+0x94>
 800bc80:	20008131 	.word	0x20008131
 800bc84:	20008136 	.word	0x20008136
 800bc88:	2000812c 	.word	0x2000812c
 800bc8c:	20008128 	.word	0x20008128
 800bc90:	20008132 	.word	0x20008132
 800bc94:	2000812a 	.word	0x2000812a
 800bc98:	2000b9f4 	.word	0x2000b9f4
 800bc9c:	20008134 	.word	0x20008134
 800bca0:	2000812e 	.word	0x2000812e
 800bca4:	20008130 	.word	0x20008130
 800bca8:	2000b9f0 	.word	0x2000b9f0
 800bcac:	20008138 	.word	0x20008138

0800bcb0 <__errno>:
 800bcb0:	4b01      	ldr	r3, [pc, #4]	; (800bcb8 <__errno+0x8>)
 800bcb2:	6818      	ldr	r0, [r3, #0]
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	200000e4 	.word	0x200000e4

0800bcbc <__libc_init_array>:
 800bcbc:	b570      	push	{r4, r5, r6, lr}
 800bcbe:	4e0d      	ldr	r6, [pc, #52]	; (800bcf4 <__libc_init_array+0x38>)
 800bcc0:	4c0d      	ldr	r4, [pc, #52]	; (800bcf8 <__libc_init_array+0x3c>)
 800bcc2:	1ba4      	subs	r4, r4, r6
 800bcc4:	10a4      	asrs	r4, r4, #2
 800bcc6:	2500      	movs	r5, #0
 800bcc8:	42a5      	cmp	r5, r4
 800bcca:	d109      	bne.n	800bce0 <__libc_init_array+0x24>
 800bccc:	4e0b      	ldr	r6, [pc, #44]	; (800bcfc <__libc_init_array+0x40>)
 800bcce:	4c0c      	ldr	r4, [pc, #48]	; (800bd00 <__libc_init_array+0x44>)
 800bcd0:	f001 f9be 	bl	800d050 <_init>
 800bcd4:	1ba4      	subs	r4, r4, r6
 800bcd6:	10a4      	asrs	r4, r4, #2
 800bcd8:	2500      	movs	r5, #0
 800bcda:	42a5      	cmp	r5, r4
 800bcdc:	d105      	bne.n	800bcea <__libc_init_array+0x2e>
 800bcde:	bd70      	pop	{r4, r5, r6, pc}
 800bce0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bce4:	4798      	blx	r3
 800bce6:	3501      	adds	r5, #1
 800bce8:	e7ee      	b.n	800bcc8 <__libc_init_array+0xc>
 800bcea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bcee:	4798      	blx	r3
 800bcf0:	3501      	adds	r5, #1
 800bcf2:	e7f2      	b.n	800bcda <__libc_init_array+0x1e>
 800bcf4:	08011b20 	.word	0x08011b20
 800bcf8:	08011b20 	.word	0x08011b20
 800bcfc:	08011b20 	.word	0x08011b20
 800bd00:	08011b24 	.word	0x08011b24

0800bd04 <malloc>:
 800bd04:	4b02      	ldr	r3, [pc, #8]	; (800bd10 <malloc+0xc>)
 800bd06:	4601      	mov	r1, r0
 800bd08:	6818      	ldr	r0, [r3, #0]
 800bd0a:	f000 b861 	b.w	800bdd0 <_malloc_r>
 800bd0e:	bf00      	nop
 800bd10:	200000e4 	.word	0x200000e4

0800bd14 <free>:
 800bd14:	4b02      	ldr	r3, [pc, #8]	; (800bd20 <free+0xc>)
 800bd16:	4601      	mov	r1, r0
 800bd18:	6818      	ldr	r0, [r3, #0]
 800bd1a:	f000 b80b 	b.w	800bd34 <_free_r>
 800bd1e:	bf00      	nop
 800bd20:	200000e4 	.word	0x200000e4

0800bd24 <memset>:
 800bd24:	4402      	add	r2, r0
 800bd26:	4603      	mov	r3, r0
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d100      	bne.n	800bd2e <memset+0xa>
 800bd2c:	4770      	bx	lr
 800bd2e:	f803 1b01 	strb.w	r1, [r3], #1
 800bd32:	e7f9      	b.n	800bd28 <memset+0x4>

0800bd34 <_free_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4605      	mov	r5, r0
 800bd38:	2900      	cmp	r1, #0
 800bd3a:	d045      	beq.n	800bdc8 <_free_r+0x94>
 800bd3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd40:	1f0c      	subs	r4, r1, #4
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	bfb8      	it	lt
 800bd46:	18e4      	addlt	r4, r4, r3
 800bd48:	f000 fc32 	bl	800c5b0 <__malloc_lock>
 800bd4c:	4a1f      	ldr	r2, [pc, #124]	; (800bdcc <_free_r+0x98>)
 800bd4e:	6813      	ldr	r3, [r2, #0]
 800bd50:	4610      	mov	r0, r2
 800bd52:	b933      	cbnz	r3, 800bd62 <_free_r+0x2e>
 800bd54:	6063      	str	r3, [r4, #4]
 800bd56:	6014      	str	r4, [r2, #0]
 800bd58:	4628      	mov	r0, r5
 800bd5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd5e:	f000 bc28 	b.w	800c5b2 <__malloc_unlock>
 800bd62:	42a3      	cmp	r3, r4
 800bd64:	d90c      	bls.n	800bd80 <_free_r+0x4c>
 800bd66:	6821      	ldr	r1, [r4, #0]
 800bd68:	1862      	adds	r2, r4, r1
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	bf04      	itt	eq
 800bd6e:	681a      	ldreq	r2, [r3, #0]
 800bd70:	685b      	ldreq	r3, [r3, #4]
 800bd72:	6063      	str	r3, [r4, #4]
 800bd74:	bf04      	itt	eq
 800bd76:	1852      	addeq	r2, r2, r1
 800bd78:	6022      	streq	r2, [r4, #0]
 800bd7a:	6004      	str	r4, [r0, #0]
 800bd7c:	e7ec      	b.n	800bd58 <_free_r+0x24>
 800bd7e:	4613      	mov	r3, r2
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	b10a      	cbz	r2, 800bd88 <_free_r+0x54>
 800bd84:	42a2      	cmp	r2, r4
 800bd86:	d9fa      	bls.n	800bd7e <_free_r+0x4a>
 800bd88:	6819      	ldr	r1, [r3, #0]
 800bd8a:	1858      	adds	r0, r3, r1
 800bd8c:	42a0      	cmp	r0, r4
 800bd8e:	d10b      	bne.n	800bda8 <_free_r+0x74>
 800bd90:	6820      	ldr	r0, [r4, #0]
 800bd92:	4401      	add	r1, r0
 800bd94:	1858      	adds	r0, r3, r1
 800bd96:	4282      	cmp	r2, r0
 800bd98:	6019      	str	r1, [r3, #0]
 800bd9a:	d1dd      	bne.n	800bd58 <_free_r+0x24>
 800bd9c:	6810      	ldr	r0, [r2, #0]
 800bd9e:	6852      	ldr	r2, [r2, #4]
 800bda0:	605a      	str	r2, [r3, #4]
 800bda2:	4401      	add	r1, r0
 800bda4:	6019      	str	r1, [r3, #0]
 800bda6:	e7d7      	b.n	800bd58 <_free_r+0x24>
 800bda8:	d902      	bls.n	800bdb0 <_free_r+0x7c>
 800bdaa:	230c      	movs	r3, #12
 800bdac:	602b      	str	r3, [r5, #0]
 800bdae:	e7d3      	b.n	800bd58 <_free_r+0x24>
 800bdb0:	6820      	ldr	r0, [r4, #0]
 800bdb2:	1821      	adds	r1, r4, r0
 800bdb4:	428a      	cmp	r2, r1
 800bdb6:	bf04      	itt	eq
 800bdb8:	6811      	ldreq	r1, [r2, #0]
 800bdba:	6852      	ldreq	r2, [r2, #4]
 800bdbc:	6062      	str	r2, [r4, #4]
 800bdbe:	bf04      	itt	eq
 800bdc0:	1809      	addeq	r1, r1, r0
 800bdc2:	6021      	streq	r1, [r4, #0]
 800bdc4:	605c      	str	r4, [r3, #4]
 800bdc6:	e7c7      	b.n	800bd58 <_free_r+0x24>
 800bdc8:	bd38      	pop	{r3, r4, r5, pc}
 800bdca:	bf00      	nop
 800bdcc:	20006f54 	.word	0x20006f54

0800bdd0 <_malloc_r>:
 800bdd0:	b570      	push	{r4, r5, r6, lr}
 800bdd2:	1ccd      	adds	r5, r1, #3
 800bdd4:	f025 0503 	bic.w	r5, r5, #3
 800bdd8:	3508      	adds	r5, #8
 800bdda:	2d0c      	cmp	r5, #12
 800bddc:	bf38      	it	cc
 800bdde:	250c      	movcc	r5, #12
 800bde0:	2d00      	cmp	r5, #0
 800bde2:	4606      	mov	r6, r0
 800bde4:	db01      	blt.n	800bdea <_malloc_r+0x1a>
 800bde6:	42a9      	cmp	r1, r5
 800bde8:	d903      	bls.n	800bdf2 <_malloc_r+0x22>
 800bdea:	230c      	movs	r3, #12
 800bdec:	6033      	str	r3, [r6, #0]
 800bdee:	2000      	movs	r0, #0
 800bdf0:	bd70      	pop	{r4, r5, r6, pc}
 800bdf2:	f000 fbdd 	bl	800c5b0 <__malloc_lock>
 800bdf6:	4a21      	ldr	r2, [pc, #132]	; (800be7c <_malloc_r+0xac>)
 800bdf8:	6814      	ldr	r4, [r2, #0]
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	b991      	cbnz	r1, 800be24 <_malloc_r+0x54>
 800bdfe:	4c20      	ldr	r4, [pc, #128]	; (800be80 <_malloc_r+0xb0>)
 800be00:	6823      	ldr	r3, [r4, #0]
 800be02:	b91b      	cbnz	r3, 800be0c <_malloc_r+0x3c>
 800be04:	4630      	mov	r0, r6
 800be06:	f000 f8cd 	bl	800bfa4 <_sbrk_r>
 800be0a:	6020      	str	r0, [r4, #0]
 800be0c:	4629      	mov	r1, r5
 800be0e:	4630      	mov	r0, r6
 800be10:	f000 f8c8 	bl	800bfa4 <_sbrk_r>
 800be14:	1c43      	adds	r3, r0, #1
 800be16:	d124      	bne.n	800be62 <_malloc_r+0x92>
 800be18:	230c      	movs	r3, #12
 800be1a:	6033      	str	r3, [r6, #0]
 800be1c:	4630      	mov	r0, r6
 800be1e:	f000 fbc8 	bl	800c5b2 <__malloc_unlock>
 800be22:	e7e4      	b.n	800bdee <_malloc_r+0x1e>
 800be24:	680b      	ldr	r3, [r1, #0]
 800be26:	1b5b      	subs	r3, r3, r5
 800be28:	d418      	bmi.n	800be5c <_malloc_r+0x8c>
 800be2a:	2b0b      	cmp	r3, #11
 800be2c:	d90f      	bls.n	800be4e <_malloc_r+0x7e>
 800be2e:	600b      	str	r3, [r1, #0]
 800be30:	50cd      	str	r5, [r1, r3]
 800be32:	18cc      	adds	r4, r1, r3
 800be34:	4630      	mov	r0, r6
 800be36:	f000 fbbc 	bl	800c5b2 <__malloc_unlock>
 800be3a:	f104 000b 	add.w	r0, r4, #11
 800be3e:	1d23      	adds	r3, r4, #4
 800be40:	f020 0007 	bic.w	r0, r0, #7
 800be44:	1ac3      	subs	r3, r0, r3
 800be46:	d0d3      	beq.n	800bdf0 <_malloc_r+0x20>
 800be48:	425a      	negs	r2, r3
 800be4a:	50e2      	str	r2, [r4, r3]
 800be4c:	e7d0      	b.n	800bdf0 <_malloc_r+0x20>
 800be4e:	428c      	cmp	r4, r1
 800be50:	684b      	ldr	r3, [r1, #4]
 800be52:	bf16      	itet	ne
 800be54:	6063      	strne	r3, [r4, #4]
 800be56:	6013      	streq	r3, [r2, #0]
 800be58:	460c      	movne	r4, r1
 800be5a:	e7eb      	b.n	800be34 <_malloc_r+0x64>
 800be5c:	460c      	mov	r4, r1
 800be5e:	6849      	ldr	r1, [r1, #4]
 800be60:	e7cc      	b.n	800bdfc <_malloc_r+0x2c>
 800be62:	1cc4      	adds	r4, r0, #3
 800be64:	f024 0403 	bic.w	r4, r4, #3
 800be68:	42a0      	cmp	r0, r4
 800be6a:	d005      	beq.n	800be78 <_malloc_r+0xa8>
 800be6c:	1a21      	subs	r1, r4, r0
 800be6e:	4630      	mov	r0, r6
 800be70:	f000 f898 	bl	800bfa4 <_sbrk_r>
 800be74:	3001      	adds	r0, #1
 800be76:	d0cf      	beq.n	800be18 <_malloc_r+0x48>
 800be78:	6025      	str	r5, [r4, #0]
 800be7a:	e7db      	b.n	800be34 <_malloc_r+0x64>
 800be7c:	20006f54 	.word	0x20006f54
 800be80:	20006f58 	.word	0x20006f58

0800be84 <iprintf>:
 800be84:	b40f      	push	{r0, r1, r2, r3}
 800be86:	4b0a      	ldr	r3, [pc, #40]	; (800beb0 <iprintf+0x2c>)
 800be88:	b513      	push	{r0, r1, r4, lr}
 800be8a:	681c      	ldr	r4, [r3, #0]
 800be8c:	b124      	cbz	r4, 800be98 <iprintf+0x14>
 800be8e:	69a3      	ldr	r3, [r4, #24]
 800be90:	b913      	cbnz	r3, 800be98 <iprintf+0x14>
 800be92:	4620      	mov	r0, r4
 800be94:	f000 fa9e 	bl	800c3d4 <__sinit>
 800be98:	ab05      	add	r3, sp, #20
 800be9a:	9a04      	ldr	r2, [sp, #16]
 800be9c:	68a1      	ldr	r1, [r4, #8]
 800be9e:	9301      	str	r3, [sp, #4]
 800bea0:	4620      	mov	r0, r4
 800bea2:	f000 fd03 	bl	800c8ac <_vfiprintf_r>
 800bea6:	b002      	add	sp, #8
 800bea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beac:	b004      	add	sp, #16
 800beae:	4770      	bx	lr
 800beb0:	200000e4 	.word	0x200000e4

0800beb4 <putchar>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	4b08      	ldr	r3, [pc, #32]	; (800bed8 <putchar+0x24>)
 800beb8:	681c      	ldr	r4, [r3, #0]
 800beba:	4605      	mov	r5, r0
 800bebc:	b124      	cbz	r4, 800bec8 <putchar+0x14>
 800bebe:	69a3      	ldr	r3, [r4, #24]
 800bec0:	b913      	cbnz	r3, 800bec8 <putchar+0x14>
 800bec2:	4620      	mov	r0, r4
 800bec4:	f000 fa86 	bl	800c3d4 <__sinit>
 800bec8:	68a2      	ldr	r2, [r4, #8]
 800beca:	4629      	mov	r1, r5
 800becc:	4620      	mov	r0, r4
 800bece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bed2:	f000 bf89 	b.w	800cde8 <_putc_r>
 800bed6:	bf00      	nop
 800bed8:	200000e4 	.word	0x200000e4

0800bedc <_puts_r>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	460e      	mov	r6, r1
 800bee0:	4605      	mov	r5, r0
 800bee2:	b118      	cbz	r0, 800beec <_puts_r+0x10>
 800bee4:	6983      	ldr	r3, [r0, #24]
 800bee6:	b90b      	cbnz	r3, 800beec <_puts_r+0x10>
 800bee8:	f000 fa74 	bl	800c3d4 <__sinit>
 800beec:	69ab      	ldr	r3, [r5, #24]
 800beee:	68ac      	ldr	r4, [r5, #8]
 800bef0:	b913      	cbnz	r3, 800bef8 <_puts_r+0x1c>
 800bef2:	4628      	mov	r0, r5
 800bef4:	f000 fa6e 	bl	800c3d4 <__sinit>
 800bef8:	4b23      	ldr	r3, [pc, #140]	; (800bf88 <_puts_r+0xac>)
 800befa:	429c      	cmp	r4, r3
 800befc:	d117      	bne.n	800bf2e <_puts_r+0x52>
 800befe:	686c      	ldr	r4, [r5, #4]
 800bf00:	89a3      	ldrh	r3, [r4, #12]
 800bf02:	071b      	lsls	r3, r3, #28
 800bf04:	d51d      	bpl.n	800bf42 <_puts_r+0x66>
 800bf06:	6923      	ldr	r3, [r4, #16]
 800bf08:	b1db      	cbz	r3, 800bf42 <_puts_r+0x66>
 800bf0a:	3e01      	subs	r6, #1
 800bf0c:	68a3      	ldr	r3, [r4, #8]
 800bf0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf12:	3b01      	subs	r3, #1
 800bf14:	60a3      	str	r3, [r4, #8]
 800bf16:	b9e9      	cbnz	r1, 800bf54 <_puts_r+0x78>
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	da2e      	bge.n	800bf7a <_puts_r+0x9e>
 800bf1c:	4622      	mov	r2, r4
 800bf1e:	210a      	movs	r1, #10
 800bf20:	4628      	mov	r0, r5
 800bf22:	f000 f8a7 	bl	800c074 <__swbuf_r>
 800bf26:	3001      	adds	r0, #1
 800bf28:	d011      	beq.n	800bf4e <_puts_r+0x72>
 800bf2a:	200a      	movs	r0, #10
 800bf2c:	e011      	b.n	800bf52 <_puts_r+0x76>
 800bf2e:	4b17      	ldr	r3, [pc, #92]	; (800bf8c <_puts_r+0xb0>)
 800bf30:	429c      	cmp	r4, r3
 800bf32:	d101      	bne.n	800bf38 <_puts_r+0x5c>
 800bf34:	68ac      	ldr	r4, [r5, #8]
 800bf36:	e7e3      	b.n	800bf00 <_puts_r+0x24>
 800bf38:	4b15      	ldr	r3, [pc, #84]	; (800bf90 <_puts_r+0xb4>)
 800bf3a:	429c      	cmp	r4, r3
 800bf3c:	bf08      	it	eq
 800bf3e:	68ec      	ldreq	r4, [r5, #12]
 800bf40:	e7de      	b.n	800bf00 <_puts_r+0x24>
 800bf42:	4621      	mov	r1, r4
 800bf44:	4628      	mov	r0, r5
 800bf46:	f000 f8e7 	bl	800c118 <__swsetup_r>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d0dd      	beq.n	800bf0a <_puts_r+0x2e>
 800bf4e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf52:	bd70      	pop	{r4, r5, r6, pc}
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	da04      	bge.n	800bf62 <_puts_r+0x86>
 800bf58:	69a2      	ldr	r2, [r4, #24]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	dc06      	bgt.n	800bf6c <_puts_r+0x90>
 800bf5e:	290a      	cmp	r1, #10
 800bf60:	d004      	beq.n	800bf6c <_puts_r+0x90>
 800bf62:	6823      	ldr	r3, [r4, #0]
 800bf64:	1c5a      	adds	r2, r3, #1
 800bf66:	6022      	str	r2, [r4, #0]
 800bf68:	7019      	strb	r1, [r3, #0]
 800bf6a:	e7cf      	b.n	800bf0c <_puts_r+0x30>
 800bf6c:	4622      	mov	r2, r4
 800bf6e:	4628      	mov	r0, r5
 800bf70:	f000 f880 	bl	800c074 <__swbuf_r>
 800bf74:	3001      	adds	r0, #1
 800bf76:	d1c9      	bne.n	800bf0c <_puts_r+0x30>
 800bf78:	e7e9      	b.n	800bf4e <_puts_r+0x72>
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	200a      	movs	r0, #10
 800bf7e:	1c5a      	adds	r2, r3, #1
 800bf80:	6022      	str	r2, [r4, #0]
 800bf82:	7018      	strb	r0, [r3, #0]
 800bf84:	e7e5      	b.n	800bf52 <_puts_r+0x76>
 800bf86:	bf00      	nop
 800bf88:	08011aa4 	.word	0x08011aa4
 800bf8c:	08011ac4 	.word	0x08011ac4
 800bf90:	08011a84 	.word	0x08011a84

0800bf94 <puts>:
 800bf94:	4b02      	ldr	r3, [pc, #8]	; (800bfa0 <puts+0xc>)
 800bf96:	4601      	mov	r1, r0
 800bf98:	6818      	ldr	r0, [r3, #0]
 800bf9a:	f7ff bf9f 	b.w	800bedc <_puts_r>
 800bf9e:	bf00      	nop
 800bfa0:	200000e4 	.word	0x200000e4

0800bfa4 <_sbrk_r>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	4c06      	ldr	r4, [pc, #24]	; (800bfc0 <_sbrk_r+0x1c>)
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4605      	mov	r5, r0
 800bfac:	4608      	mov	r0, r1
 800bfae:	6023      	str	r3, [r4, #0]
 800bfb0:	f7f4 fb4c 	bl	800064c <_sbrk>
 800bfb4:	1c43      	adds	r3, r0, #1
 800bfb6:	d102      	bne.n	800bfbe <_sbrk_r+0x1a>
 800bfb8:	6823      	ldr	r3, [r4, #0]
 800bfba:	b103      	cbz	r3, 800bfbe <_sbrk_r+0x1a>
 800bfbc:	602b      	str	r3, [r5, #0]
 800bfbe:	bd38      	pop	{r3, r4, r5, pc}
 800bfc0:	2000b9f8 	.word	0x2000b9f8

0800bfc4 <siprintf>:
 800bfc4:	b40e      	push	{r1, r2, r3}
 800bfc6:	b500      	push	{lr}
 800bfc8:	b09c      	sub	sp, #112	; 0x70
 800bfca:	ab1d      	add	r3, sp, #116	; 0x74
 800bfcc:	9002      	str	r0, [sp, #8]
 800bfce:	9006      	str	r0, [sp, #24]
 800bfd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfd4:	4809      	ldr	r0, [pc, #36]	; (800bffc <siprintf+0x38>)
 800bfd6:	9107      	str	r1, [sp, #28]
 800bfd8:	9104      	str	r1, [sp, #16]
 800bfda:	4909      	ldr	r1, [pc, #36]	; (800c000 <siprintf+0x3c>)
 800bfdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfe0:	9105      	str	r1, [sp, #20]
 800bfe2:	6800      	ldr	r0, [r0, #0]
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	a902      	add	r1, sp, #8
 800bfe8:	f000 fb3e 	bl	800c668 <_svfiprintf_r>
 800bfec:	9b02      	ldr	r3, [sp, #8]
 800bfee:	2200      	movs	r2, #0
 800bff0:	701a      	strb	r2, [r3, #0]
 800bff2:	b01c      	add	sp, #112	; 0x70
 800bff4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bff8:	b003      	add	sp, #12
 800bffa:	4770      	bx	lr
 800bffc:	200000e4 	.word	0x200000e4
 800c000:	ffff0208 	.word	0xffff0208

0800c004 <strcpy>:
 800c004:	4603      	mov	r3, r0
 800c006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c00a:	f803 2b01 	strb.w	r2, [r3], #1
 800c00e:	2a00      	cmp	r2, #0
 800c010:	d1f9      	bne.n	800c006 <strcpy+0x2>
 800c012:	4770      	bx	lr

0800c014 <strncpy>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	3901      	subs	r1, #1
 800c018:	4604      	mov	r4, r0
 800c01a:	b902      	cbnz	r2, 800c01e <strncpy+0xa>
 800c01c:	bd70      	pop	{r4, r5, r6, pc}
 800c01e:	4623      	mov	r3, r4
 800c020:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800c024:	f803 5b01 	strb.w	r5, [r3], #1
 800c028:	1e56      	subs	r6, r2, #1
 800c02a:	b92d      	cbnz	r5, 800c038 <strncpy+0x24>
 800c02c:	4414      	add	r4, r2
 800c02e:	42a3      	cmp	r3, r4
 800c030:	d0f4      	beq.n	800c01c <strncpy+0x8>
 800c032:	f803 5b01 	strb.w	r5, [r3], #1
 800c036:	e7fa      	b.n	800c02e <strncpy+0x1a>
 800c038:	461c      	mov	r4, r3
 800c03a:	4632      	mov	r2, r6
 800c03c:	e7ed      	b.n	800c01a <strncpy+0x6>

0800c03e <strstr>:
 800c03e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c040:	7803      	ldrb	r3, [r0, #0]
 800c042:	b17b      	cbz	r3, 800c064 <strstr+0x26>
 800c044:	4604      	mov	r4, r0
 800c046:	7823      	ldrb	r3, [r4, #0]
 800c048:	4620      	mov	r0, r4
 800c04a:	1c66      	adds	r6, r4, #1
 800c04c:	b17b      	cbz	r3, 800c06e <strstr+0x30>
 800c04e:	1e4a      	subs	r2, r1, #1
 800c050:	1e63      	subs	r3, r4, #1
 800c052:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800c056:	b14d      	cbz	r5, 800c06c <strstr+0x2e>
 800c058:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800c05c:	42af      	cmp	r7, r5
 800c05e:	4634      	mov	r4, r6
 800c060:	d0f7      	beq.n	800c052 <strstr+0x14>
 800c062:	e7f0      	b.n	800c046 <strstr+0x8>
 800c064:	780b      	ldrb	r3, [r1, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	bf18      	it	ne
 800c06a:	2000      	movne	r0, #0
 800c06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c06e:	4618      	mov	r0, r3
 800c070:	e7fc      	b.n	800c06c <strstr+0x2e>
	...

0800c074 <__swbuf_r>:
 800c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c076:	460e      	mov	r6, r1
 800c078:	4614      	mov	r4, r2
 800c07a:	4605      	mov	r5, r0
 800c07c:	b118      	cbz	r0, 800c086 <__swbuf_r+0x12>
 800c07e:	6983      	ldr	r3, [r0, #24]
 800c080:	b90b      	cbnz	r3, 800c086 <__swbuf_r+0x12>
 800c082:	f000 f9a7 	bl	800c3d4 <__sinit>
 800c086:	4b21      	ldr	r3, [pc, #132]	; (800c10c <__swbuf_r+0x98>)
 800c088:	429c      	cmp	r4, r3
 800c08a:	d12a      	bne.n	800c0e2 <__swbuf_r+0x6e>
 800c08c:	686c      	ldr	r4, [r5, #4]
 800c08e:	69a3      	ldr	r3, [r4, #24]
 800c090:	60a3      	str	r3, [r4, #8]
 800c092:	89a3      	ldrh	r3, [r4, #12]
 800c094:	071a      	lsls	r2, r3, #28
 800c096:	d52e      	bpl.n	800c0f6 <__swbuf_r+0x82>
 800c098:	6923      	ldr	r3, [r4, #16]
 800c09a:	b363      	cbz	r3, 800c0f6 <__swbuf_r+0x82>
 800c09c:	6923      	ldr	r3, [r4, #16]
 800c09e:	6820      	ldr	r0, [r4, #0]
 800c0a0:	1ac0      	subs	r0, r0, r3
 800c0a2:	6963      	ldr	r3, [r4, #20]
 800c0a4:	b2f6      	uxtb	r6, r6
 800c0a6:	4283      	cmp	r3, r0
 800c0a8:	4637      	mov	r7, r6
 800c0aa:	dc04      	bgt.n	800c0b6 <__swbuf_r+0x42>
 800c0ac:	4621      	mov	r1, r4
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f000 f926 	bl	800c300 <_fflush_r>
 800c0b4:	bb28      	cbnz	r0, 800c102 <__swbuf_r+0x8e>
 800c0b6:	68a3      	ldr	r3, [r4, #8]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	60a3      	str	r3, [r4, #8]
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	1c5a      	adds	r2, r3, #1
 800c0c0:	6022      	str	r2, [r4, #0]
 800c0c2:	701e      	strb	r6, [r3, #0]
 800c0c4:	6963      	ldr	r3, [r4, #20]
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	4283      	cmp	r3, r0
 800c0ca:	d004      	beq.n	800c0d6 <__swbuf_r+0x62>
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	07db      	lsls	r3, r3, #31
 800c0d0:	d519      	bpl.n	800c106 <__swbuf_r+0x92>
 800c0d2:	2e0a      	cmp	r6, #10
 800c0d4:	d117      	bne.n	800c106 <__swbuf_r+0x92>
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4628      	mov	r0, r5
 800c0da:	f000 f911 	bl	800c300 <_fflush_r>
 800c0de:	b190      	cbz	r0, 800c106 <__swbuf_r+0x92>
 800c0e0:	e00f      	b.n	800c102 <__swbuf_r+0x8e>
 800c0e2:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <__swbuf_r+0x9c>)
 800c0e4:	429c      	cmp	r4, r3
 800c0e6:	d101      	bne.n	800c0ec <__swbuf_r+0x78>
 800c0e8:	68ac      	ldr	r4, [r5, #8]
 800c0ea:	e7d0      	b.n	800c08e <__swbuf_r+0x1a>
 800c0ec:	4b09      	ldr	r3, [pc, #36]	; (800c114 <__swbuf_r+0xa0>)
 800c0ee:	429c      	cmp	r4, r3
 800c0f0:	bf08      	it	eq
 800c0f2:	68ec      	ldreq	r4, [r5, #12]
 800c0f4:	e7cb      	b.n	800c08e <__swbuf_r+0x1a>
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f000 f80d 	bl	800c118 <__swsetup_r>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d0cc      	beq.n	800c09c <__swbuf_r+0x28>
 800c102:	f04f 37ff 	mov.w	r7, #4294967295
 800c106:	4638      	mov	r0, r7
 800c108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c10a:	bf00      	nop
 800c10c:	08011aa4 	.word	0x08011aa4
 800c110:	08011ac4 	.word	0x08011ac4
 800c114:	08011a84 	.word	0x08011a84

0800c118 <__swsetup_r>:
 800c118:	4b32      	ldr	r3, [pc, #200]	; (800c1e4 <__swsetup_r+0xcc>)
 800c11a:	b570      	push	{r4, r5, r6, lr}
 800c11c:	681d      	ldr	r5, [r3, #0]
 800c11e:	4606      	mov	r6, r0
 800c120:	460c      	mov	r4, r1
 800c122:	b125      	cbz	r5, 800c12e <__swsetup_r+0x16>
 800c124:	69ab      	ldr	r3, [r5, #24]
 800c126:	b913      	cbnz	r3, 800c12e <__swsetup_r+0x16>
 800c128:	4628      	mov	r0, r5
 800c12a:	f000 f953 	bl	800c3d4 <__sinit>
 800c12e:	4b2e      	ldr	r3, [pc, #184]	; (800c1e8 <__swsetup_r+0xd0>)
 800c130:	429c      	cmp	r4, r3
 800c132:	d10f      	bne.n	800c154 <__swsetup_r+0x3c>
 800c134:	686c      	ldr	r4, [r5, #4]
 800c136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	0715      	lsls	r5, r2, #28
 800c13e:	d42c      	bmi.n	800c19a <__swsetup_r+0x82>
 800c140:	06d0      	lsls	r0, r2, #27
 800c142:	d411      	bmi.n	800c168 <__swsetup_r+0x50>
 800c144:	2209      	movs	r2, #9
 800c146:	6032      	str	r2, [r6, #0]
 800c148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c14c:	81a3      	strh	r3, [r4, #12]
 800c14e:	f04f 30ff 	mov.w	r0, #4294967295
 800c152:	e03e      	b.n	800c1d2 <__swsetup_r+0xba>
 800c154:	4b25      	ldr	r3, [pc, #148]	; (800c1ec <__swsetup_r+0xd4>)
 800c156:	429c      	cmp	r4, r3
 800c158:	d101      	bne.n	800c15e <__swsetup_r+0x46>
 800c15a:	68ac      	ldr	r4, [r5, #8]
 800c15c:	e7eb      	b.n	800c136 <__swsetup_r+0x1e>
 800c15e:	4b24      	ldr	r3, [pc, #144]	; (800c1f0 <__swsetup_r+0xd8>)
 800c160:	429c      	cmp	r4, r3
 800c162:	bf08      	it	eq
 800c164:	68ec      	ldreq	r4, [r5, #12]
 800c166:	e7e6      	b.n	800c136 <__swsetup_r+0x1e>
 800c168:	0751      	lsls	r1, r2, #29
 800c16a:	d512      	bpl.n	800c192 <__swsetup_r+0x7a>
 800c16c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c16e:	b141      	cbz	r1, 800c182 <__swsetup_r+0x6a>
 800c170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c174:	4299      	cmp	r1, r3
 800c176:	d002      	beq.n	800c17e <__swsetup_r+0x66>
 800c178:	4630      	mov	r0, r6
 800c17a:	f7ff fddb 	bl	800bd34 <_free_r>
 800c17e:	2300      	movs	r3, #0
 800c180:	6363      	str	r3, [r4, #52]	; 0x34
 800c182:	89a3      	ldrh	r3, [r4, #12]
 800c184:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c188:	81a3      	strh	r3, [r4, #12]
 800c18a:	2300      	movs	r3, #0
 800c18c:	6063      	str	r3, [r4, #4]
 800c18e:	6923      	ldr	r3, [r4, #16]
 800c190:	6023      	str	r3, [r4, #0]
 800c192:	89a3      	ldrh	r3, [r4, #12]
 800c194:	f043 0308 	orr.w	r3, r3, #8
 800c198:	81a3      	strh	r3, [r4, #12]
 800c19a:	6923      	ldr	r3, [r4, #16]
 800c19c:	b94b      	cbnz	r3, 800c1b2 <__swsetup_r+0x9a>
 800c19e:	89a3      	ldrh	r3, [r4, #12]
 800c1a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1a8:	d003      	beq.n	800c1b2 <__swsetup_r+0x9a>
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f000 f9bf 	bl	800c530 <__smakebuf_r>
 800c1b2:	89a2      	ldrh	r2, [r4, #12]
 800c1b4:	f012 0301 	ands.w	r3, r2, #1
 800c1b8:	d00c      	beq.n	800c1d4 <__swsetup_r+0xbc>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60a3      	str	r3, [r4, #8]
 800c1be:	6963      	ldr	r3, [r4, #20]
 800c1c0:	425b      	negs	r3, r3
 800c1c2:	61a3      	str	r3, [r4, #24]
 800c1c4:	6923      	ldr	r3, [r4, #16]
 800c1c6:	b953      	cbnz	r3, 800c1de <__swsetup_r+0xc6>
 800c1c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c1d0:	d1ba      	bne.n	800c148 <__swsetup_r+0x30>
 800c1d2:	bd70      	pop	{r4, r5, r6, pc}
 800c1d4:	0792      	lsls	r2, r2, #30
 800c1d6:	bf58      	it	pl
 800c1d8:	6963      	ldrpl	r3, [r4, #20]
 800c1da:	60a3      	str	r3, [r4, #8]
 800c1dc:	e7f2      	b.n	800c1c4 <__swsetup_r+0xac>
 800c1de:	2000      	movs	r0, #0
 800c1e0:	e7f7      	b.n	800c1d2 <__swsetup_r+0xba>
 800c1e2:	bf00      	nop
 800c1e4:	200000e4 	.word	0x200000e4
 800c1e8:	08011aa4 	.word	0x08011aa4
 800c1ec:	08011ac4 	.word	0x08011ac4
 800c1f0:	08011a84 	.word	0x08011a84

0800c1f4 <__sflush_r>:
 800c1f4:	898a      	ldrh	r2, [r1, #12]
 800c1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fa:	4605      	mov	r5, r0
 800c1fc:	0710      	lsls	r0, r2, #28
 800c1fe:	460c      	mov	r4, r1
 800c200:	d458      	bmi.n	800c2b4 <__sflush_r+0xc0>
 800c202:	684b      	ldr	r3, [r1, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	dc05      	bgt.n	800c214 <__sflush_r+0x20>
 800c208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	dc02      	bgt.n	800c214 <__sflush_r+0x20>
 800c20e:	2000      	movs	r0, #0
 800c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c216:	2e00      	cmp	r6, #0
 800c218:	d0f9      	beq.n	800c20e <__sflush_r+0x1a>
 800c21a:	2300      	movs	r3, #0
 800c21c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c220:	682f      	ldr	r7, [r5, #0]
 800c222:	6a21      	ldr	r1, [r4, #32]
 800c224:	602b      	str	r3, [r5, #0]
 800c226:	d032      	beq.n	800c28e <__sflush_r+0x9a>
 800c228:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c22a:	89a3      	ldrh	r3, [r4, #12]
 800c22c:	075a      	lsls	r2, r3, #29
 800c22e:	d505      	bpl.n	800c23c <__sflush_r+0x48>
 800c230:	6863      	ldr	r3, [r4, #4]
 800c232:	1ac0      	subs	r0, r0, r3
 800c234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c236:	b10b      	cbz	r3, 800c23c <__sflush_r+0x48>
 800c238:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c23a:	1ac0      	subs	r0, r0, r3
 800c23c:	2300      	movs	r3, #0
 800c23e:	4602      	mov	r2, r0
 800c240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c242:	6a21      	ldr	r1, [r4, #32]
 800c244:	4628      	mov	r0, r5
 800c246:	47b0      	blx	r6
 800c248:	1c43      	adds	r3, r0, #1
 800c24a:	89a3      	ldrh	r3, [r4, #12]
 800c24c:	d106      	bne.n	800c25c <__sflush_r+0x68>
 800c24e:	6829      	ldr	r1, [r5, #0]
 800c250:	291d      	cmp	r1, #29
 800c252:	d848      	bhi.n	800c2e6 <__sflush_r+0xf2>
 800c254:	4a29      	ldr	r2, [pc, #164]	; (800c2fc <__sflush_r+0x108>)
 800c256:	40ca      	lsrs	r2, r1
 800c258:	07d6      	lsls	r6, r2, #31
 800c25a:	d544      	bpl.n	800c2e6 <__sflush_r+0xf2>
 800c25c:	2200      	movs	r2, #0
 800c25e:	6062      	str	r2, [r4, #4]
 800c260:	04d9      	lsls	r1, r3, #19
 800c262:	6922      	ldr	r2, [r4, #16]
 800c264:	6022      	str	r2, [r4, #0]
 800c266:	d504      	bpl.n	800c272 <__sflush_r+0x7e>
 800c268:	1c42      	adds	r2, r0, #1
 800c26a:	d101      	bne.n	800c270 <__sflush_r+0x7c>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b903      	cbnz	r3, 800c272 <__sflush_r+0x7e>
 800c270:	6560      	str	r0, [r4, #84]	; 0x54
 800c272:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c274:	602f      	str	r7, [r5, #0]
 800c276:	2900      	cmp	r1, #0
 800c278:	d0c9      	beq.n	800c20e <__sflush_r+0x1a>
 800c27a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c27e:	4299      	cmp	r1, r3
 800c280:	d002      	beq.n	800c288 <__sflush_r+0x94>
 800c282:	4628      	mov	r0, r5
 800c284:	f7ff fd56 	bl	800bd34 <_free_r>
 800c288:	2000      	movs	r0, #0
 800c28a:	6360      	str	r0, [r4, #52]	; 0x34
 800c28c:	e7c0      	b.n	800c210 <__sflush_r+0x1c>
 800c28e:	2301      	movs	r3, #1
 800c290:	4628      	mov	r0, r5
 800c292:	47b0      	blx	r6
 800c294:	1c41      	adds	r1, r0, #1
 800c296:	d1c8      	bne.n	800c22a <__sflush_r+0x36>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d0c5      	beq.n	800c22a <__sflush_r+0x36>
 800c29e:	2b1d      	cmp	r3, #29
 800c2a0:	d001      	beq.n	800c2a6 <__sflush_r+0xb2>
 800c2a2:	2b16      	cmp	r3, #22
 800c2a4:	d101      	bne.n	800c2aa <__sflush_r+0xb6>
 800c2a6:	602f      	str	r7, [r5, #0]
 800c2a8:	e7b1      	b.n	800c20e <__sflush_r+0x1a>
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b0:	81a3      	strh	r3, [r4, #12]
 800c2b2:	e7ad      	b.n	800c210 <__sflush_r+0x1c>
 800c2b4:	690f      	ldr	r7, [r1, #16]
 800c2b6:	2f00      	cmp	r7, #0
 800c2b8:	d0a9      	beq.n	800c20e <__sflush_r+0x1a>
 800c2ba:	0793      	lsls	r3, r2, #30
 800c2bc:	680e      	ldr	r6, [r1, #0]
 800c2be:	bf08      	it	eq
 800c2c0:	694b      	ldreq	r3, [r1, #20]
 800c2c2:	600f      	str	r7, [r1, #0]
 800c2c4:	bf18      	it	ne
 800c2c6:	2300      	movne	r3, #0
 800c2c8:	eba6 0807 	sub.w	r8, r6, r7
 800c2cc:	608b      	str	r3, [r1, #8]
 800c2ce:	f1b8 0f00 	cmp.w	r8, #0
 800c2d2:	dd9c      	ble.n	800c20e <__sflush_r+0x1a>
 800c2d4:	4643      	mov	r3, r8
 800c2d6:	463a      	mov	r2, r7
 800c2d8:	6a21      	ldr	r1, [r4, #32]
 800c2da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2dc:	4628      	mov	r0, r5
 800c2de:	47b0      	blx	r6
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	dc06      	bgt.n	800c2f2 <__sflush_r+0xfe>
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ea:	81a3      	strh	r3, [r4, #12]
 800c2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f0:	e78e      	b.n	800c210 <__sflush_r+0x1c>
 800c2f2:	4407      	add	r7, r0
 800c2f4:	eba8 0800 	sub.w	r8, r8, r0
 800c2f8:	e7e9      	b.n	800c2ce <__sflush_r+0xda>
 800c2fa:	bf00      	nop
 800c2fc:	20400001 	.word	0x20400001

0800c300 <_fflush_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	690b      	ldr	r3, [r1, #16]
 800c304:	4605      	mov	r5, r0
 800c306:	460c      	mov	r4, r1
 800c308:	b1db      	cbz	r3, 800c342 <_fflush_r+0x42>
 800c30a:	b118      	cbz	r0, 800c314 <_fflush_r+0x14>
 800c30c:	6983      	ldr	r3, [r0, #24]
 800c30e:	b90b      	cbnz	r3, 800c314 <_fflush_r+0x14>
 800c310:	f000 f860 	bl	800c3d4 <__sinit>
 800c314:	4b0c      	ldr	r3, [pc, #48]	; (800c348 <_fflush_r+0x48>)
 800c316:	429c      	cmp	r4, r3
 800c318:	d109      	bne.n	800c32e <_fflush_r+0x2e>
 800c31a:	686c      	ldr	r4, [r5, #4]
 800c31c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c320:	b17b      	cbz	r3, 800c342 <_fflush_r+0x42>
 800c322:	4621      	mov	r1, r4
 800c324:	4628      	mov	r0, r5
 800c326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c32a:	f7ff bf63 	b.w	800c1f4 <__sflush_r>
 800c32e:	4b07      	ldr	r3, [pc, #28]	; (800c34c <_fflush_r+0x4c>)
 800c330:	429c      	cmp	r4, r3
 800c332:	d101      	bne.n	800c338 <_fflush_r+0x38>
 800c334:	68ac      	ldr	r4, [r5, #8]
 800c336:	e7f1      	b.n	800c31c <_fflush_r+0x1c>
 800c338:	4b05      	ldr	r3, [pc, #20]	; (800c350 <_fflush_r+0x50>)
 800c33a:	429c      	cmp	r4, r3
 800c33c:	bf08      	it	eq
 800c33e:	68ec      	ldreq	r4, [r5, #12]
 800c340:	e7ec      	b.n	800c31c <_fflush_r+0x1c>
 800c342:	2000      	movs	r0, #0
 800c344:	bd38      	pop	{r3, r4, r5, pc}
 800c346:	bf00      	nop
 800c348:	08011aa4 	.word	0x08011aa4
 800c34c:	08011ac4 	.word	0x08011ac4
 800c350:	08011a84 	.word	0x08011a84

0800c354 <std>:
 800c354:	2300      	movs	r3, #0
 800c356:	b510      	push	{r4, lr}
 800c358:	4604      	mov	r4, r0
 800c35a:	e9c0 3300 	strd	r3, r3, [r0]
 800c35e:	6083      	str	r3, [r0, #8]
 800c360:	8181      	strh	r1, [r0, #12]
 800c362:	6643      	str	r3, [r0, #100]	; 0x64
 800c364:	81c2      	strh	r2, [r0, #14]
 800c366:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c36a:	6183      	str	r3, [r0, #24]
 800c36c:	4619      	mov	r1, r3
 800c36e:	2208      	movs	r2, #8
 800c370:	305c      	adds	r0, #92	; 0x5c
 800c372:	f7ff fcd7 	bl	800bd24 <memset>
 800c376:	4b05      	ldr	r3, [pc, #20]	; (800c38c <std+0x38>)
 800c378:	6263      	str	r3, [r4, #36]	; 0x24
 800c37a:	4b05      	ldr	r3, [pc, #20]	; (800c390 <std+0x3c>)
 800c37c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c37e:	4b05      	ldr	r3, [pc, #20]	; (800c394 <std+0x40>)
 800c380:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c382:	4b05      	ldr	r3, [pc, #20]	; (800c398 <std+0x44>)
 800c384:	6224      	str	r4, [r4, #32]
 800c386:	6323      	str	r3, [r4, #48]	; 0x30
 800c388:	bd10      	pop	{r4, pc}
 800c38a:	bf00      	nop
 800c38c:	0800ce55 	.word	0x0800ce55
 800c390:	0800ce77 	.word	0x0800ce77
 800c394:	0800ceaf 	.word	0x0800ceaf
 800c398:	0800ced3 	.word	0x0800ced3

0800c39c <_cleanup_r>:
 800c39c:	4901      	ldr	r1, [pc, #4]	; (800c3a4 <_cleanup_r+0x8>)
 800c39e:	f000 b885 	b.w	800c4ac <_fwalk_reent>
 800c3a2:	bf00      	nop
 800c3a4:	0800c301 	.word	0x0800c301

0800c3a8 <__sfmoreglue>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	1e4a      	subs	r2, r1, #1
 800c3ac:	2568      	movs	r5, #104	; 0x68
 800c3ae:	4355      	muls	r5, r2
 800c3b0:	460e      	mov	r6, r1
 800c3b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3b6:	f7ff fd0b 	bl	800bdd0 <_malloc_r>
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	b140      	cbz	r0, 800c3d0 <__sfmoreglue+0x28>
 800c3be:	2100      	movs	r1, #0
 800c3c0:	e9c0 1600 	strd	r1, r6, [r0]
 800c3c4:	300c      	adds	r0, #12
 800c3c6:	60a0      	str	r0, [r4, #8]
 800c3c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3cc:	f7ff fcaa 	bl	800bd24 <memset>
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	bd70      	pop	{r4, r5, r6, pc}

0800c3d4 <__sinit>:
 800c3d4:	6983      	ldr	r3, [r0, #24]
 800c3d6:	b510      	push	{r4, lr}
 800c3d8:	4604      	mov	r4, r0
 800c3da:	bb33      	cbnz	r3, 800c42a <__sinit+0x56>
 800c3dc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c3e0:	6503      	str	r3, [r0, #80]	; 0x50
 800c3e2:	4b12      	ldr	r3, [pc, #72]	; (800c42c <__sinit+0x58>)
 800c3e4:	4a12      	ldr	r2, [pc, #72]	; (800c430 <__sinit+0x5c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6282      	str	r2, [r0, #40]	; 0x28
 800c3ea:	4298      	cmp	r0, r3
 800c3ec:	bf04      	itt	eq
 800c3ee:	2301      	moveq	r3, #1
 800c3f0:	6183      	streq	r3, [r0, #24]
 800c3f2:	f000 f81f 	bl	800c434 <__sfp>
 800c3f6:	6060      	str	r0, [r4, #4]
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f000 f81b 	bl	800c434 <__sfp>
 800c3fe:	60a0      	str	r0, [r4, #8]
 800c400:	4620      	mov	r0, r4
 800c402:	f000 f817 	bl	800c434 <__sfp>
 800c406:	2200      	movs	r2, #0
 800c408:	60e0      	str	r0, [r4, #12]
 800c40a:	2104      	movs	r1, #4
 800c40c:	6860      	ldr	r0, [r4, #4]
 800c40e:	f7ff ffa1 	bl	800c354 <std>
 800c412:	2201      	movs	r2, #1
 800c414:	2109      	movs	r1, #9
 800c416:	68a0      	ldr	r0, [r4, #8]
 800c418:	f7ff ff9c 	bl	800c354 <std>
 800c41c:	2202      	movs	r2, #2
 800c41e:	2112      	movs	r1, #18
 800c420:	68e0      	ldr	r0, [r4, #12]
 800c422:	f7ff ff97 	bl	800c354 <std>
 800c426:	2301      	movs	r3, #1
 800c428:	61a3      	str	r3, [r4, #24]
 800c42a:	bd10      	pop	{r4, pc}
 800c42c:	08011a80 	.word	0x08011a80
 800c430:	0800c39d 	.word	0x0800c39d

0800c434 <__sfp>:
 800c434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c436:	4b1b      	ldr	r3, [pc, #108]	; (800c4a4 <__sfp+0x70>)
 800c438:	681e      	ldr	r6, [r3, #0]
 800c43a:	69b3      	ldr	r3, [r6, #24]
 800c43c:	4607      	mov	r7, r0
 800c43e:	b913      	cbnz	r3, 800c446 <__sfp+0x12>
 800c440:	4630      	mov	r0, r6
 800c442:	f7ff ffc7 	bl	800c3d4 <__sinit>
 800c446:	3648      	adds	r6, #72	; 0x48
 800c448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c44c:	3b01      	subs	r3, #1
 800c44e:	d503      	bpl.n	800c458 <__sfp+0x24>
 800c450:	6833      	ldr	r3, [r6, #0]
 800c452:	b133      	cbz	r3, 800c462 <__sfp+0x2e>
 800c454:	6836      	ldr	r6, [r6, #0]
 800c456:	e7f7      	b.n	800c448 <__sfp+0x14>
 800c458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c45c:	b16d      	cbz	r5, 800c47a <__sfp+0x46>
 800c45e:	3468      	adds	r4, #104	; 0x68
 800c460:	e7f4      	b.n	800c44c <__sfp+0x18>
 800c462:	2104      	movs	r1, #4
 800c464:	4638      	mov	r0, r7
 800c466:	f7ff ff9f 	bl	800c3a8 <__sfmoreglue>
 800c46a:	6030      	str	r0, [r6, #0]
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d1f1      	bne.n	800c454 <__sfp+0x20>
 800c470:	230c      	movs	r3, #12
 800c472:	603b      	str	r3, [r7, #0]
 800c474:	4604      	mov	r4, r0
 800c476:	4620      	mov	r0, r4
 800c478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c47a:	4b0b      	ldr	r3, [pc, #44]	; (800c4a8 <__sfp+0x74>)
 800c47c:	6665      	str	r5, [r4, #100]	; 0x64
 800c47e:	e9c4 5500 	strd	r5, r5, [r4]
 800c482:	60a5      	str	r5, [r4, #8]
 800c484:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c488:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c48c:	2208      	movs	r2, #8
 800c48e:	4629      	mov	r1, r5
 800c490:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c494:	f7ff fc46 	bl	800bd24 <memset>
 800c498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c49c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4a0:	e7e9      	b.n	800c476 <__sfp+0x42>
 800c4a2:	bf00      	nop
 800c4a4:	08011a80 	.word	0x08011a80
 800c4a8:	ffff0001 	.word	0xffff0001

0800c4ac <_fwalk_reent>:
 800c4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b0:	4680      	mov	r8, r0
 800c4b2:	4689      	mov	r9, r1
 800c4b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c4b8:	2600      	movs	r6, #0
 800c4ba:	b914      	cbnz	r4, 800c4c2 <_fwalk_reent+0x16>
 800c4bc:	4630      	mov	r0, r6
 800c4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c4c6:	3f01      	subs	r7, #1
 800c4c8:	d501      	bpl.n	800c4ce <_fwalk_reent+0x22>
 800c4ca:	6824      	ldr	r4, [r4, #0]
 800c4cc:	e7f5      	b.n	800c4ba <_fwalk_reent+0xe>
 800c4ce:	89ab      	ldrh	r3, [r5, #12]
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d907      	bls.n	800c4e4 <_fwalk_reent+0x38>
 800c4d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	d003      	beq.n	800c4e4 <_fwalk_reent+0x38>
 800c4dc:	4629      	mov	r1, r5
 800c4de:	4640      	mov	r0, r8
 800c4e0:	47c8      	blx	r9
 800c4e2:	4306      	orrs	r6, r0
 800c4e4:	3568      	adds	r5, #104	; 0x68
 800c4e6:	e7ee      	b.n	800c4c6 <_fwalk_reent+0x1a>

0800c4e8 <__swhatbuf_r>:
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	460e      	mov	r6, r1
 800c4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4f0:	2900      	cmp	r1, #0
 800c4f2:	b096      	sub	sp, #88	; 0x58
 800c4f4:	4614      	mov	r4, r2
 800c4f6:	461d      	mov	r5, r3
 800c4f8:	da07      	bge.n	800c50a <__swhatbuf_r+0x22>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	602b      	str	r3, [r5, #0]
 800c4fe:	89b3      	ldrh	r3, [r6, #12]
 800c500:	061a      	lsls	r2, r3, #24
 800c502:	d410      	bmi.n	800c526 <__swhatbuf_r+0x3e>
 800c504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c508:	e00e      	b.n	800c528 <__swhatbuf_r+0x40>
 800c50a:	466a      	mov	r2, sp
 800c50c:	f000 fd08 	bl	800cf20 <_fstat_r>
 800c510:	2800      	cmp	r0, #0
 800c512:	dbf2      	blt.n	800c4fa <__swhatbuf_r+0x12>
 800c514:	9a01      	ldr	r2, [sp, #4]
 800c516:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c51a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c51e:	425a      	negs	r2, r3
 800c520:	415a      	adcs	r2, r3
 800c522:	602a      	str	r2, [r5, #0]
 800c524:	e7ee      	b.n	800c504 <__swhatbuf_r+0x1c>
 800c526:	2340      	movs	r3, #64	; 0x40
 800c528:	2000      	movs	r0, #0
 800c52a:	6023      	str	r3, [r4, #0]
 800c52c:	b016      	add	sp, #88	; 0x58
 800c52e:	bd70      	pop	{r4, r5, r6, pc}

0800c530 <__smakebuf_r>:
 800c530:	898b      	ldrh	r3, [r1, #12]
 800c532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c534:	079d      	lsls	r5, r3, #30
 800c536:	4606      	mov	r6, r0
 800c538:	460c      	mov	r4, r1
 800c53a:	d507      	bpl.n	800c54c <__smakebuf_r+0x1c>
 800c53c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	6123      	str	r3, [r4, #16]
 800c544:	2301      	movs	r3, #1
 800c546:	6163      	str	r3, [r4, #20]
 800c548:	b002      	add	sp, #8
 800c54a:	bd70      	pop	{r4, r5, r6, pc}
 800c54c:	ab01      	add	r3, sp, #4
 800c54e:	466a      	mov	r2, sp
 800c550:	f7ff ffca 	bl	800c4e8 <__swhatbuf_r>
 800c554:	9900      	ldr	r1, [sp, #0]
 800c556:	4605      	mov	r5, r0
 800c558:	4630      	mov	r0, r6
 800c55a:	f7ff fc39 	bl	800bdd0 <_malloc_r>
 800c55e:	b948      	cbnz	r0, 800c574 <__smakebuf_r+0x44>
 800c560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c564:	059a      	lsls	r2, r3, #22
 800c566:	d4ef      	bmi.n	800c548 <__smakebuf_r+0x18>
 800c568:	f023 0303 	bic.w	r3, r3, #3
 800c56c:	f043 0302 	orr.w	r3, r3, #2
 800c570:	81a3      	strh	r3, [r4, #12]
 800c572:	e7e3      	b.n	800c53c <__smakebuf_r+0xc>
 800c574:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <__smakebuf_r+0x7c>)
 800c576:	62b3      	str	r3, [r6, #40]	; 0x28
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	6020      	str	r0, [r4, #0]
 800c57c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c580:	81a3      	strh	r3, [r4, #12]
 800c582:	9b00      	ldr	r3, [sp, #0]
 800c584:	6163      	str	r3, [r4, #20]
 800c586:	9b01      	ldr	r3, [sp, #4]
 800c588:	6120      	str	r0, [r4, #16]
 800c58a:	b15b      	cbz	r3, 800c5a4 <__smakebuf_r+0x74>
 800c58c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c590:	4630      	mov	r0, r6
 800c592:	f000 fcd7 	bl	800cf44 <_isatty_r>
 800c596:	b128      	cbz	r0, 800c5a4 <__smakebuf_r+0x74>
 800c598:	89a3      	ldrh	r3, [r4, #12]
 800c59a:	f023 0303 	bic.w	r3, r3, #3
 800c59e:	f043 0301 	orr.w	r3, r3, #1
 800c5a2:	81a3      	strh	r3, [r4, #12]
 800c5a4:	89a3      	ldrh	r3, [r4, #12]
 800c5a6:	431d      	orrs	r5, r3
 800c5a8:	81a5      	strh	r5, [r4, #12]
 800c5aa:	e7cd      	b.n	800c548 <__smakebuf_r+0x18>
 800c5ac:	0800c39d 	.word	0x0800c39d

0800c5b0 <__malloc_lock>:
 800c5b0:	4770      	bx	lr

0800c5b2 <__malloc_unlock>:
 800c5b2:	4770      	bx	lr

0800c5b4 <__ssputs_r>:
 800c5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b8:	688e      	ldr	r6, [r1, #8]
 800c5ba:	429e      	cmp	r6, r3
 800c5bc:	4682      	mov	sl, r0
 800c5be:	460c      	mov	r4, r1
 800c5c0:	4690      	mov	r8, r2
 800c5c2:	4699      	mov	r9, r3
 800c5c4:	d837      	bhi.n	800c636 <__ssputs_r+0x82>
 800c5c6:	898a      	ldrh	r2, [r1, #12]
 800c5c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5cc:	d031      	beq.n	800c632 <__ssputs_r+0x7e>
 800c5ce:	6825      	ldr	r5, [r4, #0]
 800c5d0:	6909      	ldr	r1, [r1, #16]
 800c5d2:	1a6f      	subs	r7, r5, r1
 800c5d4:	6965      	ldr	r5, [r4, #20]
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5dc:	fb95 f5f3 	sdiv	r5, r5, r3
 800c5e0:	f109 0301 	add.w	r3, r9, #1
 800c5e4:	443b      	add	r3, r7
 800c5e6:	429d      	cmp	r5, r3
 800c5e8:	bf38      	it	cc
 800c5ea:	461d      	movcc	r5, r3
 800c5ec:	0553      	lsls	r3, r2, #21
 800c5ee:	d530      	bpl.n	800c652 <__ssputs_r+0x9e>
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	f7ff fbed 	bl	800bdd0 <_malloc_r>
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	b950      	cbnz	r0, 800c610 <__ssputs_r+0x5c>
 800c5fa:	230c      	movs	r3, #12
 800c5fc:	f8ca 3000 	str.w	r3, [sl]
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c606:	81a3      	strh	r3, [r4, #12]
 800c608:	f04f 30ff 	mov.w	r0, #4294967295
 800c60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c610:	463a      	mov	r2, r7
 800c612:	6921      	ldr	r1, [r4, #16]
 800c614:	f000 fcb8 	bl	800cf88 <memcpy>
 800c618:	89a3      	ldrh	r3, [r4, #12]
 800c61a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c61e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c622:	81a3      	strh	r3, [r4, #12]
 800c624:	6126      	str	r6, [r4, #16]
 800c626:	6165      	str	r5, [r4, #20]
 800c628:	443e      	add	r6, r7
 800c62a:	1bed      	subs	r5, r5, r7
 800c62c:	6026      	str	r6, [r4, #0]
 800c62e:	60a5      	str	r5, [r4, #8]
 800c630:	464e      	mov	r6, r9
 800c632:	454e      	cmp	r6, r9
 800c634:	d900      	bls.n	800c638 <__ssputs_r+0x84>
 800c636:	464e      	mov	r6, r9
 800c638:	4632      	mov	r2, r6
 800c63a:	4641      	mov	r1, r8
 800c63c:	6820      	ldr	r0, [r4, #0]
 800c63e:	f000 fcae 	bl	800cf9e <memmove>
 800c642:	68a3      	ldr	r3, [r4, #8]
 800c644:	1b9b      	subs	r3, r3, r6
 800c646:	60a3      	str	r3, [r4, #8]
 800c648:	6823      	ldr	r3, [r4, #0]
 800c64a:	441e      	add	r6, r3
 800c64c:	6026      	str	r6, [r4, #0]
 800c64e:	2000      	movs	r0, #0
 800c650:	e7dc      	b.n	800c60c <__ssputs_r+0x58>
 800c652:	462a      	mov	r2, r5
 800c654:	f000 fcbc 	bl	800cfd0 <_realloc_r>
 800c658:	4606      	mov	r6, r0
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d1e2      	bne.n	800c624 <__ssputs_r+0x70>
 800c65e:	6921      	ldr	r1, [r4, #16]
 800c660:	4650      	mov	r0, sl
 800c662:	f7ff fb67 	bl	800bd34 <_free_r>
 800c666:	e7c8      	b.n	800c5fa <__ssputs_r+0x46>

0800c668 <_svfiprintf_r>:
 800c668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	461d      	mov	r5, r3
 800c66e:	898b      	ldrh	r3, [r1, #12]
 800c670:	061f      	lsls	r7, r3, #24
 800c672:	b09d      	sub	sp, #116	; 0x74
 800c674:	4680      	mov	r8, r0
 800c676:	460c      	mov	r4, r1
 800c678:	4616      	mov	r6, r2
 800c67a:	d50f      	bpl.n	800c69c <_svfiprintf_r+0x34>
 800c67c:	690b      	ldr	r3, [r1, #16]
 800c67e:	b96b      	cbnz	r3, 800c69c <_svfiprintf_r+0x34>
 800c680:	2140      	movs	r1, #64	; 0x40
 800c682:	f7ff fba5 	bl	800bdd0 <_malloc_r>
 800c686:	6020      	str	r0, [r4, #0]
 800c688:	6120      	str	r0, [r4, #16]
 800c68a:	b928      	cbnz	r0, 800c698 <_svfiprintf_r+0x30>
 800c68c:	230c      	movs	r3, #12
 800c68e:	f8c8 3000 	str.w	r3, [r8]
 800c692:	f04f 30ff 	mov.w	r0, #4294967295
 800c696:	e0c8      	b.n	800c82a <_svfiprintf_r+0x1c2>
 800c698:	2340      	movs	r3, #64	; 0x40
 800c69a:	6163      	str	r3, [r4, #20]
 800c69c:	2300      	movs	r3, #0
 800c69e:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a0:	2320      	movs	r3, #32
 800c6a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6a6:	2330      	movs	r3, #48	; 0x30
 800c6a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6ac:	9503      	str	r5, [sp, #12]
 800c6ae:	f04f 0b01 	mov.w	fp, #1
 800c6b2:	4637      	mov	r7, r6
 800c6b4:	463d      	mov	r5, r7
 800c6b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c6ba:	b10b      	cbz	r3, 800c6c0 <_svfiprintf_r+0x58>
 800c6bc:	2b25      	cmp	r3, #37	; 0x25
 800c6be:	d13e      	bne.n	800c73e <_svfiprintf_r+0xd6>
 800c6c0:	ebb7 0a06 	subs.w	sl, r7, r6
 800c6c4:	d00b      	beq.n	800c6de <_svfiprintf_r+0x76>
 800c6c6:	4653      	mov	r3, sl
 800c6c8:	4632      	mov	r2, r6
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	4640      	mov	r0, r8
 800c6ce:	f7ff ff71 	bl	800c5b4 <__ssputs_r>
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	f000 80a4 	beq.w	800c820 <_svfiprintf_r+0x1b8>
 800c6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6da:	4453      	add	r3, sl
 800c6dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6de:	783b      	ldrb	r3, [r7, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 809d 	beq.w	800c820 <_svfiprintf_r+0x1b8>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6f0:	9304      	str	r3, [sp, #16]
 800c6f2:	9307      	str	r3, [sp, #28]
 800c6f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6f8:	931a      	str	r3, [sp, #104]	; 0x68
 800c6fa:	462f      	mov	r7, r5
 800c6fc:	2205      	movs	r2, #5
 800c6fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c702:	4850      	ldr	r0, [pc, #320]	; (800c844 <_svfiprintf_r+0x1dc>)
 800c704:	f7f3 fd8c 	bl	8000220 <memchr>
 800c708:	9b04      	ldr	r3, [sp, #16]
 800c70a:	b9d0      	cbnz	r0, 800c742 <_svfiprintf_r+0xda>
 800c70c:	06d9      	lsls	r1, r3, #27
 800c70e:	bf44      	itt	mi
 800c710:	2220      	movmi	r2, #32
 800c712:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c716:	071a      	lsls	r2, r3, #28
 800c718:	bf44      	itt	mi
 800c71a:	222b      	movmi	r2, #43	; 0x2b
 800c71c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c720:	782a      	ldrb	r2, [r5, #0]
 800c722:	2a2a      	cmp	r2, #42	; 0x2a
 800c724:	d015      	beq.n	800c752 <_svfiprintf_r+0xea>
 800c726:	9a07      	ldr	r2, [sp, #28]
 800c728:	462f      	mov	r7, r5
 800c72a:	2000      	movs	r0, #0
 800c72c:	250a      	movs	r5, #10
 800c72e:	4639      	mov	r1, r7
 800c730:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c734:	3b30      	subs	r3, #48	; 0x30
 800c736:	2b09      	cmp	r3, #9
 800c738:	d94d      	bls.n	800c7d6 <_svfiprintf_r+0x16e>
 800c73a:	b1b8      	cbz	r0, 800c76c <_svfiprintf_r+0x104>
 800c73c:	e00f      	b.n	800c75e <_svfiprintf_r+0xf6>
 800c73e:	462f      	mov	r7, r5
 800c740:	e7b8      	b.n	800c6b4 <_svfiprintf_r+0x4c>
 800c742:	4a40      	ldr	r2, [pc, #256]	; (800c844 <_svfiprintf_r+0x1dc>)
 800c744:	1a80      	subs	r0, r0, r2
 800c746:	fa0b f000 	lsl.w	r0, fp, r0
 800c74a:	4318      	orrs	r0, r3
 800c74c:	9004      	str	r0, [sp, #16]
 800c74e:	463d      	mov	r5, r7
 800c750:	e7d3      	b.n	800c6fa <_svfiprintf_r+0x92>
 800c752:	9a03      	ldr	r2, [sp, #12]
 800c754:	1d11      	adds	r1, r2, #4
 800c756:	6812      	ldr	r2, [r2, #0]
 800c758:	9103      	str	r1, [sp, #12]
 800c75a:	2a00      	cmp	r2, #0
 800c75c:	db01      	blt.n	800c762 <_svfiprintf_r+0xfa>
 800c75e:	9207      	str	r2, [sp, #28]
 800c760:	e004      	b.n	800c76c <_svfiprintf_r+0x104>
 800c762:	4252      	negs	r2, r2
 800c764:	f043 0302 	orr.w	r3, r3, #2
 800c768:	9207      	str	r2, [sp, #28]
 800c76a:	9304      	str	r3, [sp, #16]
 800c76c:	783b      	ldrb	r3, [r7, #0]
 800c76e:	2b2e      	cmp	r3, #46	; 0x2e
 800c770:	d10c      	bne.n	800c78c <_svfiprintf_r+0x124>
 800c772:	787b      	ldrb	r3, [r7, #1]
 800c774:	2b2a      	cmp	r3, #42	; 0x2a
 800c776:	d133      	bne.n	800c7e0 <_svfiprintf_r+0x178>
 800c778:	9b03      	ldr	r3, [sp, #12]
 800c77a:	1d1a      	adds	r2, r3, #4
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	9203      	str	r2, [sp, #12]
 800c780:	2b00      	cmp	r3, #0
 800c782:	bfb8      	it	lt
 800c784:	f04f 33ff 	movlt.w	r3, #4294967295
 800c788:	3702      	adds	r7, #2
 800c78a:	9305      	str	r3, [sp, #20]
 800c78c:	4d2e      	ldr	r5, [pc, #184]	; (800c848 <_svfiprintf_r+0x1e0>)
 800c78e:	7839      	ldrb	r1, [r7, #0]
 800c790:	2203      	movs	r2, #3
 800c792:	4628      	mov	r0, r5
 800c794:	f7f3 fd44 	bl	8000220 <memchr>
 800c798:	b138      	cbz	r0, 800c7aa <_svfiprintf_r+0x142>
 800c79a:	2340      	movs	r3, #64	; 0x40
 800c79c:	1b40      	subs	r0, r0, r5
 800c79e:	fa03 f000 	lsl.w	r0, r3, r0
 800c7a2:	9b04      	ldr	r3, [sp, #16]
 800c7a4:	4303      	orrs	r3, r0
 800c7a6:	3701      	adds	r7, #1
 800c7a8:	9304      	str	r3, [sp, #16]
 800c7aa:	7839      	ldrb	r1, [r7, #0]
 800c7ac:	4827      	ldr	r0, [pc, #156]	; (800c84c <_svfiprintf_r+0x1e4>)
 800c7ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7b2:	2206      	movs	r2, #6
 800c7b4:	1c7e      	adds	r6, r7, #1
 800c7b6:	f7f3 fd33 	bl	8000220 <memchr>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d038      	beq.n	800c830 <_svfiprintf_r+0x1c8>
 800c7be:	4b24      	ldr	r3, [pc, #144]	; (800c850 <_svfiprintf_r+0x1e8>)
 800c7c0:	bb13      	cbnz	r3, 800c808 <_svfiprintf_r+0x1a0>
 800c7c2:	9b03      	ldr	r3, [sp, #12]
 800c7c4:	3307      	adds	r3, #7
 800c7c6:	f023 0307 	bic.w	r3, r3, #7
 800c7ca:	3308      	adds	r3, #8
 800c7cc:	9303      	str	r3, [sp, #12]
 800c7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d0:	444b      	add	r3, r9
 800c7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d4:	e76d      	b.n	800c6b2 <_svfiprintf_r+0x4a>
 800c7d6:	fb05 3202 	mla	r2, r5, r2, r3
 800c7da:	2001      	movs	r0, #1
 800c7dc:	460f      	mov	r7, r1
 800c7de:	e7a6      	b.n	800c72e <_svfiprintf_r+0xc6>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	3701      	adds	r7, #1
 800c7e4:	9305      	str	r3, [sp, #20]
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	250a      	movs	r5, #10
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7f0:	3a30      	subs	r2, #48	; 0x30
 800c7f2:	2a09      	cmp	r2, #9
 800c7f4:	d903      	bls.n	800c7fe <_svfiprintf_r+0x196>
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d0c8      	beq.n	800c78c <_svfiprintf_r+0x124>
 800c7fa:	9105      	str	r1, [sp, #20]
 800c7fc:	e7c6      	b.n	800c78c <_svfiprintf_r+0x124>
 800c7fe:	fb05 2101 	mla	r1, r5, r1, r2
 800c802:	2301      	movs	r3, #1
 800c804:	4607      	mov	r7, r0
 800c806:	e7f0      	b.n	800c7ea <_svfiprintf_r+0x182>
 800c808:	ab03      	add	r3, sp, #12
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	4622      	mov	r2, r4
 800c80e:	4b11      	ldr	r3, [pc, #68]	; (800c854 <_svfiprintf_r+0x1ec>)
 800c810:	a904      	add	r1, sp, #16
 800c812:	4640      	mov	r0, r8
 800c814:	f3af 8000 	nop.w
 800c818:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c81c:	4681      	mov	r9, r0
 800c81e:	d1d6      	bne.n	800c7ce <_svfiprintf_r+0x166>
 800c820:	89a3      	ldrh	r3, [r4, #12]
 800c822:	065b      	lsls	r3, r3, #25
 800c824:	f53f af35 	bmi.w	800c692 <_svfiprintf_r+0x2a>
 800c828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c82a:	b01d      	add	sp, #116	; 0x74
 800c82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c830:	ab03      	add	r3, sp, #12
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	4622      	mov	r2, r4
 800c836:	4b07      	ldr	r3, [pc, #28]	; (800c854 <_svfiprintf_r+0x1ec>)
 800c838:	a904      	add	r1, sp, #16
 800c83a:	4640      	mov	r0, r8
 800c83c:	f000 f9c2 	bl	800cbc4 <_printf_i>
 800c840:	e7ea      	b.n	800c818 <_svfiprintf_r+0x1b0>
 800c842:	bf00      	nop
 800c844:	08011ae4 	.word	0x08011ae4
 800c848:	08011aea 	.word	0x08011aea
 800c84c:	08011aee 	.word	0x08011aee
 800c850:	00000000 	.word	0x00000000
 800c854:	0800c5b5 	.word	0x0800c5b5

0800c858 <__sfputc_r>:
 800c858:	6893      	ldr	r3, [r2, #8]
 800c85a:	3b01      	subs	r3, #1
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	b410      	push	{r4}
 800c860:	6093      	str	r3, [r2, #8]
 800c862:	da08      	bge.n	800c876 <__sfputc_r+0x1e>
 800c864:	6994      	ldr	r4, [r2, #24]
 800c866:	42a3      	cmp	r3, r4
 800c868:	db01      	blt.n	800c86e <__sfputc_r+0x16>
 800c86a:	290a      	cmp	r1, #10
 800c86c:	d103      	bne.n	800c876 <__sfputc_r+0x1e>
 800c86e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c872:	f7ff bbff 	b.w	800c074 <__swbuf_r>
 800c876:	6813      	ldr	r3, [r2, #0]
 800c878:	1c58      	adds	r0, r3, #1
 800c87a:	6010      	str	r0, [r2, #0]
 800c87c:	7019      	strb	r1, [r3, #0]
 800c87e:	4608      	mov	r0, r1
 800c880:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <__sfputs_r>:
 800c886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c888:	4606      	mov	r6, r0
 800c88a:	460f      	mov	r7, r1
 800c88c:	4614      	mov	r4, r2
 800c88e:	18d5      	adds	r5, r2, r3
 800c890:	42ac      	cmp	r4, r5
 800c892:	d101      	bne.n	800c898 <__sfputs_r+0x12>
 800c894:	2000      	movs	r0, #0
 800c896:	e007      	b.n	800c8a8 <__sfputs_r+0x22>
 800c898:	463a      	mov	r2, r7
 800c89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f7ff ffda 	bl	800c858 <__sfputc_r>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	d1f3      	bne.n	800c890 <__sfputs_r+0xa>
 800c8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8ac <_vfiprintf_r>:
 800c8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	b09d      	sub	sp, #116	; 0x74
 800c8b4:	4617      	mov	r7, r2
 800c8b6:	461d      	mov	r5, r3
 800c8b8:	4606      	mov	r6, r0
 800c8ba:	b118      	cbz	r0, 800c8c4 <_vfiprintf_r+0x18>
 800c8bc:	6983      	ldr	r3, [r0, #24]
 800c8be:	b90b      	cbnz	r3, 800c8c4 <_vfiprintf_r+0x18>
 800c8c0:	f7ff fd88 	bl	800c3d4 <__sinit>
 800c8c4:	4b7c      	ldr	r3, [pc, #496]	; (800cab8 <_vfiprintf_r+0x20c>)
 800c8c6:	429c      	cmp	r4, r3
 800c8c8:	d158      	bne.n	800c97c <_vfiprintf_r+0xd0>
 800c8ca:	6874      	ldr	r4, [r6, #4]
 800c8cc:	89a3      	ldrh	r3, [r4, #12]
 800c8ce:	0718      	lsls	r0, r3, #28
 800c8d0:	d55e      	bpl.n	800c990 <_vfiprintf_r+0xe4>
 800c8d2:	6923      	ldr	r3, [r4, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d05b      	beq.n	800c990 <_vfiprintf_r+0xe4>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	9309      	str	r3, [sp, #36]	; 0x24
 800c8dc:	2320      	movs	r3, #32
 800c8de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8e2:	2330      	movs	r3, #48	; 0x30
 800c8e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8e8:	9503      	str	r5, [sp, #12]
 800c8ea:	f04f 0b01 	mov.w	fp, #1
 800c8ee:	46b8      	mov	r8, r7
 800c8f0:	4645      	mov	r5, r8
 800c8f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c8f6:	b10b      	cbz	r3, 800c8fc <_vfiprintf_r+0x50>
 800c8f8:	2b25      	cmp	r3, #37	; 0x25
 800c8fa:	d154      	bne.n	800c9a6 <_vfiprintf_r+0xfa>
 800c8fc:	ebb8 0a07 	subs.w	sl, r8, r7
 800c900:	d00b      	beq.n	800c91a <_vfiprintf_r+0x6e>
 800c902:	4653      	mov	r3, sl
 800c904:	463a      	mov	r2, r7
 800c906:	4621      	mov	r1, r4
 800c908:	4630      	mov	r0, r6
 800c90a:	f7ff ffbc 	bl	800c886 <__sfputs_r>
 800c90e:	3001      	adds	r0, #1
 800c910:	f000 80c2 	beq.w	800ca98 <_vfiprintf_r+0x1ec>
 800c914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c916:	4453      	add	r3, sl
 800c918:	9309      	str	r3, [sp, #36]	; 0x24
 800c91a:	f898 3000 	ldrb.w	r3, [r8]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 80ba 	beq.w	800ca98 <_vfiprintf_r+0x1ec>
 800c924:	2300      	movs	r3, #0
 800c926:	f04f 32ff 	mov.w	r2, #4294967295
 800c92a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c92e:	9304      	str	r3, [sp, #16]
 800c930:	9307      	str	r3, [sp, #28]
 800c932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c936:	931a      	str	r3, [sp, #104]	; 0x68
 800c938:	46a8      	mov	r8, r5
 800c93a:	2205      	movs	r2, #5
 800c93c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c940:	485e      	ldr	r0, [pc, #376]	; (800cabc <_vfiprintf_r+0x210>)
 800c942:	f7f3 fc6d 	bl	8000220 <memchr>
 800c946:	9b04      	ldr	r3, [sp, #16]
 800c948:	bb78      	cbnz	r0, 800c9aa <_vfiprintf_r+0xfe>
 800c94a:	06d9      	lsls	r1, r3, #27
 800c94c:	bf44      	itt	mi
 800c94e:	2220      	movmi	r2, #32
 800c950:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c954:	071a      	lsls	r2, r3, #28
 800c956:	bf44      	itt	mi
 800c958:	222b      	movmi	r2, #43	; 0x2b
 800c95a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c95e:	782a      	ldrb	r2, [r5, #0]
 800c960:	2a2a      	cmp	r2, #42	; 0x2a
 800c962:	d02a      	beq.n	800c9ba <_vfiprintf_r+0x10e>
 800c964:	9a07      	ldr	r2, [sp, #28]
 800c966:	46a8      	mov	r8, r5
 800c968:	2000      	movs	r0, #0
 800c96a:	250a      	movs	r5, #10
 800c96c:	4641      	mov	r1, r8
 800c96e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c972:	3b30      	subs	r3, #48	; 0x30
 800c974:	2b09      	cmp	r3, #9
 800c976:	d969      	bls.n	800ca4c <_vfiprintf_r+0x1a0>
 800c978:	b360      	cbz	r0, 800c9d4 <_vfiprintf_r+0x128>
 800c97a:	e024      	b.n	800c9c6 <_vfiprintf_r+0x11a>
 800c97c:	4b50      	ldr	r3, [pc, #320]	; (800cac0 <_vfiprintf_r+0x214>)
 800c97e:	429c      	cmp	r4, r3
 800c980:	d101      	bne.n	800c986 <_vfiprintf_r+0xda>
 800c982:	68b4      	ldr	r4, [r6, #8]
 800c984:	e7a2      	b.n	800c8cc <_vfiprintf_r+0x20>
 800c986:	4b4f      	ldr	r3, [pc, #316]	; (800cac4 <_vfiprintf_r+0x218>)
 800c988:	429c      	cmp	r4, r3
 800c98a:	bf08      	it	eq
 800c98c:	68f4      	ldreq	r4, [r6, #12]
 800c98e:	e79d      	b.n	800c8cc <_vfiprintf_r+0x20>
 800c990:	4621      	mov	r1, r4
 800c992:	4630      	mov	r0, r6
 800c994:	f7ff fbc0 	bl	800c118 <__swsetup_r>
 800c998:	2800      	cmp	r0, #0
 800c99a:	d09d      	beq.n	800c8d8 <_vfiprintf_r+0x2c>
 800c99c:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a0:	b01d      	add	sp, #116	; 0x74
 800c9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a6:	46a8      	mov	r8, r5
 800c9a8:	e7a2      	b.n	800c8f0 <_vfiprintf_r+0x44>
 800c9aa:	4a44      	ldr	r2, [pc, #272]	; (800cabc <_vfiprintf_r+0x210>)
 800c9ac:	1a80      	subs	r0, r0, r2
 800c9ae:	fa0b f000 	lsl.w	r0, fp, r0
 800c9b2:	4318      	orrs	r0, r3
 800c9b4:	9004      	str	r0, [sp, #16]
 800c9b6:	4645      	mov	r5, r8
 800c9b8:	e7be      	b.n	800c938 <_vfiprintf_r+0x8c>
 800c9ba:	9a03      	ldr	r2, [sp, #12]
 800c9bc:	1d11      	adds	r1, r2, #4
 800c9be:	6812      	ldr	r2, [r2, #0]
 800c9c0:	9103      	str	r1, [sp, #12]
 800c9c2:	2a00      	cmp	r2, #0
 800c9c4:	db01      	blt.n	800c9ca <_vfiprintf_r+0x11e>
 800c9c6:	9207      	str	r2, [sp, #28]
 800c9c8:	e004      	b.n	800c9d4 <_vfiprintf_r+0x128>
 800c9ca:	4252      	negs	r2, r2
 800c9cc:	f043 0302 	orr.w	r3, r3, #2
 800c9d0:	9207      	str	r2, [sp, #28]
 800c9d2:	9304      	str	r3, [sp, #16]
 800c9d4:	f898 3000 	ldrb.w	r3, [r8]
 800c9d8:	2b2e      	cmp	r3, #46	; 0x2e
 800c9da:	d10e      	bne.n	800c9fa <_vfiprintf_r+0x14e>
 800c9dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c9e2:	d138      	bne.n	800ca56 <_vfiprintf_r+0x1aa>
 800c9e4:	9b03      	ldr	r3, [sp, #12]
 800c9e6:	1d1a      	adds	r2, r3, #4
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	9203      	str	r2, [sp, #12]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	bfb8      	it	lt
 800c9f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9f4:	f108 0802 	add.w	r8, r8, #2
 800c9f8:	9305      	str	r3, [sp, #20]
 800c9fa:	4d33      	ldr	r5, [pc, #204]	; (800cac8 <_vfiprintf_r+0x21c>)
 800c9fc:	f898 1000 	ldrb.w	r1, [r8]
 800ca00:	2203      	movs	r2, #3
 800ca02:	4628      	mov	r0, r5
 800ca04:	f7f3 fc0c 	bl	8000220 <memchr>
 800ca08:	b140      	cbz	r0, 800ca1c <_vfiprintf_r+0x170>
 800ca0a:	2340      	movs	r3, #64	; 0x40
 800ca0c:	1b40      	subs	r0, r0, r5
 800ca0e:	fa03 f000 	lsl.w	r0, r3, r0
 800ca12:	9b04      	ldr	r3, [sp, #16]
 800ca14:	4303      	orrs	r3, r0
 800ca16:	f108 0801 	add.w	r8, r8, #1
 800ca1a:	9304      	str	r3, [sp, #16]
 800ca1c:	f898 1000 	ldrb.w	r1, [r8]
 800ca20:	482a      	ldr	r0, [pc, #168]	; (800cacc <_vfiprintf_r+0x220>)
 800ca22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca26:	2206      	movs	r2, #6
 800ca28:	f108 0701 	add.w	r7, r8, #1
 800ca2c:	f7f3 fbf8 	bl	8000220 <memchr>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d037      	beq.n	800caa4 <_vfiprintf_r+0x1f8>
 800ca34:	4b26      	ldr	r3, [pc, #152]	; (800cad0 <_vfiprintf_r+0x224>)
 800ca36:	bb1b      	cbnz	r3, 800ca80 <_vfiprintf_r+0x1d4>
 800ca38:	9b03      	ldr	r3, [sp, #12]
 800ca3a:	3307      	adds	r3, #7
 800ca3c:	f023 0307 	bic.w	r3, r3, #7
 800ca40:	3308      	adds	r3, #8
 800ca42:	9303      	str	r3, [sp, #12]
 800ca44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca46:	444b      	add	r3, r9
 800ca48:	9309      	str	r3, [sp, #36]	; 0x24
 800ca4a:	e750      	b.n	800c8ee <_vfiprintf_r+0x42>
 800ca4c:	fb05 3202 	mla	r2, r5, r2, r3
 800ca50:	2001      	movs	r0, #1
 800ca52:	4688      	mov	r8, r1
 800ca54:	e78a      	b.n	800c96c <_vfiprintf_r+0xc0>
 800ca56:	2300      	movs	r3, #0
 800ca58:	f108 0801 	add.w	r8, r8, #1
 800ca5c:	9305      	str	r3, [sp, #20]
 800ca5e:	4619      	mov	r1, r3
 800ca60:	250a      	movs	r5, #10
 800ca62:	4640      	mov	r0, r8
 800ca64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca68:	3a30      	subs	r2, #48	; 0x30
 800ca6a:	2a09      	cmp	r2, #9
 800ca6c:	d903      	bls.n	800ca76 <_vfiprintf_r+0x1ca>
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d0c3      	beq.n	800c9fa <_vfiprintf_r+0x14e>
 800ca72:	9105      	str	r1, [sp, #20]
 800ca74:	e7c1      	b.n	800c9fa <_vfiprintf_r+0x14e>
 800ca76:	fb05 2101 	mla	r1, r5, r1, r2
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	4680      	mov	r8, r0
 800ca7e:	e7f0      	b.n	800ca62 <_vfiprintf_r+0x1b6>
 800ca80:	ab03      	add	r3, sp, #12
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	4622      	mov	r2, r4
 800ca86:	4b13      	ldr	r3, [pc, #76]	; (800cad4 <_vfiprintf_r+0x228>)
 800ca88:	a904      	add	r1, sp, #16
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f3af 8000 	nop.w
 800ca90:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ca94:	4681      	mov	r9, r0
 800ca96:	d1d5      	bne.n	800ca44 <_vfiprintf_r+0x198>
 800ca98:	89a3      	ldrh	r3, [r4, #12]
 800ca9a:	065b      	lsls	r3, r3, #25
 800ca9c:	f53f af7e 	bmi.w	800c99c <_vfiprintf_r+0xf0>
 800caa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800caa2:	e77d      	b.n	800c9a0 <_vfiprintf_r+0xf4>
 800caa4:	ab03      	add	r3, sp, #12
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	4622      	mov	r2, r4
 800caaa:	4b0a      	ldr	r3, [pc, #40]	; (800cad4 <_vfiprintf_r+0x228>)
 800caac:	a904      	add	r1, sp, #16
 800caae:	4630      	mov	r0, r6
 800cab0:	f000 f888 	bl	800cbc4 <_printf_i>
 800cab4:	e7ec      	b.n	800ca90 <_vfiprintf_r+0x1e4>
 800cab6:	bf00      	nop
 800cab8:	08011aa4 	.word	0x08011aa4
 800cabc:	08011ae4 	.word	0x08011ae4
 800cac0:	08011ac4 	.word	0x08011ac4
 800cac4:	08011a84 	.word	0x08011a84
 800cac8:	08011aea 	.word	0x08011aea
 800cacc:	08011aee 	.word	0x08011aee
 800cad0:	00000000 	.word	0x00000000
 800cad4:	0800c887 	.word	0x0800c887

0800cad8 <_printf_common>:
 800cad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cadc:	4691      	mov	r9, r2
 800cade:	461f      	mov	r7, r3
 800cae0:	688a      	ldr	r2, [r1, #8]
 800cae2:	690b      	ldr	r3, [r1, #16]
 800cae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cae8:	4293      	cmp	r3, r2
 800caea:	bfb8      	it	lt
 800caec:	4613      	movlt	r3, r2
 800caee:	f8c9 3000 	str.w	r3, [r9]
 800caf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800caf6:	4606      	mov	r6, r0
 800caf8:	460c      	mov	r4, r1
 800cafa:	b112      	cbz	r2, 800cb02 <_printf_common+0x2a>
 800cafc:	3301      	adds	r3, #1
 800cafe:	f8c9 3000 	str.w	r3, [r9]
 800cb02:	6823      	ldr	r3, [r4, #0]
 800cb04:	0699      	lsls	r1, r3, #26
 800cb06:	bf42      	ittt	mi
 800cb08:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cb0c:	3302      	addmi	r3, #2
 800cb0e:	f8c9 3000 	strmi.w	r3, [r9]
 800cb12:	6825      	ldr	r5, [r4, #0]
 800cb14:	f015 0506 	ands.w	r5, r5, #6
 800cb18:	d107      	bne.n	800cb2a <_printf_common+0x52>
 800cb1a:	f104 0a19 	add.w	sl, r4, #25
 800cb1e:	68e3      	ldr	r3, [r4, #12]
 800cb20:	f8d9 2000 	ldr.w	r2, [r9]
 800cb24:	1a9b      	subs	r3, r3, r2
 800cb26:	42ab      	cmp	r3, r5
 800cb28:	dc28      	bgt.n	800cb7c <_printf_common+0xa4>
 800cb2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cb2e:	6822      	ldr	r2, [r4, #0]
 800cb30:	3300      	adds	r3, #0
 800cb32:	bf18      	it	ne
 800cb34:	2301      	movne	r3, #1
 800cb36:	0692      	lsls	r2, r2, #26
 800cb38:	d42d      	bmi.n	800cb96 <_printf_common+0xbe>
 800cb3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb3e:	4639      	mov	r1, r7
 800cb40:	4630      	mov	r0, r6
 800cb42:	47c0      	blx	r8
 800cb44:	3001      	adds	r0, #1
 800cb46:	d020      	beq.n	800cb8a <_printf_common+0xb2>
 800cb48:	6823      	ldr	r3, [r4, #0]
 800cb4a:	68e5      	ldr	r5, [r4, #12]
 800cb4c:	f8d9 2000 	ldr.w	r2, [r9]
 800cb50:	f003 0306 	and.w	r3, r3, #6
 800cb54:	2b04      	cmp	r3, #4
 800cb56:	bf08      	it	eq
 800cb58:	1aad      	subeq	r5, r5, r2
 800cb5a:	68a3      	ldr	r3, [r4, #8]
 800cb5c:	6922      	ldr	r2, [r4, #16]
 800cb5e:	bf0c      	ite	eq
 800cb60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb64:	2500      	movne	r5, #0
 800cb66:	4293      	cmp	r3, r2
 800cb68:	bfc4      	itt	gt
 800cb6a:	1a9b      	subgt	r3, r3, r2
 800cb6c:	18ed      	addgt	r5, r5, r3
 800cb6e:	f04f 0900 	mov.w	r9, #0
 800cb72:	341a      	adds	r4, #26
 800cb74:	454d      	cmp	r5, r9
 800cb76:	d11a      	bne.n	800cbae <_printf_common+0xd6>
 800cb78:	2000      	movs	r0, #0
 800cb7a:	e008      	b.n	800cb8e <_printf_common+0xb6>
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	4652      	mov	r2, sl
 800cb80:	4639      	mov	r1, r7
 800cb82:	4630      	mov	r0, r6
 800cb84:	47c0      	blx	r8
 800cb86:	3001      	adds	r0, #1
 800cb88:	d103      	bne.n	800cb92 <_printf_common+0xba>
 800cb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb92:	3501      	adds	r5, #1
 800cb94:	e7c3      	b.n	800cb1e <_printf_common+0x46>
 800cb96:	18e1      	adds	r1, r4, r3
 800cb98:	1c5a      	adds	r2, r3, #1
 800cb9a:	2030      	movs	r0, #48	; 0x30
 800cb9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cba0:	4422      	add	r2, r4
 800cba2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cba6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbaa:	3302      	adds	r3, #2
 800cbac:	e7c5      	b.n	800cb3a <_printf_common+0x62>
 800cbae:	2301      	movs	r3, #1
 800cbb0:	4622      	mov	r2, r4
 800cbb2:	4639      	mov	r1, r7
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	47c0      	blx	r8
 800cbb8:	3001      	adds	r0, #1
 800cbba:	d0e6      	beq.n	800cb8a <_printf_common+0xb2>
 800cbbc:	f109 0901 	add.w	r9, r9, #1
 800cbc0:	e7d8      	b.n	800cb74 <_printf_common+0x9c>
	...

0800cbc4 <_printf_i>:
 800cbc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cbcc:	460c      	mov	r4, r1
 800cbce:	7e09      	ldrb	r1, [r1, #24]
 800cbd0:	b085      	sub	sp, #20
 800cbd2:	296e      	cmp	r1, #110	; 0x6e
 800cbd4:	4617      	mov	r7, r2
 800cbd6:	4606      	mov	r6, r0
 800cbd8:	4698      	mov	r8, r3
 800cbda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbdc:	f000 80b3 	beq.w	800cd46 <_printf_i+0x182>
 800cbe0:	d822      	bhi.n	800cc28 <_printf_i+0x64>
 800cbe2:	2963      	cmp	r1, #99	; 0x63
 800cbe4:	d036      	beq.n	800cc54 <_printf_i+0x90>
 800cbe6:	d80a      	bhi.n	800cbfe <_printf_i+0x3a>
 800cbe8:	2900      	cmp	r1, #0
 800cbea:	f000 80b9 	beq.w	800cd60 <_printf_i+0x19c>
 800cbee:	2958      	cmp	r1, #88	; 0x58
 800cbf0:	f000 8083 	beq.w	800ccfa <_printf_i+0x136>
 800cbf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbf8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cbfc:	e032      	b.n	800cc64 <_printf_i+0xa0>
 800cbfe:	2964      	cmp	r1, #100	; 0x64
 800cc00:	d001      	beq.n	800cc06 <_printf_i+0x42>
 800cc02:	2969      	cmp	r1, #105	; 0x69
 800cc04:	d1f6      	bne.n	800cbf4 <_printf_i+0x30>
 800cc06:	6820      	ldr	r0, [r4, #0]
 800cc08:	6813      	ldr	r3, [r2, #0]
 800cc0a:	0605      	lsls	r5, r0, #24
 800cc0c:	f103 0104 	add.w	r1, r3, #4
 800cc10:	d52a      	bpl.n	800cc68 <_printf_i+0xa4>
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6011      	str	r1, [r2, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	da03      	bge.n	800cc22 <_printf_i+0x5e>
 800cc1a:	222d      	movs	r2, #45	; 0x2d
 800cc1c:	425b      	negs	r3, r3
 800cc1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cc22:	486f      	ldr	r0, [pc, #444]	; (800cde0 <_printf_i+0x21c>)
 800cc24:	220a      	movs	r2, #10
 800cc26:	e039      	b.n	800cc9c <_printf_i+0xd8>
 800cc28:	2973      	cmp	r1, #115	; 0x73
 800cc2a:	f000 809d 	beq.w	800cd68 <_printf_i+0x1a4>
 800cc2e:	d808      	bhi.n	800cc42 <_printf_i+0x7e>
 800cc30:	296f      	cmp	r1, #111	; 0x6f
 800cc32:	d020      	beq.n	800cc76 <_printf_i+0xb2>
 800cc34:	2970      	cmp	r1, #112	; 0x70
 800cc36:	d1dd      	bne.n	800cbf4 <_printf_i+0x30>
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	f043 0320 	orr.w	r3, r3, #32
 800cc3e:	6023      	str	r3, [r4, #0]
 800cc40:	e003      	b.n	800cc4a <_printf_i+0x86>
 800cc42:	2975      	cmp	r1, #117	; 0x75
 800cc44:	d017      	beq.n	800cc76 <_printf_i+0xb2>
 800cc46:	2978      	cmp	r1, #120	; 0x78
 800cc48:	d1d4      	bne.n	800cbf4 <_printf_i+0x30>
 800cc4a:	2378      	movs	r3, #120	; 0x78
 800cc4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc50:	4864      	ldr	r0, [pc, #400]	; (800cde4 <_printf_i+0x220>)
 800cc52:	e055      	b.n	800cd00 <_printf_i+0x13c>
 800cc54:	6813      	ldr	r3, [r2, #0]
 800cc56:	1d19      	adds	r1, r3, #4
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6011      	str	r1, [r2, #0]
 800cc5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc64:	2301      	movs	r3, #1
 800cc66:	e08c      	b.n	800cd82 <_printf_i+0x1be>
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6011      	str	r1, [r2, #0]
 800cc6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc70:	bf18      	it	ne
 800cc72:	b21b      	sxthne	r3, r3
 800cc74:	e7cf      	b.n	800cc16 <_printf_i+0x52>
 800cc76:	6813      	ldr	r3, [r2, #0]
 800cc78:	6825      	ldr	r5, [r4, #0]
 800cc7a:	1d18      	adds	r0, r3, #4
 800cc7c:	6010      	str	r0, [r2, #0]
 800cc7e:	0628      	lsls	r0, r5, #24
 800cc80:	d501      	bpl.n	800cc86 <_printf_i+0xc2>
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	e002      	b.n	800cc8c <_printf_i+0xc8>
 800cc86:	0668      	lsls	r0, r5, #25
 800cc88:	d5fb      	bpl.n	800cc82 <_printf_i+0xbe>
 800cc8a:	881b      	ldrh	r3, [r3, #0]
 800cc8c:	4854      	ldr	r0, [pc, #336]	; (800cde0 <_printf_i+0x21c>)
 800cc8e:	296f      	cmp	r1, #111	; 0x6f
 800cc90:	bf14      	ite	ne
 800cc92:	220a      	movne	r2, #10
 800cc94:	2208      	moveq	r2, #8
 800cc96:	2100      	movs	r1, #0
 800cc98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc9c:	6865      	ldr	r5, [r4, #4]
 800cc9e:	60a5      	str	r5, [r4, #8]
 800cca0:	2d00      	cmp	r5, #0
 800cca2:	f2c0 8095 	blt.w	800cdd0 <_printf_i+0x20c>
 800cca6:	6821      	ldr	r1, [r4, #0]
 800cca8:	f021 0104 	bic.w	r1, r1, #4
 800ccac:	6021      	str	r1, [r4, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d13d      	bne.n	800cd2e <_printf_i+0x16a>
 800ccb2:	2d00      	cmp	r5, #0
 800ccb4:	f040 808e 	bne.w	800cdd4 <_printf_i+0x210>
 800ccb8:	4665      	mov	r5, ip
 800ccba:	2a08      	cmp	r2, #8
 800ccbc:	d10b      	bne.n	800ccd6 <_printf_i+0x112>
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	07db      	lsls	r3, r3, #31
 800ccc2:	d508      	bpl.n	800ccd6 <_printf_i+0x112>
 800ccc4:	6923      	ldr	r3, [r4, #16]
 800ccc6:	6862      	ldr	r2, [r4, #4]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	bfde      	ittt	le
 800cccc:	2330      	movle	r3, #48	; 0x30
 800ccce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ccd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ccd6:	ebac 0305 	sub.w	r3, ip, r5
 800ccda:	6123      	str	r3, [r4, #16]
 800ccdc:	f8cd 8000 	str.w	r8, [sp]
 800cce0:	463b      	mov	r3, r7
 800cce2:	aa03      	add	r2, sp, #12
 800cce4:	4621      	mov	r1, r4
 800cce6:	4630      	mov	r0, r6
 800cce8:	f7ff fef6 	bl	800cad8 <_printf_common>
 800ccec:	3001      	adds	r0, #1
 800ccee:	d14d      	bne.n	800cd8c <_printf_i+0x1c8>
 800ccf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf4:	b005      	add	sp, #20
 800ccf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccfa:	4839      	ldr	r0, [pc, #228]	; (800cde0 <_printf_i+0x21c>)
 800ccfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cd00:	6813      	ldr	r3, [r2, #0]
 800cd02:	6821      	ldr	r1, [r4, #0]
 800cd04:	1d1d      	adds	r5, r3, #4
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	6015      	str	r5, [r2, #0]
 800cd0a:	060a      	lsls	r2, r1, #24
 800cd0c:	d50b      	bpl.n	800cd26 <_printf_i+0x162>
 800cd0e:	07ca      	lsls	r2, r1, #31
 800cd10:	bf44      	itt	mi
 800cd12:	f041 0120 	orrmi.w	r1, r1, #32
 800cd16:	6021      	strmi	r1, [r4, #0]
 800cd18:	b91b      	cbnz	r3, 800cd22 <_printf_i+0x15e>
 800cd1a:	6822      	ldr	r2, [r4, #0]
 800cd1c:	f022 0220 	bic.w	r2, r2, #32
 800cd20:	6022      	str	r2, [r4, #0]
 800cd22:	2210      	movs	r2, #16
 800cd24:	e7b7      	b.n	800cc96 <_printf_i+0xd2>
 800cd26:	064d      	lsls	r5, r1, #25
 800cd28:	bf48      	it	mi
 800cd2a:	b29b      	uxthmi	r3, r3
 800cd2c:	e7ef      	b.n	800cd0e <_printf_i+0x14a>
 800cd2e:	4665      	mov	r5, ip
 800cd30:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd34:	fb02 3311 	mls	r3, r2, r1, r3
 800cd38:	5cc3      	ldrb	r3, [r0, r3]
 800cd3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cd3e:	460b      	mov	r3, r1
 800cd40:	2900      	cmp	r1, #0
 800cd42:	d1f5      	bne.n	800cd30 <_printf_i+0x16c>
 800cd44:	e7b9      	b.n	800ccba <_printf_i+0xf6>
 800cd46:	6813      	ldr	r3, [r2, #0]
 800cd48:	6825      	ldr	r5, [r4, #0]
 800cd4a:	6961      	ldr	r1, [r4, #20]
 800cd4c:	1d18      	adds	r0, r3, #4
 800cd4e:	6010      	str	r0, [r2, #0]
 800cd50:	0628      	lsls	r0, r5, #24
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	d501      	bpl.n	800cd5a <_printf_i+0x196>
 800cd56:	6019      	str	r1, [r3, #0]
 800cd58:	e002      	b.n	800cd60 <_printf_i+0x19c>
 800cd5a:	066a      	lsls	r2, r5, #25
 800cd5c:	d5fb      	bpl.n	800cd56 <_printf_i+0x192>
 800cd5e:	8019      	strh	r1, [r3, #0]
 800cd60:	2300      	movs	r3, #0
 800cd62:	6123      	str	r3, [r4, #16]
 800cd64:	4665      	mov	r5, ip
 800cd66:	e7b9      	b.n	800ccdc <_printf_i+0x118>
 800cd68:	6813      	ldr	r3, [r2, #0]
 800cd6a:	1d19      	adds	r1, r3, #4
 800cd6c:	6011      	str	r1, [r2, #0]
 800cd6e:	681d      	ldr	r5, [r3, #0]
 800cd70:	6862      	ldr	r2, [r4, #4]
 800cd72:	2100      	movs	r1, #0
 800cd74:	4628      	mov	r0, r5
 800cd76:	f7f3 fa53 	bl	8000220 <memchr>
 800cd7a:	b108      	cbz	r0, 800cd80 <_printf_i+0x1bc>
 800cd7c:	1b40      	subs	r0, r0, r5
 800cd7e:	6060      	str	r0, [r4, #4]
 800cd80:	6863      	ldr	r3, [r4, #4]
 800cd82:	6123      	str	r3, [r4, #16]
 800cd84:	2300      	movs	r3, #0
 800cd86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd8a:	e7a7      	b.n	800ccdc <_printf_i+0x118>
 800cd8c:	6923      	ldr	r3, [r4, #16]
 800cd8e:	462a      	mov	r2, r5
 800cd90:	4639      	mov	r1, r7
 800cd92:	4630      	mov	r0, r6
 800cd94:	47c0      	blx	r8
 800cd96:	3001      	adds	r0, #1
 800cd98:	d0aa      	beq.n	800ccf0 <_printf_i+0x12c>
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	079b      	lsls	r3, r3, #30
 800cd9e:	d413      	bmi.n	800cdc8 <_printf_i+0x204>
 800cda0:	68e0      	ldr	r0, [r4, #12]
 800cda2:	9b03      	ldr	r3, [sp, #12]
 800cda4:	4298      	cmp	r0, r3
 800cda6:	bfb8      	it	lt
 800cda8:	4618      	movlt	r0, r3
 800cdaa:	e7a3      	b.n	800ccf4 <_printf_i+0x130>
 800cdac:	2301      	movs	r3, #1
 800cdae:	464a      	mov	r2, r9
 800cdb0:	4639      	mov	r1, r7
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	47c0      	blx	r8
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	d09a      	beq.n	800ccf0 <_printf_i+0x12c>
 800cdba:	3501      	adds	r5, #1
 800cdbc:	68e3      	ldr	r3, [r4, #12]
 800cdbe:	9a03      	ldr	r2, [sp, #12]
 800cdc0:	1a9b      	subs	r3, r3, r2
 800cdc2:	42ab      	cmp	r3, r5
 800cdc4:	dcf2      	bgt.n	800cdac <_printf_i+0x1e8>
 800cdc6:	e7eb      	b.n	800cda0 <_printf_i+0x1dc>
 800cdc8:	2500      	movs	r5, #0
 800cdca:	f104 0919 	add.w	r9, r4, #25
 800cdce:	e7f5      	b.n	800cdbc <_printf_i+0x1f8>
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d1ac      	bne.n	800cd2e <_printf_i+0x16a>
 800cdd4:	7803      	ldrb	r3, [r0, #0]
 800cdd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdde:	e76c      	b.n	800ccba <_printf_i+0xf6>
 800cde0:	08011af5 	.word	0x08011af5
 800cde4:	08011b06 	.word	0x08011b06

0800cde8 <_putc_r>:
 800cde8:	b570      	push	{r4, r5, r6, lr}
 800cdea:	460d      	mov	r5, r1
 800cdec:	4614      	mov	r4, r2
 800cdee:	4606      	mov	r6, r0
 800cdf0:	b118      	cbz	r0, 800cdfa <_putc_r+0x12>
 800cdf2:	6983      	ldr	r3, [r0, #24]
 800cdf4:	b90b      	cbnz	r3, 800cdfa <_putc_r+0x12>
 800cdf6:	f7ff faed 	bl	800c3d4 <__sinit>
 800cdfa:	4b13      	ldr	r3, [pc, #76]	; (800ce48 <_putc_r+0x60>)
 800cdfc:	429c      	cmp	r4, r3
 800cdfe:	d112      	bne.n	800ce26 <_putc_r+0x3e>
 800ce00:	6874      	ldr	r4, [r6, #4]
 800ce02:	68a3      	ldr	r3, [r4, #8]
 800ce04:	3b01      	subs	r3, #1
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	60a3      	str	r3, [r4, #8]
 800ce0a:	da16      	bge.n	800ce3a <_putc_r+0x52>
 800ce0c:	69a2      	ldr	r2, [r4, #24]
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	db02      	blt.n	800ce18 <_putc_r+0x30>
 800ce12:	b2eb      	uxtb	r3, r5
 800ce14:	2b0a      	cmp	r3, #10
 800ce16:	d110      	bne.n	800ce3a <_putc_r+0x52>
 800ce18:	4622      	mov	r2, r4
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce22:	f7ff b927 	b.w	800c074 <__swbuf_r>
 800ce26:	4b09      	ldr	r3, [pc, #36]	; (800ce4c <_putc_r+0x64>)
 800ce28:	429c      	cmp	r4, r3
 800ce2a:	d101      	bne.n	800ce30 <_putc_r+0x48>
 800ce2c:	68b4      	ldr	r4, [r6, #8]
 800ce2e:	e7e8      	b.n	800ce02 <_putc_r+0x1a>
 800ce30:	4b07      	ldr	r3, [pc, #28]	; (800ce50 <_putc_r+0x68>)
 800ce32:	429c      	cmp	r4, r3
 800ce34:	bf08      	it	eq
 800ce36:	68f4      	ldreq	r4, [r6, #12]
 800ce38:	e7e3      	b.n	800ce02 <_putc_r+0x1a>
 800ce3a:	6823      	ldr	r3, [r4, #0]
 800ce3c:	1c5a      	adds	r2, r3, #1
 800ce3e:	6022      	str	r2, [r4, #0]
 800ce40:	701d      	strb	r5, [r3, #0]
 800ce42:	b2e8      	uxtb	r0, r5
 800ce44:	bd70      	pop	{r4, r5, r6, pc}
 800ce46:	bf00      	nop
 800ce48:	08011aa4 	.word	0x08011aa4
 800ce4c:	08011ac4 	.word	0x08011ac4
 800ce50:	08011a84 	.word	0x08011a84

0800ce54 <__sread>:
 800ce54:	b510      	push	{r4, lr}
 800ce56:	460c      	mov	r4, r1
 800ce58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce5c:	f000 f8de 	bl	800d01c <_read_r>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	bfab      	itete	ge
 800ce64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce66:	89a3      	ldrhlt	r3, [r4, #12]
 800ce68:	181b      	addge	r3, r3, r0
 800ce6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce6e:	bfac      	ite	ge
 800ce70:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce72:	81a3      	strhlt	r3, [r4, #12]
 800ce74:	bd10      	pop	{r4, pc}

0800ce76 <__swrite>:
 800ce76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7a:	461f      	mov	r7, r3
 800ce7c:	898b      	ldrh	r3, [r1, #12]
 800ce7e:	05db      	lsls	r3, r3, #23
 800ce80:	4605      	mov	r5, r0
 800ce82:	460c      	mov	r4, r1
 800ce84:	4616      	mov	r6, r2
 800ce86:	d505      	bpl.n	800ce94 <__swrite+0x1e>
 800ce88:	2302      	movs	r3, #2
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce90:	f000 f868 	bl	800cf64 <_lseek_r>
 800ce94:	89a3      	ldrh	r3, [r4, #12]
 800ce96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce9e:	81a3      	strh	r3, [r4, #12]
 800cea0:	4632      	mov	r2, r6
 800cea2:	463b      	mov	r3, r7
 800cea4:	4628      	mov	r0, r5
 800cea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceaa:	f000 b817 	b.w	800cedc <_write_r>

0800ceae <__sseek>:
 800ceae:	b510      	push	{r4, lr}
 800ceb0:	460c      	mov	r4, r1
 800ceb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb6:	f000 f855 	bl	800cf64 <_lseek_r>
 800ceba:	1c43      	adds	r3, r0, #1
 800cebc:	89a3      	ldrh	r3, [r4, #12]
 800cebe:	bf15      	itete	ne
 800cec0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ceca:	81a3      	strheq	r3, [r4, #12]
 800cecc:	bf18      	it	ne
 800cece:	81a3      	strhne	r3, [r4, #12]
 800ced0:	bd10      	pop	{r4, pc}

0800ced2 <__sclose>:
 800ced2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ced6:	f000 b813 	b.w	800cf00 <_close_r>
	...

0800cedc <_write_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4c07      	ldr	r4, [pc, #28]	; (800cefc <_write_r+0x20>)
 800cee0:	4605      	mov	r5, r0
 800cee2:	4608      	mov	r0, r1
 800cee4:	4611      	mov	r1, r2
 800cee6:	2200      	movs	r2, #0
 800cee8:	6022      	str	r2, [r4, #0]
 800ceea:	461a      	mov	r2, r3
 800ceec:	f7f3 fb9f 	bl	800062e <_write>
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	d102      	bne.n	800cefa <_write_r+0x1e>
 800cef4:	6823      	ldr	r3, [r4, #0]
 800cef6:	b103      	cbz	r3, 800cefa <_write_r+0x1e>
 800cef8:	602b      	str	r3, [r5, #0]
 800cefa:	bd38      	pop	{r3, r4, r5, pc}
 800cefc:	2000b9f8 	.word	0x2000b9f8

0800cf00 <_close_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4c06      	ldr	r4, [pc, #24]	; (800cf1c <_close_r+0x1c>)
 800cf04:	2300      	movs	r3, #0
 800cf06:	4605      	mov	r5, r0
 800cf08:	4608      	mov	r0, r1
 800cf0a:	6023      	str	r3, [r4, #0]
 800cf0c:	f7f3 fbb8 	bl	8000680 <_close>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d102      	bne.n	800cf1a <_close_r+0x1a>
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	b103      	cbz	r3, 800cf1a <_close_r+0x1a>
 800cf18:	602b      	str	r3, [r5, #0]
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	2000b9f8 	.word	0x2000b9f8

0800cf20 <_fstat_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4c07      	ldr	r4, [pc, #28]	; (800cf40 <_fstat_r+0x20>)
 800cf24:	2300      	movs	r3, #0
 800cf26:	4605      	mov	r5, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	6023      	str	r3, [r4, #0]
 800cf2e:	f7f3 fbaa 	bl	8000686 <_fstat>
 800cf32:	1c43      	adds	r3, r0, #1
 800cf34:	d102      	bne.n	800cf3c <_fstat_r+0x1c>
 800cf36:	6823      	ldr	r3, [r4, #0]
 800cf38:	b103      	cbz	r3, 800cf3c <_fstat_r+0x1c>
 800cf3a:	602b      	str	r3, [r5, #0]
 800cf3c:	bd38      	pop	{r3, r4, r5, pc}
 800cf3e:	bf00      	nop
 800cf40:	2000b9f8 	.word	0x2000b9f8

0800cf44 <_isatty_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4c06      	ldr	r4, [pc, #24]	; (800cf60 <_isatty_r+0x1c>)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4605      	mov	r5, r0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	6023      	str	r3, [r4, #0]
 800cf50:	f7f3 fb9e 	bl	8000690 <_isatty>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_isatty_r+0x1a>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_isatty_r+0x1a>
 800cf5c:	602b      	str	r3, [r5, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	2000b9f8 	.word	0x2000b9f8

0800cf64 <_lseek_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4c07      	ldr	r4, [pc, #28]	; (800cf84 <_lseek_r+0x20>)
 800cf68:	4605      	mov	r5, r0
 800cf6a:	4608      	mov	r0, r1
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	2200      	movs	r2, #0
 800cf70:	6022      	str	r2, [r4, #0]
 800cf72:	461a      	mov	r2, r3
 800cf74:	f7f3 fb8e 	bl	8000694 <_lseek>
 800cf78:	1c43      	adds	r3, r0, #1
 800cf7a:	d102      	bne.n	800cf82 <_lseek_r+0x1e>
 800cf7c:	6823      	ldr	r3, [r4, #0]
 800cf7e:	b103      	cbz	r3, 800cf82 <_lseek_r+0x1e>
 800cf80:	602b      	str	r3, [r5, #0]
 800cf82:	bd38      	pop	{r3, r4, r5, pc}
 800cf84:	2000b9f8 	.word	0x2000b9f8

0800cf88 <memcpy>:
 800cf88:	b510      	push	{r4, lr}
 800cf8a:	1e43      	subs	r3, r0, #1
 800cf8c:	440a      	add	r2, r1
 800cf8e:	4291      	cmp	r1, r2
 800cf90:	d100      	bne.n	800cf94 <memcpy+0xc>
 800cf92:	bd10      	pop	{r4, pc}
 800cf94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf9c:	e7f7      	b.n	800cf8e <memcpy+0x6>

0800cf9e <memmove>:
 800cf9e:	4288      	cmp	r0, r1
 800cfa0:	b510      	push	{r4, lr}
 800cfa2:	eb01 0302 	add.w	r3, r1, r2
 800cfa6:	d807      	bhi.n	800cfb8 <memmove+0x1a>
 800cfa8:	1e42      	subs	r2, r0, #1
 800cfaa:	4299      	cmp	r1, r3
 800cfac:	d00a      	beq.n	800cfc4 <memmove+0x26>
 800cfae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfb2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cfb6:	e7f8      	b.n	800cfaa <memmove+0xc>
 800cfb8:	4283      	cmp	r3, r0
 800cfba:	d9f5      	bls.n	800cfa8 <memmove+0xa>
 800cfbc:	1881      	adds	r1, r0, r2
 800cfbe:	1ad2      	subs	r2, r2, r3
 800cfc0:	42d3      	cmn	r3, r2
 800cfc2:	d100      	bne.n	800cfc6 <memmove+0x28>
 800cfc4:	bd10      	pop	{r4, pc}
 800cfc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cfce:	e7f7      	b.n	800cfc0 <memmove+0x22>

0800cfd0 <_realloc_r>:
 800cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd2:	4607      	mov	r7, r0
 800cfd4:	4614      	mov	r4, r2
 800cfd6:	460e      	mov	r6, r1
 800cfd8:	b921      	cbnz	r1, 800cfe4 <_realloc_r+0x14>
 800cfda:	4611      	mov	r1, r2
 800cfdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cfe0:	f7fe bef6 	b.w	800bdd0 <_malloc_r>
 800cfe4:	b922      	cbnz	r2, 800cff0 <_realloc_r+0x20>
 800cfe6:	f7fe fea5 	bl	800bd34 <_free_r>
 800cfea:	4625      	mov	r5, r4
 800cfec:	4628      	mov	r0, r5
 800cfee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cff0:	f000 f826 	bl	800d040 <_malloc_usable_size_r>
 800cff4:	42a0      	cmp	r0, r4
 800cff6:	d20f      	bcs.n	800d018 <_realloc_r+0x48>
 800cff8:	4621      	mov	r1, r4
 800cffa:	4638      	mov	r0, r7
 800cffc:	f7fe fee8 	bl	800bdd0 <_malloc_r>
 800d000:	4605      	mov	r5, r0
 800d002:	2800      	cmp	r0, #0
 800d004:	d0f2      	beq.n	800cfec <_realloc_r+0x1c>
 800d006:	4631      	mov	r1, r6
 800d008:	4622      	mov	r2, r4
 800d00a:	f7ff ffbd 	bl	800cf88 <memcpy>
 800d00e:	4631      	mov	r1, r6
 800d010:	4638      	mov	r0, r7
 800d012:	f7fe fe8f 	bl	800bd34 <_free_r>
 800d016:	e7e9      	b.n	800cfec <_realloc_r+0x1c>
 800d018:	4635      	mov	r5, r6
 800d01a:	e7e7      	b.n	800cfec <_realloc_r+0x1c>

0800d01c <_read_r>:
 800d01c:	b538      	push	{r3, r4, r5, lr}
 800d01e:	4c07      	ldr	r4, [pc, #28]	; (800d03c <_read_r+0x20>)
 800d020:	4605      	mov	r5, r0
 800d022:	4608      	mov	r0, r1
 800d024:	4611      	mov	r1, r2
 800d026:	2200      	movs	r2, #0
 800d028:	6022      	str	r2, [r4, #0]
 800d02a:	461a      	mov	r2, r3
 800d02c:	f7f3 faf1 	bl	8000612 <_read>
 800d030:	1c43      	adds	r3, r0, #1
 800d032:	d102      	bne.n	800d03a <_read_r+0x1e>
 800d034:	6823      	ldr	r3, [r4, #0]
 800d036:	b103      	cbz	r3, 800d03a <_read_r+0x1e>
 800d038:	602b      	str	r3, [r5, #0]
 800d03a:	bd38      	pop	{r3, r4, r5, pc}
 800d03c:	2000b9f8 	.word	0x2000b9f8

0800d040 <_malloc_usable_size_r>:
 800d040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d044:	1f18      	subs	r0, r3, #4
 800d046:	2b00      	cmp	r3, #0
 800d048:	bfbc      	itt	lt
 800d04a:	580b      	ldrlt	r3, [r1, r0]
 800d04c:	18c0      	addlt	r0, r0, r3
 800d04e:	4770      	bx	lr

0800d050 <_init>:
 800d050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d052:	bf00      	nop
 800d054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d056:	bc08      	pop	{r3}
 800d058:	469e      	mov	lr, r3
 800d05a:	4770      	bx	lr

0800d05c <_fini>:
 800d05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d05e:	bf00      	nop
 800d060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d062:	bc08      	pop	{r3}
 800d064:	469e      	mov	lr, r3
 800d066:	4770      	bx	lr
